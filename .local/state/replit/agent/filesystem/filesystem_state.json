{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# ReconMe - Payment Reconciliation Platform\n\n## Overview\n\nReconMe is a comprehensive payment reconciliation web application designed for e-commerce businesses, particularly those selling through platforms like Meesho. The system automates the complex process of matching orders with payment settlements, providing detailed financial analytics and discrepancy detection.\n\nThe application processes uploaded CSV/Excel files containing order and payment data, automatically reconciles transactions, and generates comprehensive reports with profit/loss calculations, commission tracking, and settlement analysis.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript for type safety and modern development patterns\n- **Styling**: Tailwind CSS with shadcn/ui component library for consistent, responsive design\n- **State Management**: React Query (TanStack Query) for server state management and caching\n- **Routing**: Wouter for lightweight client-side routing\n- **Forms**: React Hook Form with Zod validation for robust form handling\n- **Charts**: Recharts for data visualization and analytics dashboards\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript for full-stack type safety\n- **Database ORM**: Drizzle ORM with PostgreSQL for type-safe database operations\n- **File Processing**: Multer for multipart file uploads, with support for CSV and Excel parsing\n- **API Design**: RESTful API endpoints with proper HTTP status codes and error handling\n\n### Authentication & Authorization\n- **Primary Auth**: Firebase Authentication for user management\n- **Token Verification**: Firebase Admin SDK for server-side token validation\n- **Session Management**: JWT tokens with automatic refresh capabilities\n- **Authorization**: Role-based access control through Firebase user claims\n\n### Database Design\n- **Primary Database**: PostgreSQL with Neon serverless hosting\n- **Schema Management**: Drizzle migrations for version-controlled database changes\n- **Core Entities**:\n  - Users (Firebase UID mapping, user profiles)\n  - Products (SKU management, cost tracking, GST calculations)\n  - Orders (transaction details, customer information, pricing)\n  - Payments (settlement tracking, fee calculations)\n  - Reconciliations (matched transactions, discrepancy detection)\n  - Uploads (file processing history, batch tracking)\n\n### File Processing Pipeline\n- **Upload Handling**: Multipart form data processing with file type validation\n- **Format Support**: CSV and Excel file parsing with automatic column mapping\n- **Data Transformation**: Order and payment data normalization with validation\n- **Batch Processing**: Idempotent processing to prevent duplicate data insertion\n- **Error Handling**: Comprehensive error logging and user feedback for processing issues\n\n### Reconciliation Engine\n- **Matching Algorithm**: Sub-order number based transaction matching\n- **Financial Calculations**: \n  - Profit/loss computation with product costs and fees\n  - Commission and gateway fee tracking\n  - GST calculations and tax reporting\n- **Discrepancy Detection**: Automated identification of mismatched settlements\n- **Status Tracking**: Order lifecycle management (delivered, RTO, cancelled)\n\n### UI/UX Architecture\n- **Design System**: Consistent component library with shadcn/ui\n- **Responsive Design**: Mobile-first approach with adaptive layouts\n- **Dark Mode**: CSS custom properties for theme switching\n- **Accessibility**: ARIA compliance and keyboard navigation support\n- **Loading States**: Skeleton loading and progressive enhancement\n\n## App Starting Points\n\n### Database Setup Requirements\n- **PostgreSQL Database**: Must be provisioned using Replit's database tool\n- **Database Schema**: Run `npm run db:push` to create required tables after database provisioning\n- **Initial Setup**: The authentication system requires database tables (users, products, orders, etc.) to function properly\n\n### Known Issues\n- **Login Redirect Issue**: After successful login, users may not be automatically redirected to the dashboard. The authentication backend is working correctly (API calls return 200 status), but the frontend React component state doesn't always trigger the expected redirect from login to dashboard view. This is due to the authentication flow relying on React component re-rendering rather than explicit navigation logic.\n\n### Troubleshooting\n- If authentication fails with \"relation 'users' does not exist\" errors, run `npm run db:push` to create database tables\n- Login redirect issues can sometimes be resolved by manually refreshing the page after successful authentication\n- Check browser console logs for authentication verification errors\n\n## External Dependencies\n\n### Cloud Services\n- **Firebase**: Authentication service and user management\n- **Neon Database**: Serverless PostgreSQL hosting (replaced with Replit PostgreSQL)\n- **Replit**: Development and deployment platform\n\n### Core Libraries\n- **@neondatabase/serverless**: PostgreSQL driver for serverless environments\n- **drizzle-orm**: Type-safe ORM with query builder\n- **@tanstack/react-query**: Server state management and caching\n- **firebase-admin**: Server-side Firebase SDK for token verification\n- **multer**: File upload middleware for Express\n\n### UI Components\n- **@radix-ui**: Headless component primitives for accessibility\n- **recharts**: Chart library for data visualization\n- **react-hook-form**: Form validation and state management\n- **@hookform/resolvers**: Zod integration for form validation\n- **tailwindcss**: Utility-first CSS framework\n\n### Development Tools\n- **Vite**: Build tool with hot module replacement\n- **TypeScript**: Static type checking across the stack\n- **ESBuild**: Fast JavaScript bundler for production builds\n- **tsx**: TypeScript execution for development server\n\n### File Processing\n- **csv-parser**: CSV file parsing and transformation\n- **xlsx**: Excel file reading and data extraction\n- **date-fns**: Date manipulation and formatting utilities\n\nThe architecture emphasizes type safety, scalability, and maintainability while providing a smooth user experience for complex financial data processing workflows.","size_bytes":6296},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2766},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"server/index.ts":{"content":"import \"dotenv/config\";\nimport express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5001', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2090},"server/routes.ts":{"content":"import type { Express, Request, Response } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport multer from \"multer\";\nimport { storage } from \"./storage\";\nimport { verifyFirebaseToken } from \"./services/firebase\";\nimport { FileProcessor } from \"./services/fileProcessor\";\nimport { insertUserSchema, insertProductSchema, OrderDynamic } from \"@shared/schema\";\n\n// Multer configuration for file uploads\nconst upload = multer({\n  storage: multer.memoryStorage(),\n  limits: {\n    fileSize: 50 * 1024 * 1024, // 50MB limit\n  },\n});\n\n// Payment status calculation based on order status and settlement amount\nfunction calculatePaymentStatus(orderStatus: string, settlementAmount: number = 0): string {\n  const normalizedStatus = orderStatus.trim();\n\n  if (normalizedStatus === \"Cancelled\") {\n    return \"N/A\";\n  } else if (normalizedStatus === \"Delivered\") {\n    if (settlementAmount > 0) {\n      return \"Paid\";\n    } else {\n      return \"N/A\";\n    }\n  } else if (normalizedStatus === \"RTO\") {\n    return \"Unpaid/Zero\";\n  } else if (normalizedStatus === \"Return\") {\n    if (settlementAmount < 0) {\n      return \"Refunded\";\n    } else {\n      return \"N/A\";\n    }\n  } else {\n    return \"N/A\";\n  }\n}\n\n// Map order status from database to standard order status\nfunction normalizeOrderStatus(reasonForCredit: string): string {\n  if (!reasonForCredit) return \"Unknown\";\n\n  const reason = reasonForCredit.toUpperCase().trim();\n\n  switch (reason) {\n    case \"DELIVERED\":\n      return \"Delivered\";\n    case \"CANCELLED\":\n    case \"CANCELED\":\n      return \"Cancelled\";\n    case \"RTO_COMPLETE\":\n    case \"RTO_LOCKED\":\n    case \"RTO_OFD\":\n    case \"RTO\":\n      return \"RTO\";\n    case \"RETURN\":\n    case \"RETURNED\":\n      return \"Return\";\n    default:\n      return reason;\n  }\n}\n\n// Helper function to update orders with payment data after processing payments\nasync function updateOrdersWithPaymentData(payments: any[]) {\n  try {\n    console.log(`Updating ${payments.length} orders with payment data...`);\n    \n    for (const payment of payments) {\n      if (payment.subOrderNo) {\n        let paymentStatus = 'N/A'; // Default status\n        \n        // Get the order to check its status\n        const order = await storage.getOrderBySubOrderNo(payment.subOrderNo);\n        if (order && order.reasonForCredit) {\n          const normalizedOrderStatus = normalizeOrderStatus(order.reasonForCredit);\n          \n          // Properly sanitize settlement amount to handle currency symbols and commas\n          let settlementAmount = 0;\n          if (payment.settlementAmount != null) {\n            if (typeof payment.settlementAmount === 'number') {\n              settlementAmount = payment.settlementAmount;\n            } else if (typeof payment.settlementAmount === 'string') {\n              // Remove currency symbols (₹, $, €, £) and commas, then parse\n              const cleaned = payment.settlementAmount.replace(/[₹$€£,\\s]/g, '').trim();\n              const parsed = parseFloat(cleaned);\n              settlementAmount = Number.isFinite(parsed) ? parsed : 0;\n            }\n          }\n          \n          // Calculate payment status based on order status and settlement amount\n          paymentStatus = calculatePaymentStatus(normalizedOrderStatus, settlementAmount);\n        }\n        \n        try {\n          // Update the order with payment date and status from settlement data\n          const updateData: any = {\n            paymentStatus: paymentStatus\n          };\n          \n          // Only set payment date if it's available\n          if (payment.settlementDate) {\n            updateData.paymentDate = payment.settlementDate;\n          }\n          \n          await storage.updateOrderWithPaymentData(payment.subOrderNo, updateData);\n        } catch (error) {\n          console.error(`Error updating order ${payment.subOrderNo} with payment data:`, error);\n        }\n      }\n    }\n    \n    console.log(`Successfully updated orders with payment data`);\n  } catch (error) {\n    console.error('Error in updateOrdersWithPaymentData:', error);\n  }\n}\n\n// Auth middleware\nasync function authenticateUser(req: Request, res: Response, next: any) {\n  try {\n    const token = req.headers.authorization?.split(' ')[1];\n    if (!token) {\n      return res.status(401).json({ message: 'No token provided' });\n    }\n\n    const decodedToken = await verifyFirebaseToken(token);\n    \n    // Get the database user record\n    const user = await storage.getUserByFirebaseUid(decodedToken.uid);\n    if (!user) {\n      return res.status(401).json({ message: 'User not found in database' });\n    }\n\n    req.user = {\n      ...decodedToken,\n      dbId: user.id // Add database ID to user object\n    };\n    next();\n  } catch (error) {\n    res.status(401).json({ message: 'Invalid token' });\n  }\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Auth routes\n  app.post('/api/auth/verify', async (req: Request, res: Response) => {\n    try {\n      const { idToken } = req.body;\n      \n      if (!idToken) {\n        return res.status(400).json({ message: 'ID token is required' });\n      }\n      \n      const decodedToken = await verifyFirebaseToken(idToken);\n      \n      // Get or create user\n      let user = await storage.getUserByFirebaseUid(decodedToken.uid);\n      if (!user) {\n        user = await storage.createUser({\n          firebaseUid: decodedToken.uid,\n          email: decodedToken.email || '',\n          displayName: decodedToken.name,\n          photoURL: decodedToken.picture,\n        });\n      }\n\n      res.json({ user, token: idToken });\n    } catch (error) {\n      console.error('Auth verification error:', error);\n      res.status(401).json({ message: 'Authentication failed' });\n    }\n  });\n\n  // Dashboard routes\n  app.get('/api/dashboard/summary', authenticateUser, async (req: Request, res: Response) => {\n    try {\n      const summary = await storage.getDashboardSummary();\n      res.json(summary);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to fetch dashboard summary' });\n    }\n  });\n\n  app.get('/api/dashboard/revenue-trend', authenticateUser, async (req: Request, res: Response) => {\n    try {\n      const revenueTrend = await storage.getRevenueTrend();\n      res.json(revenueTrend);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to fetch revenue trend' });\n    }\n  });\n\n  app.get('/api/dashboard/order-status', authenticateUser, async (req: Request, res: Response) => {\n    try {\n      const orderStatus = await storage.getOrderStatusDistribution();\n      res.json(orderStatus);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to fetch order status' });\n    }\n  });\n\n  // Enhanced Dashboard Analytics Endpoints\n  app.get('/api/dashboard/comprehensive-summary', authenticateUser, async (req: Request, res: Response) => {\n    try {\n      const summary = await storage.getComprehensiveFinancialSummary();\n      res.json(summary);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to fetch comprehensive financial summary' });\n    }\n  });\n\n  app.get('/api/dashboard/settlement-components', authenticateUser, async (req: Request, res: Response) => {\n    try {\n      const components = await storage.getSettlementComponents();\n      res.json(components);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to fetch settlement components' });\n    }\n  });\n\n  app.get('/api/dashboard/earnings-overview', authenticateUser, async (req: Request, res: Response) => {\n    try {\n      const earnings = await storage.getEarningsOverview();\n      res.json(earnings);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to fetch earnings overview' });\n    }\n  });\n\n  app.get('/api/dashboard/operational-costs', authenticateUser, async (req: Request, res: Response) => {\n    try {\n      const costs = await storage.getOperationalCosts();\n      res.json(costs);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to fetch operational costs' });\n    }\n  });\n\n  app.get('/api/dashboard/daily-volume', authenticateUser, async (req: Request, res: Response) => {\n    try {\n      const dailyVolume = await storage.getDailyVolumeAndAOV();\n      res.json(dailyVolume);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to fetch daily volume data' });\n    }\n  });\n\n  app.get('/api/dashboard/top-products', authenticateUser, async (req: Request, res: Response) => {\n    try {\n      const topProducts = await storage.getTopPerformingProducts();\n      res.json(topProducts);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to fetch top products' });\n    }\n  });\n\n  app.get('/api/dashboard/top-returns', authenticateUser, async (req: Request, res: Response) => {\n    try {\n      const topReturns = await storage.getTopReturnProducts();\n      res.json(topReturns);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to fetch top return products' });\n    }\n  });\n\n  // Orders Overview Analytics (separate from Order Status chart data)\n  app.get('/api/dashboard/orders-overview', authenticateUser, async (req: Request, res: Response) => {\n    try {\n      const ordersOverview = await storage.getOrdersOverview();\n      res.json(ordersOverview);\n    } catch (error) {\n      console.error('Failed to fetch orders overview:', error);\n      res.status(500).json({ message: 'Failed to fetch orders overview' });\n    }\n  });\n\n  // Live Dashboard Metrics\n  app.get('/api/dashboard/live-metrics', authenticateUser, async (req: Request, res: Response) => {\n    try {\n      const liveMetrics = await storage.getLiveDashboardMetrics();\n      res.json(liveMetrics);\n    } catch (error) {\n      console.error('Failed to fetch live dashboard metrics:', error);\n      res.status(500).json({ message: 'Failed to fetch live dashboard metrics' });\n    }\n  });\n\n  app.post('/api/dashboard/recalculate', authenticateUser, async (req: Request, res: Response) => {\n    try {\n      await storage.recalculateAllMetrics();\n      res.json({ message: 'Metrics recalculated successfully' });\n    } catch (error) {\n      console.error('Failed to recalculate metrics:', error);\n      res.status(500).json({ message: 'Failed to recalculate metrics' });\n    }\n  });\n\n  // Dynamic Data Routes\n  app.get('/api/products-dynamic', authenticateUser, async (req: Request, res: Response) => {\n    try {\n      const products = await storage.getAllProductsDynamic();\n      res.json(products);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to fetch dynamic products' });\n    }\n  });\n\n  app.put('/api/products-dynamic/:id', authenticateUser, async (req: Request, res: Response) => {\n    try {\n      const { id } = req.params;\n      const updatedProduct = await storage.updateProductDynamic(id, req.body);\n      \n      if (updatedProduct) {\n        // Trigger real-time recalculation\n        await storage.recalculateAllMetrics();\n        res.json(updatedProduct);\n      } else {\n        res.status(404).json({ message: 'Product not found' });\n      }\n    } catch (error) {\n      console.error('Failed to update dynamic product:', error);\n      res.status(500).json({ message: 'Failed to update product' });\n    }\n  });\n\n  app.get('/api/orders-dynamic', authenticateUser, async (req: Request, res: Response) => {\n    try {\n      const userId = (req as any).user?.id;\n      const orders = await storage.getAllOrdersDynamic();\n      \n      // Get all payments to merge with orders\n      const payments = await storage.getAllPayments();\n      const paymentMap = new Map();\n      payments.forEach(payment => {\n        paymentMap.set(payment.subOrderNo, payment);\n      });\n      \n      // Get user-specific products to merge cost data\n      const products = await storage.getAllProducts(userId);\n      const productMap = new Map();\n      products.forEach(product => {\n        productMap.set(product.sku, product);\n      });\n      \n      // Merge orders with payment and product data\n      const ordersWithPayments = orders.map(order => {\n        const payment = paymentMap.get(order.subOrderNo);\n        const orderData = (order as OrderDynamic).dynamicData as Record<string, any> || {};\n        \n        // Normalize keys from dynamicData to handle variations in CSV headers\n        const normalizedOrderData: { [key: string]: any } = {};\n        for (const key in orderData) {\n          if (Object.prototype.hasOwnProperty.call(orderData, key)) {\n            normalizedOrderData[key.trim().toLowerCase()] = orderData[key];\n          }\n        }\n        \n        const sku = normalizedOrderData['sku'] || '';\n        const product = productMap.get(sku);\n        \n        // Determine payment status based on order status and settlement amount\n        const settlementAmount = parseFloat(payment?.settlementAmount || '0');\n        const orderStatus = normalizedOrderData['reason for credit entry'] || 'Unknown';\n        const normalizedOrderStatus = normalizeOrderStatus(orderStatus);\n        const paymentStatus = calculatePaymentStatus(normalizedOrderStatus, settlementAmount);\n        \n        return {\n          ...order,\n          // Explicitly map required fields from normalized data\n          sku: sku,\n          quantity: normalizedOrderData['qty'] || '1',\n          orderDate: normalizedOrderData['order date'] || new Date().toISOString(),\n          listedPrice: normalizedOrderData['supplier listed price (incl. gst + commission)'] ||\n                       normalizedOrderData['listed price'] ||\n                       normalizedOrderData['listedprice'] ||\n                       normalizedOrderData['sale price'] ||\n                       normalizedOrderData['supplier listed price'] ||\n                       normalizedOrderData['sale amount'] ||\n                       normalizedOrderData['price'] ||\n                       normalizedOrderData['listed price (incl. gst)'] ||\n                       normalizedOrderData['original price'] || '0',\n          reasonForCredit: orderStatus,\n          \n          // Payment data from ZIP file\n          paymentDate: payment?.settlementDate || null,\n          settlementAmount: payment?.settlementAmount || null,\n          settlementDate: payment?.settlementDate || null,\n          hasPayment: !!payment,\n          paymentStatus: paymentStatus,\n          // Additional payment details\n          orderValue: payment?.orderValue || null,\n          commissionFee: payment?.commissionFee || null,\n          fixedFee: payment?.fixedFee || null,\n          paymentGatewayFee: payment?.paymentGatewayFee || null,\n          adsFee: payment?.adsFee || null,\n          // Product cost data\n          costPrice: product?.costPrice || '0',\n          packagingCost: product?.packagingCost || '0',\n          finalPrice: product?.finalPrice || '0',\n          gstPercent: product?.gstPercent || 5\n        };\n      });\n      \n      // Filter orders based on query parameters\n      const { status, paymentStatus: paymentStatusFilter } = req.query;\n      let filteredOrders = ordersWithPayments;\n\n      if (status && status !== 'all') {\n        filteredOrders = filteredOrders.filter(order => normalizeOrderStatus(order.reasonForCredit) === status);\n      }\n\n      if (paymentStatusFilter && paymentStatusFilter !== 'all') {\n        filteredOrders = filteredOrders.filter(order => order.paymentStatus.toLowerCase() === (paymentStatusFilter as string).toLowerCase());\n      }\n\n      res.json(filteredOrders);\n    } catch (error) {\n      console.error('Failed to fetch dynamic orders:', error);\n      res.status(500).json({ message: 'Failed to fetch dynamic orders' });\n    }\n  });\n\n  app.put('/api/orders-dynamic/:id', authenticateUser, async (req: Request, res: Response) => {\n    try {\n      const { id } = req.params;\n      const updatedOrder = await storage.updateOrderDynamic(id, req.body);\n      \n      if (updatedOrder) {\n        // Trigger real-time recalculation\n        await storage.recalculateAllMetrics();\n        res.json(updatedOrder);\n      } else {\n        res.status(404).json({ message: 'Order not found' });\n      }\n    } catch (error) {\n      console.error('Failed to update dynamic order:', error);\n      res.status(500).json({ message: 'Failed to update order' });\n    }\n  });\n\n  // File Structure Routes\n  app.get('/api/file-structure/:uploadId', authenticateUser, async (req: Request, res: Response) => {\n    try {\n      const { uploadId } = req.params;\n      const fileStructure = await storage.getFileStructure(uploadId);\n      \n      if (fileStructure) {\n        res.json(fileStructure);\n      } else {\n        res.status(404).json({ message: 'File structure not found' });\n      }\n    } catch (error) {\n      console.error('Failed to fetch file structure:', error);\n      res.status(500).json({ message: 'Failed to fetch file structure' });\n    }\n  });\n\n  app.get('/api/current-uploads', authenticateUser, async (req: Request, res: Response) => {\n    try {\n      const currentUploads = await storage.getCurrentUploads();\n      res.json(currentUploads);\n    } catch (error) {\n      console.error('Failed to fetch current uploads:', error);\n      res.status(500).json({ message: 'Failed to fetch current uploads' });\n    }\n  });\n\n  // Upload routes\n  app.post('/api/upload', authenticateUser, upload.single('file'), async (req: Request, res: Response) => {\n    try {\n      if (!req.file) {\n        return res.status(400).json({ message: 'No file uploaded' });\n      }\n\n      const { fileType, sourceMonth, label, gstPercent } = req.body;\n      \n      // Create upload record\n      const uploadRecord = await storage.createUpload({\n        filename: req.file.filename || req.file.originalname,\n        originalName: req.file.originalname,\n        fileType,\n        status: 'processing',\n        sourceMonth,\n        label,\n        uploadedBy: req.user?.dbId || '',\n      });\n\n      // Process file asynchronously\n      processFileAsync(uploadRecord.id, req.file.buffer, fileType, gstPercent, req.user?.dbId);\n\n      res.json({ uploadId: uploadRecord.id, status: 'processing' });\n    } catch (error) {\n      console.error('Upload error:', error);\n      res.status(500).json({ message: 'Upload failed' });\n    }\n  });\n\n  app.get('/api/uploads', authenticateUser, async (req: Request, res: Response) => {\n    try {\n      const uploads = await storage.getAllUploads();\n      res.json(uploads);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to fetch uploads' });\n    }\n  });\n\n  // Orders routes\n  app.get('/api/orders', authenticateUser, async (req: Request, res: Response) => {\n    try {\n      const filters = {\n        subOrderNo: req.query.subOrderNo as string,\n        status: req.query.status as string,\n        paymentStatus: req.query.paymentStatus as string,\n        dateFrom: req.query.dateFrom ? new Date(req.query.dateFrom as string) : undefined,\n        dateTo: req.query.dateTo ? new Date(req.query.dateTo as string) : undefined,\n      };\n\n      const orders = await storage.getAllOrders(filters);\n      res.json(orders);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to fetch orders' });\n    }\n  });\n\n  // Products routes\n  app.get('/api/products', authenticateUser, async (req: Request, res: Response) => {\n    try {\n      const userId = (req as any).user?.id;\n      const products = await storage.getAllProducts(userId);\n      res.json(products);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to fetch products' });\n    }\n  });\n\n  app.post('/api/products', authenticateUser, async (req: Request, res: Response) => {\n    try {\n      const userId = (req as any).user?.id;\n      const productData = insertProductSchema.parse({ ...req.body, userId });\n      \n      const product = await storage.createProduct(productData);\n      res.status(201).json(product);\n    } catch (error) {\n      console.error('Failed to create product:', error);\n      res.status(500).json({ message: 'Failed to create product' });\n    }\n  });\n\n  app.put('/api/products/:sku', authenticateUser, async (req: Request, res: Response) => {\n    try {\n      const { sku } = req.params;\n      const userId = (req as any).user?.id;\n      const updateData = insertProductSchema.partial().parse(req.body);\n      \n      const product = await storage.updateProduct(sku, updateData, userId);\n      if (!product) {\n        return res.status(404).json({ message: 'Product not found' });\n      }\n\n      res.json(product);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to update product' });\n    }\n  });\n\n  app.post('/api/products/bulk-update', authenticateUser, async (req: Request, res: Response) => {\n    try {\n      const { field, value } = req.body;\n      const userId = (req as any).user?.id;\n      \n      if (!['packagingCost', 'gstPercent', 'costPrice'].includes(field)) {\n        return res.status(400).json({ message: 'Invalid field' });\n      }\n\n      const products = await storage.getAllProducts(userId);\n      const updates = products.map(product => \n        storage.updateProduct(product.sku, { [field]: value.toString() }, userId)\n      );\n      \n      await Promise.all(updates);\n      res.json({ message: 'Bulk update completed' });\n    } catch (error) {\n      res.status(500).json({ message: 'Bulk update failed' });\n    }\n  });\n\n  app.post('/api/products/update-all-costs', authenticateUser, async (req: Request, res: Response) => {\n    try {\n      const userId = (req as any).user?.id;\n      // Get all products for the user\n      const products = await storage.getAllProducts(userId);\n      \n      // For each product, recalculate and persist final price based on cost + packaging\n      const updates = products.map(async (product) => {\n        const costPrice = parseFloat(product.costPrice || '0');\n        const packagingCost = parseFloat(product.packagingCost || '0');\n        const finalPrice = Math.round((costPrice + packagingCost) * 100) / 100;\n        \n        // Update the product with the calculated final price\n        return await storage.updateProduct(product.sku, { \n          finalPrice: finalPrice.toString() \n        });\n      });\n      \n      const updatedProducts = await Promise.all(updates);\n      \n      // Trigger dashboard metrics recalculation\n      await storage.recalculateAllMetrics();\n      \n      res.json({ \n        message: 'All product costs updated successfully',\n        productsProcessed: updatedProducts.length,\n        totalFinalPriceCalculated: updatedProducts.reduce((sum, product) => sum + parseFloat(product?.finalPrice || '0'), 0)\n      });\n    } catch (error) {\n      console.error('Failed to update all product costs:', error);\n      res.status(500).json({ message: 'Failed to update product costs' });\n    }\n  });\n\n\n  // Export routes\n  app.get('/api/export/:type', authenticateUser, async (req: Request, res: Response) => {\n    try {\n      const { type } = req.params;\n      let data: any[] = [];\n      let filename = '';\n\n      switch (type) {\n        case 'orders':\n          data = await storage.getAllOrders();\n          filename = 'orders_export.csv';\n          break;\n        case 'payments':\n          data = await storage.getAllPayments();\n          filename = 'payments_export.csv';\n          break;\n        default:\n          return res.status(400).json({ message: 'Invalid export type' });\n      }\n\n      // Convert to CSV\n      const csv = convertToCSV(data);\n      \n      res.setHeader('Content-Type', 'text/csv');\n      res.setHeader('Content-Disposition', `attachment; filename=\"${filename}\"`);\n      res.send(csv);\n    } catch (error) {\n      res.status(500).json({ message: 'Export failed' });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n\n// Async file processing\nasync function processFileAsync(uploadId: string, buffer: Buffer, fileType: string, gstPercent?: string, userId?: string) {\n  try {\n    let result;\n    let recordsProcessed = 0;\n    \n    if (fileType === 'orders_csv') {\n      // Use new dynamic processing for orders\n      const dynamicResult = await FileProcessor.processOrdersCSVDynamic(buffer, uploadId);\n      \n      if (dynamicResult.data && dynamicResult.data.length > 0) {\n        // Convert dynamic data to order records\n        const ordersDynamic = dynamicResult.data.map(row => ({\n          uploadId,\n          dynamicData: row,\n          subOrderNo: row['Sub Order No'] || row['subOrderNo'] || '',\n        }));\n\n        // Replace all existing orders for this upload (data overwrite)\n        await storage.replaceAllOrdersDynamic(uploadId, ordersDynamic);\n        \n        // Extract and save products from the order data with userId\n        const productsDynamic = await FileProcessor.extractProductsFromOrdersDynamic(\n          dynamicResult.data, \n          uploadId, \n          gstPercent || '18'\n        );\n        \n        if (productsDynamic.length > 0 && userId) {\n          // Convert dynamic products to regular products with userId\n          const productsToSave = productsDynamic.map(product => ({\n            userId,\n            sku: product.sku,\n            title: (product.dynamicData as any)?.['Product Name'] || product.sku,\n            costPrice: (product.dynamicData as any)?.['Cost Price'] || '0',\n            packagingCost: (product.dynamicData as any)?.['Packaging Cost'] || '0',\n            gstPercent: (product.dynamicData as any)?.['GST %'] || '5'\n          }));\n          \n          // Use bulk upsert to merge based on unique SKU per user\n          await storage.bulkUpsertProducts(productsToSave);\n        }\n\n        // Save file structure metadata\n        await storage.saveFileStructure(uploadId, dynamicResult.fileStructure);\n        \n        // Mark this upload as the current version\n        await storage.markUploadAsCurrent(uploadId, fileType);\n        \n        recordsProcessed = dynamicResult.data.length;\n        \n        // Trigger real-time calculation update\n        await storage.recalculateAllMetrics(uploadId);\n        \n        console.log(`Processed ${recordsProcessed} orders dynamically, extracted ${productsDynamic.length} products`);\n      }\n\n      // Process orders through ENHANCED CSV processor with exact column mapping \n      // Only run this if dynamic processing succeeded to avoid conflicts\n      if (recordsProcessed > 0) {\n        const { CSVProcessor } = await import('./services/csvProcessor');\n        const enhancedResult = await CSVProcessor.processOrdersCSV(buffer);\n        if (enhancedResult.orders) {\n          try {\n            // Use upsert logic to handle duplicates gracefully\n            await storage.bulkUpsertOrders(enhancedResult.orders);\n            \n            // Extract products with metadata from CSV if available\n            await FileProcessor.extractProductsFromOrders(enhancedResult.orders, gstPercent || '5');\n            \n            // Apply product metadata from ENHANCED CSV (GST%, Cost Price) with default 5% GST\n            if (enhancedResult.productMetadata && enhancedResult.productMetadata.length > 0 && userId) {\n              console.log(`Applying ${enhancedResult.productMetadata.length} product metadata records from ENHANCED CSV processor`);\n              for (const metadata of enhancedResult.productMetadata) {\n                try {\n                  // Default to 5% GST if not specified (based on real file analysis)\n                  const gstToApply = metadata.gstPercent !== undefined ? metadata.gstPercent : 5;\n                  await storage.updateProductGst(metadata.sku, gstToApply, metadata.productName, userId);\n                  \n                  if (metadata.costPrice !== undefined) {\n                    await storage.updateProduct(metadata.sku, { costPrice: metadata.costPrice.toString() }, userId);\n                  }\n                } catch (error) {\n                  console.warn(`Failed to update metadata for product ${metadata.sku}:`, error);\n                }\n              }\n            }\n            \n            console.log(`Processed ${enhancedResult.orders.length} orders with exact column mapping and payment data`);\n          } catch (error) {\n            console.error('Enhanced CSV processing error (non-blocking):', error);\n          }\n        }\n      }\n\n      await storage.updateUploadStatus(uploadId, 'processed', recordsProcessed, dynamicResult.errors);\n      \n    } else if (fileType === 'payment_zip') {\n      // Use ENHANCED ZIP processing method for 42-column XLSX files\n      const { ZIPProcessor } = await import('./services/zipProcessor');\n      result = await ZIPProcessor.processPaymentZIP(buffer);\n      if (result.payments) {\n        await storage.bulkCreatePayments(result.payments);\n        \n        // CRITICAL: Update orders with payment data after processing payments\n        await updateOrdersWithPaymentData(result.payments);\n        \n        // Process additional GST data extracted from ENHANCED ZIP files (exact 42-column mapping)\n        if (result.productGstData && result.productGstData.length > 0) {\n          console.log(`Updating ${result.productGstData.length} products with GST data from ENHANCED ZIP processor`);\n          for (const gstData of result.productGstData) {\n            try {\n              console.log(`Attempting to update GST for SKU: \"${gstData.sku}\" with ${gstData.gstPercent}% GST (from column 7)`);\n              const updated = await storage.updateProductGst(gstData.sku, gstData.gstPercent, gstData.productName, userId);\n              if (updated) {\n                console.log(`✓ Successfully updated GST for SKU: \"${gstData.sku}\" to ${gstData.gstPercent}%`);\n              } else {\n                console.warn(`✗ No product found with SKU: \"${gstData.sku}\" - GST update skipped`);\n              }\n            } catch (error) {\n              console.error(`✗ Failed to update GST for product \"${gstData.sku}\":`, error);\n            }\n          }\n        }\n        \n        // Process additional order status data extracted from ZIP files\n        if (result.orderStatusData && result.orderStatusData.length > 0) {\n          console.log(`Updating ${result.orderStatusData.length} orders with status data from ZIP`);\n          for (const statusData of result.orderStatusData) {\n            try {\n              await storage.updateOrderStatus(statusData.subOrderNo, statusData.orderStatus);\n            } catch (error) {\n              console.warn(`Failed to update status for order ${statusData.subOrderNo}:`, error);\n            }\n          }\n        }\n        \n        await storage.updateUploadStatus(uploadId, 'processed', result.payments.length, result.errors);\n        \n        // Trigger real-time calculation update for payments\n        await storage.recalculateAllMetrics(uploadId);\n        console.log(`Processed ${result.payments.length} payments from ZIP file`);\n      } else {\n        // If ZIP processing failed, try direct XLSX processing as fallback\n        console.log('ZIP processing failed, attempting direct XLSX processing as fallback');\n        const fallbackResult = await FileProcessor.processPaymentsXLSX(buffer);\n        if (fallbackResult.payments) {\n          await storage.bulkCreatePayments(fallbackResult.payments);\n          \n          // CRITICAL: Update orders with payment data after processing payments\n          await updateOrdersWithPaymentData(fallbackResult.payments);\n          \n          await storage.updateUploadStatus(uploadId, 'processed', fallbackResult.payments.length, [...(result?.errors || []), ...(fallbackResult.errors || [])]);\n          await storage.recalculateAllMetrics(uploadId);\n          console.log(`Processed ${fallbackResult.payments.length} payments from direct XLSX`);\n        }\n      }\n    } else if (fileType === 'products_csv') {\n      // Handle product files dynamically\n      const dynamicResult = await FileProcessor.processGenericCSV(buffer, uploadId, 'SKU');\n      \n      if (dynamicResult.data && dynamicResult.data.length > 0 && userId) {\n        const productsDynamic = dynamicResult.data.map(row => ({\n          uploadId,\n          dynamicData: row,\n          sku: row['SKU'] || row['sku'] || '',\n        }));\n\n        // Replace all existing products for this upload\n        await storage.replaceAllProductsDynamic(uploadId, productsDynamic);\n        \n        // Also save to regular products table with userId for future usage\n        const productsToSave = dynamicResult.data.map(row => ({\n          userId,\n          sku: row['SKU'] || row['sku'] || '',\n          title: row['Product Name'] || row['Title'] || row['Name'] || row['SKU'] || row['sku'] || '',\n          costPrice: row['Cost Price'] || row['Cost'] || '0',\n          packagingCost: row['Packaging Cost'] || row['Packaging'] || '0',\n          gstPercent: row['GST %'] || row['GST'] || '5'\n        }));\n        \n        // Use bulk upsert to merge based on unique SKU per user\n        await storage.bulkUpsertProducts(productsToSave);\n        \n        // Save file structure metadata\n        await storage.saveFileStructure(uploadId, dynamicResult.fileStructure);\n        \n        // Mark this upload as current\n        await storage.markUploadAsCurrent(uploadId, fileType);\n        \n        recordsProcessed = dynamicResult.data.length;\n        \n        // Trigger real-time calculation update\n        await storage.recalculateAllMetrics(uploadId);\n        \n        console.log(`Processed ${recordsProcessed} products dynamically and saved to user products`);\n      }\n\n      await storage.updateUploadStatus(uploadId, 'processed', recordsProcessed, dynamicResult.errors);\n    }\n  } catch (error) {\n    console.error(`File processing error for upload ${uploadId}:`, error);\n    await storage.updateUploadStatus(uploadId, 'failed', 0, [String(error)]);\n  }\n}\n\n// CSV conversion helper\nfunction convertToCSV(data: any[]): string {\n  if (data.length === 0) return '';\n  \n  const headers = Object.keys(data[0]);\n  const csvRows = [headers.join(',')];\n  \n  for (const row of data) {\n    const values = headers.map(header => {\n      const val = row[header];\n      return typeof val === 'string' ? `\"${val.replace(/\"/g, '\"\"')}\"` : val;\n    });\n    csvRows.push(values.join(','));\n  }\n  \n  return csvRows.join('\\n');\n}\n\n// Extend Express Request type\ndeclare global {\n  namespace Express {\n    interface Request {\n      user?: {\n        uid: string;\n        email?: string;\n        name?: string;\n        picture?: string;\n        dbId?: string; // Add database ID\n      };\n    }\n  }\n}\n","size_bytes":34357},"server/storage.ts":{"content":"import postgres from \"postgres\";\nimport { drizzle } from \"drizzle-orm/postgres-js\";\nimport { eq, desc, asc, sql, count, sum, and, or, like, gte, lte } from \"drizzle-orm\";\nimport { \n  users, products, orders, payments, reconciliations, uploads,\n  productsDynamic, ordersDynamic, calculationCache,\n  type User, type InsertUser,\n  type Product, type InsertProduct,\n  type ProductDynamic, type InsertProductDynamic,\n  type Order, type InsertOrder,\n  type OrderDynamic, type InsertOrderDynamic,\n  type Payment, type InsertPayment,\n  type Reconciliation, type InsertReconciliation,\n  type Upload, type InsertUpload,\n  type CalculationCache, type InsertCalculationCache,\n  type ComprehensiveFinancialSummary,\n  type SettlementComponentsData,\n  type EarningsOverviewData,\n  type OperationalCostsData,\n  type DailyVolumeData,\n  type TopProductsData,\n  type TopReturnsData,\n  type OrdersOverview,\n  type FileStructure, type ColumnMetadata, type LiveDashboardMetrics\n} from \"@shared/schema\";\n\n// Database Configuration\nconst DATABASE_URL = process.env.DATABASE_URL;\n\nif (!DATABASE_URL) {\n  throw new Error(\"DATABASE_URL environment variable is required\");\n}\n\nconst client = postgres(DATABASE_URL, { prepare: false });\nconst db = drizzle(client);\n\nexport interface IStorage {\n  // Users\n  getUserByFirebaseUid(firebaseUid: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, user: Partial<InsertUser>): Promise<User | undefined>;\n\n  // Products (Legacy)\n  getAllProducts(userId?: string): Promise<Product[]>;\n  getProductBySku(sku: string, userId?: string): Promise<Product | undefined>;\n  createProduct(product: InsertProduct): Promise<Product>;\n  updateProduct(sku: string, product: Partial<InsertProduct>, userId?: string): Promise<Product | undefined>;\n  bulkCreateProducts(products: InsertProduct[]): Promise<Product[]>;\n  bulkUpsertProducts(products: InsertProduct[]): Promise<Product[]>;\n  updateProductGst(sku: string, gstPercent: number, productName?: string, userId?: string): Promise<Product | undefined>;\n\n  // Dynamic Products\n  getAllProductsDynamic(): Promise<ProductDynamic[]>;\n  getProductDynamicBySku(sku: string): Promise<ProductDynamic | undefined>;\n  createProductDynamic(product: InsertProductDynamic): Promise<ProductDynamic>;\n  updateProductDynamic(id: string, product: Partial<InsertProductDynamic>): Promise<ProductDynamic | undefined>;\n  bulkCreateProductsDynamic(products: InsertProductDynamic[]): Promise<ProductDynamic[]>;\n  replaceAllProductsDynamic(uploadId: string, products: InsertProductDynamic[]): Promise<ProductDynamic[]>;\n  addUniqueProductsDynamic(uploadId: string, products: InsertProductDynamic[]): Promise<ProductDynamic[]>;\n\n  // Orders (Legacy)\n  getAllOrders(filters?: OrderFilters): Promise<Order[]>;\n  getOrderBySubOrderNo(subOrderNo: string): Promise<Order | undefined>;\n  createOrder(order: InsertOrder): Promise<Order>;\n  bulkCreateOrders(orders: InsertOrder[]): Promise<Order[]>;\n  bulkUpsertOrders(orders: InsertOrder[]): Promise<Order[]>;\n  updateOrderWithPaymentData(subOrderNo: string, paymentData: { paymentDate: Date; paymentStatus: string }): Promise<Order | undefined>;\n  batchUpdateOrdersWithPaymentData(paymentData: Array<{ subOrderNo: string; paymentDate: Date; paymentStatus: string }>): Promise<void>;\n  updateOrderStatus(subOrderNo: string, orderStatus: string): Promise<Order | undefined>;\n\n  // Dynamic Orders\n  getAllOrdersDynamic(): Promise<OrderDynamic[]>;\n  getOrderDynamicBySubOrderNo(subOrderNo: string): Promise<OrderDynamic | undefined>;\n  createOrderDynamic(order: InsertOrderDynamic): Promise<OrderDynamic>;\n  updateOrderDynamic(id: string, order: Partial<InsertOrderDynamic>): Promise<OrderDynamic | undefined>;\n  bulkCreateOrdersDynamic(orders: InsertOrderDynamic[]): Promise<OrderDynamic[]>;\n  replaceAllOrdersDynamic(uploadId: string, orders: InsertOrderDynamic[]): Promise<OrderDynamic[]>;\n\n  // Payments\n  getAllPayments(): Promise<Payment[]>;\n  getPaymentsBySubOrderNo(subOrderNo: string): Promise<Payment[]>;\n  createPayment(payment: InsertPayment): Promise<Payment>;\n  bulkCreatePayments(payments: InsertPayment[]): Promise<Payment[]>;\n\n  // Reconciliations\n  getAllReconciliations(status?: string): Promise<Reconciliation[]>;\n  getReconciliationBySubOrderNo(subOrderNo: string): Promise<Reconciliation | undefined>;\n  createReconciliation(reconciliation: InsertReconciliation): Promise<Reconciliation>;\n  bulkCreateReconciliations(reconciliations: InsertReconciliation[]): Promise<Reconciliation[]>;\n  getReconciliationSummary(): Promise<ReconciliationSummary>;\n\n  // Uploads\n  getAllUploads(): Promise<Upload[]>;\n  createUpload(upload: InsertUpload): Promise<Upload>;\n  updateUploadStatus(id: string, status: string, recordsProcessed?: number, errors?: any): Promise<Upload | undefined>;\n  markUploadAsCurrent(uploadId: string, fileType: string): Promise<void>;\n  getFileStructure(uploadId: string): Promise<FileStructure | undefined>;\n  saveFileStructure(uploadId: string, structure: FileStructure): Promise<void>;\n\n  // Calculation Cache\n  getCalculationCache(cacheKey: string): Promise<CalculationCache | undefined>;\n  setCalculationCache(cache: InsertCalculationCache): Promise<CalculationCache>;\n  invalidateCalculationCache(cacheKeys: string[]): Promise<void>;\n  invalidateCalculationCacheByUpload(uploadId: string): Promise<void>;\n\n  // Analytics\n  getDashboardSummary(): Promise<DashboardSummary>;\n  getRevenueTrend(): Promise<RevenueTrendData[]>;\n  getOrderStatusDistribution(): Promise<OrderStatusData[]>;\n  \n  // Enhanced Analytics\n  getComprehensiveFinancialSummary(): Promise<ComprehensiveFinancialSummary>;\n  getSettlementComponents(): Promise<SettlementComponentsData[]>;\n  getEarningsOverview(): Promise<EarningsOverviewData[]>;\n  getOperationalCosts(): Promise<OperationalCostsData[]>;\n  getDailyVolumeAndAOV(): Promise<DailyVolumeData[]>;\n  getTopPerformingProducts(): Promise<TopProductsData[]>;\n  getTopReturnProducts(): Promise<TopReturnsData[]>;\n  \n  // Orders Overview Analytics (separate from Order Status chart)\n  getOrdersOverview(): Promise<OrdersOverview>;\n\n  // Live Dashboard Metrics\n  getLiveDashboardMetrics(): Promise<LiveDashboardMetrics>;\n  calculateRealTimeMetrics(): Promise<LiveDashboardMetrics>;\n  recalculateAllMetrics(triggerUploadId?: string): Promise<void>;\n  getCurrentUploads(): Promise<Upload[]>;\n}\n\nexport interface OrderFilters {\n  subOrderNo?: string;\n  status?: string;\n  paymentStatus?: string;\n  dateFrom?: Date;\n  dateTo?: Date;\n}\n\nexport interface ReconciliationSummary {\n  reconciled: number;\n  mismatch: number;\n  unreconciled: number;\n  successRate: number;\n}\n\nexport interface DashboardSummary {\n  totalRevenue: number;\n  netProfit: number;\n  totalOrders: number;\n  successRate: number;\n  revenueGrowth: number;\n  profitGrowth: number;\n  ordersGrowth: number;\n  successRateGrowth: number;\n}\n\nexport interface RevenueTrendData {\n  month: string;\n  revenue: number;\n  profit: number;\n}\n\nexport interface OrderStatusData {\n  name: string;\n  value: number;\n  color: string;\n}\n\n\nexport class DatabaseStorage implements IStorage {\n  // Helper function to normalize decimal fields for database insertion\n  private normalizeDecimal(value: any): string {\n    if (value === null || value === undefined || value === '' || value === 'null') {\n      return '0';\n    }\n    if (typeof value === 'number') {\n      return value.toString();\n    }\n    if (typeof value === 'string') {\n      const cleaned = value.trim();\n      if (cleaned === '' || isNaN(Number(cleaned))) {\n        return '0';\n      }\n      return cleaned;\n    }\n    return '0';\n  }\n\n  // Normalize payment object before database insertion\n  private normalizePayment(payment: InsertPayment): InsertPayment {\n    return {\n      ...payment,\n      settlementAmount: this.normalizeDecimal(payment.settlementAmount),\n      orderValue: this.normalizeDecimal(payment.orderValue),\n      commissionFee: this.normalizeDecimal(payment.commissionFee),\n      fixedFee: this.normalizeDecimal(payment.fixedFee),\n      paymentGatewayFee: this.normalizeDecimal(payment.paymentGatewayFee),\n      adsFee: this.normalizeDecimal(payment.adsFee),\n    };\n  }\n  async getUserByFirebaseUid(firebaseUid: string): Promise<User | undefined> {\n    const result = await db.select().from(users).where(eq(users.firebaseUid, firebaseUid)).limit(1);\n    return result[0];\n  }\n\n  async createUser(user: InsertUser): Promise<User> {\n    const result = await db.insert(users).values(user).returning();\n    return result[0];\n  }\n\n  async updateUser(id: string, user: Partial<InsertUser>): Promise<User | undefined> {\n    const result = await db.update(users).set(user).where(eq(users.id, id)).returning();\n    return result[0];\n  }\n\n  async getAllProducts(userId?: string): Promise<Product[]> {\n    if (userId) {\n      return db.select().from(products).where(eq(products.userId, userId)).orderBy(asc(products.sku));\n    }\n    return db.select().from(products).orderBy(asc(products.sku));\n  }\n\n  async getProductBySku(sku: string, userId?: string): Promise<Product | undefined> {\n    if (userId) {\n      const result = await db.select().from(products).where(and(eq(products.sku, sku), eq(products.userId, userId))).limit(1);\n      return result[0];\n    }\n    const result = await db.select().from(products).where(eq(products.sku, sku)).limit(1);\n    return result[0];\n  }\n\n  async createProduct(product: InsertProduct): Promise<Product> {\n    const result = await db.insert(products).values(product).returning();\n    return result[0];\n  }\n\n  async updateProduct(sku: string, product: Partial<InsertProduct>, userId?: string): Promise<Product | undefined> {\n    if (userId) {\n      const result = await db.update(products).set({\n        ...product,\n        updatedAt: new Date()\n      }).where(and(eq(products.sku, sku), eq(products.userId, userId))).returning();\n      return result[0];\n    }\n    const result = await db.update(products).set({\n      ...product,\n      updatedAt: new Date()\n    }).where(eq(products.sku, sku)).returning();\n    return result[0];\n  }\n\n  async bulkCreateProducts(productList: InsertProduct[]): Promise<Product[]> {\n    if (productList.length === 0) return [];\n    \n    try {\n      // Use ON CONFLICT to handle duplicates gracefully\n      return await db\n        .insert(products)\n        .values(productList)\n        .onConflictDoNothing()\n        .returning();\n    } catch (error) {\n      console.error('Error during bulk product creation:', error);\n      throw new Error(`Failed to create products: ${error}`);\n    }\n  }\n\n  async bulkUpsertProducts(productList: InsertProduct[]): Promise<Product[]> {\n    if (productList.length === 0) return [];\n    \n    try {\n      // Use ON CONFLICT to handle duplicates with upsert logic (for unique products per user)\n      return await db\n        .insert(products)\n        .values(productList)\n        .onConflictDoUpdate({\n          target: [products.userId, products.sku], // Use the new unique constraint\n          set: {\n            title: sql.raw('excluded.title'),\n            costPrice: sql.raw('excluded.cost_price'),\n            packagingCost: sql.raw('excluded.packaging_cost'),\n            finalPrice: sql.raw('excluded.final_price'),\n            gstPercent: sql.raw('excluded.gst_percent'),\n            totalOrders: sql.raw('excluded.total_orders'),\n            updatedAt: sql.raw('excluded.updated_at')\n          }\n        })\n        .returning();\n    } catch (error) {\n      console.error('Error during bulk product upsert:', error);\n      throw new Error(`Failed to upsert products: ${error}`);\n    }\n  }\n\n  async updateProductGst(sku: string, gstPercent: number, productName?: string, userId?: string): Promise<Product | undefined> {\n    try {\n      const updateData: any = { \n        gstPercent: gstPercent.toString(),\n        updatedAt: new Date()\n      };\n      \n      // Update product name if provided\n      if (productName) {\n        updateData.title = productName;\n      }\n      \n      // Build where condition based on userId\n      const whereCondition = userId ? and(eq(products.sku, sku), eq(products.userId, userId)) : eq(products.sku, sku);\n      \n      // First try exact match\n      let result = await db\n        .update(products)\n        .set(updateData)\n        .where(whereCondition)\n        .returning();\n      \n      // If no exact match and no userId filter, try flexible matching\n      if (result.length === 0 && !userId) {\n        // Try case-insensitive match\n        result = await db\n          .update(products)\n          .set(updateData)\n          .where(sql`LOWER(${products.sku}) = LOWER(${sku})`)\n          .returning();\n        \n        // If still no match, try normalized matching (remove special chars, spaces)\n        if (result.length === 0) {\n          const normalizedInputSku = sku.toLowerCase().replace(/[^a-z0-9]/g, '');\n          \n          const allProducts = await db.select().from(products);\n          for (const product of allProducts) {\n            const normalizedProductSku = product.sku.toLowerCase().replace(/[^a-z0-9]/g, '');\n            if (normalizedProductSku === normalizedInputSku) {\n              result = await db\n                .update(products)\n                .set(updateData)\n                .where(eq(products.sku, product.sku))\n                .returning();\n              break;\n            }\n          }\n        }\n      }\n      \n      return result[0];\n    } catch (error) {\n      console.error(`Error updating GST for product ${sku}:`, error);\n      throw error;\n    }\n  }\n\n  async getAllOrders(filters: OrderFilters = {}): Promise<any[]> {\n    // Join orders with payments and products to get complete merged data\n    let query = db\n      .select({\n        // Order fields\n        id: orders.id,\n        subOrderNo: orders.subOrderNo,\n        orderDate: orders.orderDate,\n        customerState: orders.customerState,\n        productName: orders.productName,\n        sku: orders.sku,\n        size: orders.size,\n        quantity: orders.quantity,\n        listedPrice: orders.listedPrice,\n        discountedPrice: orders.discountedPrice,\n        packetId: orders.packetId,\n        reasonForCredit: orders.reasonForCredit,\n        paymentStatus: orders.paymentStatus, // Direct payment status from orders table\n        paymentDate: sql<Date>`COALESCE(${orders.paymentDate}, ${payments.settlementDate})`, // Prefer orders.paymentDate, fallback to payments.settlementDate\n        createdAt: orders.createdAt,\n        // Payment fields from payments table\n        settlementDate: payments.settlementDate,\n        settlementAmount: payments.settlementAmount,\n        orderValue: payments.orderValue,\n        commissionFee: payments.commissionFee,\n        fixedFee: payments.fixedFee,\n        paymentGatewayFee: payments.paymentGatewayFee,\n        adsFee: payments.adsFee,\n        hasPayment: sql<boolean>`${payments.id} IS NOT NULL`,\n        // Product fields\n        costPrice: sql<string>`COALESCE(${products.costPrice}, 0)`,\n        packagingCost: sql<string>`COALESCE(${products.packagingCost}, 0)`,\n        finalPrice: sql<string>`COALESCE(${products.finalPrice}, 0)`,\n        gstPercent: products.gstPercent,\n      })\n      .from(orders)\n      .leftJoin(payments, eq(orders.subOrderNo, payments.subOrderNo))\n      .leftJoin(products, eq(orders.sku, products.sku));\n\n    const conditions = [];\n\n    if (filters.subOrderNo) {\n      conditions.push(like(orders.subOrderNo, `%${filters.subOrderNo}%`));\n    }\n    if (filters.status && filters.status !== 'all') {\n      conditions.push(eq(orders.reasonForCredit, filters.status));\n    }\n    if (filters.paymentStatus && filters.paymentStatus !== 'all') {\n      if (filters.paymentStatus === 'paid') {\n        conditions.push(sql`${payments.id} IS NOT NULL`);\n      } else if (filters.paymentStatus === 'pending') {\n        conditions.push(sql`${payments.id} IS NULL`);\n      }\n    }\n    if (filters.dateFrom) {\n      conditions.push(gte(orders.orderDate, filters.dateFrom));\n    }\n    if (filters.dateTo) {\n      conditions.push(lte(orders.orderDate, filters.dateTo));\n    }\n\n    if (conditions.length > 0) {\n      query = query.where(and(...conditions)) as any;\n    }\n\n    return (query as any).orderBy(desc(orders.orderDate));\n  }\n\n  async getOrderBySubOrderNo(subOrderNo: string): Promise<Order | undefined> {\n    const result = await db.select().from(orders).where(eq(orders.subOrderNo, subOrderNo)).limit(1);\n    return result[0];\n  }\n\n  async createOrder(order: InsertOrder): Promise<Order> {\n    const result = await db.insert(orders).values(order).returning();\n    return result[0];\n  }\n\n  async bulkCreateOrders(orderList: InsertOrder[]): Promise<Order[]> {\n    if (orderList.length === 0) return [];\n    \n    try {\n      // Use ON CONFLICT to handle duplicates gracefully\n      return await db\n        .insert(orders)\n        .values(orderList)\n        .onConflictDoNothing()\n        .returning();\n    } catch (error) {\n      console.error('Error during bulk order creation:', error);\n      throw new Error(`Failed to create orders: ${error}`);\n    }\n  }\n\n  async bulkUpsertOrders(orderList: InsertOrder[]): Promise<Order[]> {\n    if (orderList.length === 0) return [];\n    \n    try {\n      // Use ON CONFLICT to handle duplicates with upsert logic\n      return await db\n        .insert(orders)\n        .values(orderList)\n        .onConflictDoUpdate({\n          target: orders.subOrderNo,\n          set: {\n            paymentStatus: sql.raw('excluded.payment_status'),\n            paymentDate: sql.raw('excluded.payment_date'),\n            reasonForCredit: sql.raw('excluded.reason_for_credit')\n          }\n        })\n        .returning();\n    } catch (error) {\n      console.error('Error during bulk order upsert:', error);\n      throw new Error(`Failed to upsert orders: ${error}`);\n    }\n  }\n\n  async updateOrderWithPaymentData(subOrderNo: string, paymentData: { paymentDate: Date; paymentStatus: string }): Promise<Order | undefined> {\n    try {\n      const result = await db\n        .update(orders)\n        .set({\n          paymentDate: paymentData.paymentDate,\n          paymentStatus: paymentData.paymentStatus,\n        })\n        .where(eq(orders.subOrderNo, subOrderNo))\n        .returning();\n      return result[0];\n    } catch (error) {\n      console.error(`Error updating order ${subOrderNo} with payment data:`, error);\n      throw error;\n    }\n  }\n\n  async batchUpdateOrdersWithPaymentData(paymentDataList: Array<{ subOrderNo: string; paymentDate: Date; paymentStatus: string }>): Promise<void> {\n    if (paymentDataList.length === 0) return;\n    \n    try {\n      // Use a batch update for better performance\n      const promises = paymentDataList.map(paymentData => \n        this.updateOrderWithPaymentData(paymentData.subOrderNo, {\n          paymentDate: paymentData.paymentDate,\n          paymentStatus: paymentData.paymentStatus\n        })\n      );\n      \n      await Promise.allSettled(promises);\n      console.log(`Batch updated ${paymentDataList.length} orders with payment data`);\n    } catch (error) {\n      console.error('Error in batchUpdateOrdersWithPaymentData:', error);\n      throw error;\n    }\n  }\n\n  async updateOrderStatus(subOrderNo: string, orderStatus: string): Promise<Order | undefined> {\n    try {\n      const result = await db\n        .update(orders)\n        .set({\n          reasonForCredit: orderStatus, // Store order status in reasonForCredit field\n        })\n        .where(eq(orders.subOrderNo, subOrderNo))\n        .returning();\n      return result[0];\n    } catch (error) {\n      console.error(`Error updating order status for ${subOrderNo}:`, error);\n      throw error;\n    }\n  }\n\n  async getAllPayments(): Promise<Payment[]> {\n    return db.select().from(payments).orderBy(desc(payments.createdAt));\n  }\n\n  async getPaymentsBySubOrderNo(subOrderNo: string): Promise<Payment[]> {\n    return db.select().from(payments).where(eq(payments.subOrderNo, subOrderNo));\n  }\n\n  async createPayment(payment: InsertPayment): Promise<Payment> {\n    const normalizedPayment = this.normalizePayment(payment);\n    const result = await db.insert(payments).values(normalizedPayment).returning();\n    return result[0];\n  }\n\n  async bulkCreatePayments(paymentList: InsertPayment[]): Promise<Payment[]> {\n    if (paymentList.length === 0) return [];\n    \n    try {\n      // Normalize all payments before insertion to prevent numeric field errors\n      const normalizedPayments = paymentList.map(payment => this.normalizePayment(payment));\n      \n      // Use ON CONFLICT with specific target to handle duplicates gracefully\n      return await db\n        .insert(payments)\n        .values(normalizedPayments)\n        .onConflictDoNothing({ target: [payments.subOrderNo, payments.settlementDate] })\n        .returning();\n    } catch (error) {\n      console.error('Error during bulk payment creation:', error);\n      throw new Error(`Failed to create payments: ${error}`);\n    }\n  }\n\n  async getAllReconciliations(status?: string): Promise<Reconciliation[]> {\n    let query = db.select().from(reconciliations);\n    if (status) {\n      query = query.where(eq(reconciliations.status, status)) as any;\n    }\n    return (query as any).orderBy(desc(reconciliations.createdAt));\n  }\n\n  async getReconciliationBySubOrderNo(subOrderNo: string): Promise<Reconciliation | undefined> {\n    const result = await db.select().from(reconciliations).where(eq(reconciliations.subOrderNo, subOrderNo)).limit(1);\n    return result[0];\n  }\n\n  async createReconciliation(reconciliation: InsertReconciliation): Promise<Reconciliation> {\n    const result = await db.insert(reconciliations).values(reconciliation).returning();\n    return result[0];\n  }\n\n  async bulkCreateReconciliations(reconciliationList: InsertReconciliation[]): Promise<Reconciliation[]> {\n    if (reconciliationList.length === 0) return [];\n    return db.insert(reconciliations).values(reconciliationList).returning();\n  }\n\n  async getReconciliationSummary(): Promise<ReconciliationSummary> {\n    const results = await db\n      .select({\n        status: reconciliations.status,\n        count: count(),\n      })\n      .from(reconciliations)\n      .groupBy(reconciliations.status);\n\n    const summary = {\n      reconciled: 0,\n      mismatch: 0,\n      unreconciled: 0,\n      successRate: 0\n    };\n\n    results.forEach(result => {\n      switch (result.status) {\n        case 'reconciled':\n          summary.reconciled = result.count;\n          break;\n        case 'mismatch':\n          summary.mismatch = result.count;\n          break;\n        case 'unreconciled':\n          summary.unreconciled = result.count;\n          break;\n      }\n    });\n\n    const total = summary.reconciled + summary.mismatch + summary.unreconciled;\n    summary.successRate = total > 0 ? (summary.reconciled / total) * 100 : 0;\n\n    return summary;\n  }\n\n  async getAllUploads(): Promise<Upload[]> {\n    return db.select().from(uploads).orderBy(desc(uploads.createdAt));\n  }\n\n  async createUpload(upload: InsertUpload): Promise<Upload> {\n    const result = await db.insert(uploads).values(upload).returning();\n    return result[0];\n  }\n\n  async updateUploadStatus(id: string, status: string, recordsProcessed?: number, errors?: any): Promise<Upload | undefined> {\n    const result = await db.update(uploads).set({\n      status,\n      recordsProcessed,\n      errors\n    }).where(eq(uploads.id, id)).returning();\n    return result[0];\n  }\n\n  async getDashboardSummary(): Promise<DashboardSummary> {\n    // Get order analytics\n    const [orderStats] = await db\n      .select({\n        totalOrders: count(orders.id),\n        totalRevenue: sum(orders.discountedPrice),\n        avgOrderValue: sql<number>`avg(${orders.discountedPrice})`,\n      })\n      .from(orders);\n\n    // Get payment analytics\n    const [paymentStats] = await db\n      .select({\n        totalSettlements: count(payments.id),\n        totalSettlementAmount: sum(payments.settlementAmount),\n        totalCommissionFees: sum(payments.commissionFee),\n        totalGatewayFees: sum(payments.paymentGatewayFee),\n      })\n      .from(payments);\n\n    // Calculate metrics\n    const totalOrders = orderStats?.totalOrders || 0;\n    const totalRevenue = Number(orderStats?.totalRevenue || 0);\n    const totalSettlements = paymentStats?.totalSettlements || 0;\n    const totalSettlementAmount = Number(paymentStats?.totalSettlementAmount || 0);\n    const totalFees = Number(paymentStats?.totalCommissionFees || 0) + Number(paymentStats?.totalGatewayFees || 0);\n    \n    // Calculate net profit (settlements - fees)\n    const netProfit = totalSettlementAmount - totalFees;\n    \n    // Calculate success rate (orders with settlements)\n    const successRate = totalOrders > 0 ? (totalSettlements / totalOrders) * 100 : 0;\n\n    // Calculate growth rates (compare with data from 30 days ago)\n    const thirtyDaysAgo = new Date();\n    thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\n\n    const [oldOrderStats] = await db\n      .select({\n        oldTotalOrders: count(orders.id),\n        oldTotalRevenue: sum(orders.discountedPrice),\n      })\n      .from(orders)\n      .where(lte(orders.orderDate, thirtyDaysAgo));\n\n    const oldTotalOrders = oldOrderStats?.oldTotalOrders || 0;\n    const oldTotalRevenue = Number(oldOrderStats?.oldTotalRevenue || 0);\n\n    const revenueGrowth = oldTotalRevenue > 0 ? ((totalRevenue - oldTotalRevenue) / oldTotalRevenue) * 100 : 0;\n    const ordersGrowth = oldTotalOrders > 0 ? ((totalOrders - oldTotalOrders) / oldTotalOrders) * 100 : 0;\n\n    return {\n      totalRevenue,\n      netProfit,\n      totalOrders,\n      successRate,\n      revenueGrowth,\n      profitGrowth: revenueGrowth * 0.7, // Estimate profit growth as 70% of revenue growth\n      ordersGrowth,\n      successRateGrowth: Math.max(-10, Math.min(10, ordersGrowth * 0.1)), // Conservative success rate growth\n    };\n  }\n\n  async getRevenueTrend(): Promise<RevenueTrendData[]> {\n    // Get monthly revenue and profit data for the last 12 months from dynamic data (uploaded files)\n    const monthlyData = await db\n      .select({\n        month: sql<string>`TO_CHAR(CAST(${ordersDynamic.dynamicData}->>'Order Date' AS DATE), 'Mon')`,\n        monthNum: sql<number>`EXTRACT(MONTH FROM CAST(${ordersDynamic.dynamicData}->>'Order Date' AS DATE))`,\n        yearNum: sql<number>`EXTRACT(YEAR FROM CAST(${ordersDynamic.dynamicData}->>'Order Date' AS DATE))`,\n        revenue: sql<number>`SUM(CAST(${ordersDynamic.dynamicData}->>'Supplier Discounted Price (Incl GST and Commision)' AS DECIMAL))`,\n        totalOrders: count(ordersDynamic.id)\n      })\n      .from(ordersDynamic)\n      .where(sql`${ordersDynamic.uploadId} IN (SELECT id FROM uploads WHERE is_current_version = true) \n                 AND CAST(${ordersDynamic.dynamicData}->>'Order Date' AS DATE) >= CURRENT_DATE - INTERVAL '12 months'`)\n      .groupBy(sql`EXTRACT(MONTH FROM CAST(${ordersDynamic.dynamicData}->>'Order Date' AS DATE))`, \n               sql`EXTRACT(YEAR FROM CAST(${ordersDynamic.dynamicData}->>'Order Date' AS DATE))`, \n               sql`TO_CHAR(CAST(${ordersDynamic.dynamicData}->>'Order Date' AS DATE), 'Mon')`)\n      .orderBy(sql`EXTRACT(YEAR FROM CAST(${ordersDynamic.dynamicData}->>'Order Date' AS DATE))`, \n               sql`EXTRACT(MONTH FROM CAST(${ordersDynamic.dynamicData}->>'Order Date' AS DATE))`);\n\n    // Get corresponding payment data for profit calculation - only from current upload orders\n    const monthlyPayments = await db\n      .select({\n        monthNum: sql<number>`EXTRACT(MONTH FROM ${payments.settlementDate})`,\n        yearNum: sql<number>`EXTRACT(YEAR FROM ${payments.settlementDate})`,\n        settlements: sum(payments.settlementAmount),\n        fees: sql<number>`SUM(COALESCE(${payments.commissionFee}, 0) + COALESCE(${payments.paymentGatewayFee}, 0))`\n      })\n      .from(payments)\n      .where(sql`${payments.settlementDate} >= CURRENT_DATE - INTERVAL '12 months' \n                 AND ${payments.subOrderNo} IN (\n                   SELECT DISTINCT ${ordersDynamic.dynamicData}->>'subOrderNo' \n                   FROM ${ordersDynamic} \n                   WHERE ${ordersDynamic.uploadId} IN (SELECT id FROM uploads WHERE is_current_version = true)\n                 )`)\n      .groupBy(sql`EXTRACT(MONTH FROM ${payments.settlementDate})`, sql`EXTRACT(YEAR FROM ${payments.settlementDate})`);\n\n    // Combine data to calculate profit\n    return monthlyData.map(monthData => {\n      const payment = monthlyPayments.find(p => \n        p.monthNum === monthData.monthNum && p.yearNum === monthData.yearNum\n      );\n      const settlements = Number(payment?.settlements || 0);\n      const fees = Number(payment?.fees || 0);\n      const profit = settlements - fees;\n\n      return {\n        month: monthData.month,\n        revenue: Number(monthData.revenue || 0),\n        profit: Math.max(0, profit) // Ensure profit is not negative for display\n      };\n    });\n  }\n\n  async getOrderStatusDistribution(): Promise<OrderStatusData[]> {\n    // Get order status distribution from dynamic data (uploaded files)\n    const statusData = await db\n      .select({\n        status: sql<string>`${ordersDynamic.dynamicData}->>'Reason for Credit Entry'`,\n        count: count(ordersDynamic.id)\n      })\n      .from(ordersDynamic)\n      .where(sql`${ordersDynamic.uploadId} IN (SELECT id FROM uploads WHERE is_current_version = true)`)\n      .groupBy(sql`${ordersDynamic.dynamicData}->>'Reason for Credit Entry'`);\n\n     const statusMapping: Record<string, { name: string; color: string }> = {\n      'DELIVERED': { name: 'Delivered', color: 'hsl(147 78% 42%)' },\n      'SHIPPED': { name: 'Shipped', color: 'hsl(217 91% 60%)' },\n      'READY_TO_SHIP': { name: 'Ready to Ship', color: 'hsl(204 100% 40%)' },\n      'CANCELLED': { name: 'Cancelled', color: 'hsl(45 93% 47%)' },\n      'RTO_COMPLETE': { name: 'RTO Complete', color: 'hsl(0 84% 60%)' },\n      'RTO_LOCKED': { name: 'RTO Locked', color: 'hsl(12 76% 61%)' },\n      'PENDING': { name: 'Pending', color: 'hsl(250 100% 60%)' }\n    };\n\n    return statusData.map(item => {\n      const statusValue = item.status || 'Unknown';\n      const mapping = statusMapping[statusValue];\n      \n      return {\n        name: mapping?.name || statusValue,\n        value: item.count,\n        color: mapping?.color || 'hsl(215 28% 52%)'\n      };\n    });\n  }\n\n  async getComprehensiveFinancialSummary(): Promise<ComprehensiveFinancialSummary> {\n    // Get order analytics from dynamic data (uploaded files) - use current version uploads only\n    const [orderStats] = await db\n      .select({\n        totalOrders: count(ordersDynamic.id),\n        totalSaleAmount: sql<number>`SUM(CAST(${ordersDynamic.dynamicData}->>'Supplier Discounted Price (Incl GST and Commision)' AS DECIMAL))`,\n        avgOrderValue: sql<number>`AVG(CAST(${ordersDynamic.dynamicData}->>'Supplier Discounted Price (Incl GST and Commision)' AS DECIMAL))`,\n        delivered: sql<number>`count(case when UPPER(${ordersDynamic.dynamicData}->>'Reason for Credit Entry') = 'DELIVERED' then 1 end)`,\n        shipped: sql<number>`count(case when UPPER(${ordersDynamic.dynamicData}->>'Reason for Credit Entry') IN ('SHIPPED', 'READY_TO_SHIP') then 1 end)`,\n        exchanged: sql<number>`count(case when UPPER(${ordersDynamic.dynamicData}->>'Reason for Credit Entry') IN ('EXCHANGE', 'EXCHANGED') then 1 end)`,\n        cancelled: sql<number>`count(case when UPPER(${ordersDynamic.dynamicData}->>'Reason for Credit Entry') IN ('CANCELLED', 'CANCELED') then 1 end)`,\n        returns: sql<number>`count(case when UPPER(${ordersDynamic.dynamicData}->>'Reason for Credit Entry') IN ('RETURN', 'RETURNED', 'REFUND', 'RTO', 'RTO_COMPLETE') then 1 end)`,\n      })\n      .from(ordersDynamic)\n      .where(sql`${ordersDynamic.uploadId} IN (SELECT id FROM uploads WHERE is_current_version = true)`);\n\n    // Get payment settlement data - only from payments linked to current upload orders\n    const [paymentStats] = await db\n      .select({\n        settlementAmount: sum(payments.settlementAmount),\n        totalCommissionFees: sum(payments.commissionFee),\n        totalGatewayFees: sum(payments.paymentGatewayFee),\n        totalFixedFees: sum(payments.fixedFee),\n        totalAdsFees: sum(payments.adsFee),\n      })\n      .from(payments)\n      .where(sql`${payments.subOrderNo} IN (\n        SELECT DISTINCT ${ordersDynamic.dynamicData}->>'Sub Order No' \n        FROM ${ordersDynamic} \n        WHERE ${ordersDynamic.uploadId} IN (SELECT id FROM uploads WHERE is_current_version = true)\n      )`);\n\n    // Get product cost data from dynamic tables (uploaded file data)\n    const [productCosts] = await db\n      .select({\n        totalPurchaseCost: sql<number>`\n          SUM(\n            CAST(${ordersDynamic.dynamicData}->>'quantity' AS INTEGER) * \n            CAST(COALESCE(${productsDynamic.dynamicData}->>'costPrice', '0') AS DECIMAL)\n          )\n        `,\n        totalPackagingCost: sql<number>`\n          SUM(\n            CAST(${ordersDynamic.dynamicData}->>'quantity' AS INTEGER) * \n            CAST(COALESCE(${productsDynamic.dynamicData}->>'packagingCost', '0') AS DECIMAL)\n          )\n        `,\n      })\n      .from(ordersDynamic)\n      .leftJoin(productsDynamic, sql`${ordersDynamic.dynamicData}->>'SKU' = ${productsDynamic.sku} \n                                     AND ${productsDynamic.uploadId} IN (SELECT id FROM uploads WHERE is_current_version = true AND file_type LIKE '%orders%')`)\n      .where(sql`${ordersDynamic.uploadId} IN (SELECT id FROM uploads WHERE is_current_version = true)`);\n\n    // Calculate metrics\n    const totalOrders = orderStats?.totalOrders || 0;\n    const totalSaleAmount = Number(orderStats?.totalSaleAmount || 0);\n    const avgOrderValue = Number(orderStats?.avgOrderValue || 0);\n    const delivered = orderStats?.delivered || 0;\n    const shipped = orderStats?.shipped || 0;\n    const exchanged = orderStats?.exchanged || 0;\n    const cancelled = orderStats?.cancelled || 0;\n    const returns = orderStats?.returns || 0;\n\n    const settlementAmount = Number(paymentStats?.settlementAmount || 0);\n    const totalPurchaseCost = Number(productCosts?.totalPurchaseCost || 0);\n    const totalPackagingCost = Number(productCosts?.totalPackagingCost || 0);\n\n    // Calculate derived metrics with better accuracy\n    const totalCommissionFees = Number(paymentStats?.totalCommissionFees || 0);\n    const totalGatewayFees = Number(paymentStats?.totalGatewayFees || 0);\n    const totalFixedFees = Number(paymentStats?.totalFixedFees || 0);\n    const totalAdsFees = Number(paymentStats?.totalAdsFees || 0);\n    \n    // Calculate actual shipping cost from orders (if available in data)\n    const shippingCost = totalOrders * 49; // Standard shipping rate\n    const totalTds = settlementAmount * 0.01; // 1% TDS on settlement\n    const returnRate = totalOrders > 0 ? ((returns / totalOrders) * 100) : 0;\n    \n    // Calculate comprehensive net profit\n    const totalFees = totalCommissionFees + totalGatewayFees + totalFixedFees + totalAdsFees;\n    const netProfit = settlementAmount - (totalPurchaseCost + totalPackagingCost + shippingCost + totalTds + totalFees);\n\n    // Orders awaiting payment record (orders without corresponding payments) - use dynamic data\n    const [ordersWithoutPayments] = await db\n      .select({\n        count: count(ordersDynamic.id)\n      })\n      .from(ordersDynamic)\n      .leftJoin(payments, sql`${ordersDynamic.dynamicData}->>'subOrderNo' = ${payments.subOrderNo}`)\n      .where(sql`${payments.id} IS NULL AND ${ordersDynamic.uploadId} IN (SELECT id FROM uploads WHERE is_current_version = true)`);\n\n    return {\n      totalSaleAmount,\n      settlementAmount,\n      totalPurchaseCost,\n      totalPackagingCost,\n      shippingCost,\n      totalTds,\n      netProfit,\n      totalOrders,\n      delivered,\n      shipped,\n      exchanged,\n      cancelled,\n      returns,\n      avgOrderValue,\n      returnRate,\n      ordersAwaitingPaymentRecord: ordersWithoutPayments?.count || 0,\n    };\n  }\n\n  async getSettlementComponents(): Promise<SettlementComponentsData[]> {\n    const [paymentStats] = await db\n      .select({\n        saleAmount: sql<number>`sum(${payments.orderValue})`,\n        saleReturnAmount: sql<number>`sum(case when ${payments.orderValue} < 0 then ${payments.orderValue} else 0 end)`,\n        shippingCharges: sql<number>`count(*) * 49`, // More accurate per payment count\n        returnCharges: sql<number>`sum(case when ${payments.orderValue} < 0 then 49 else 0 end)`,\n        platformFees: sum(payments.commissionFee),\n        paymentGatewayFees: sum(payments.paymentGatewayFee),\n        fixedFees: sum(payments.fixedFee),\n        adsFees: sum(payments.adsFee),\n        adjustments: sql<number>`sum(COALESCE(${payments.fixedFee}, 0))`,\n        tcs: sql<number>`sum(${payments.orderValue} * 0.01)`,\n        tds: sql<number>`sum(${payments.settlementAmount} * 0.01)`,\n        finalSettlement: sum(payments.settlementAmount),\n      })\n      .from(payments);\n\n    return [\n      { component: 'Sale Amount', totalAmount: Number(paymentStats?.saleAmount || 0) },\n      { component: 'Sale Return Amount', totalAmount: Number(paymentStats?.saleReturnAmount || 0) },\n      { component: 'Shipping Charges', totalAmount: Number(paymentStats?.shippingCharges || 0) },\n      { component: 'Return Charges', totalAmount: Number(paymentStats?.returnCharges || 0) },\n      { component: 'Platform Fees', totalAmount: Number(paymentStats?.platformFees || 0) },\n      { component: 'Payment Gateway Fees', totalAmount: Number(paymentStats?.paymentGatewayFees || 0) },\n      { component: 'Fixed Fees', totalAmount: Number(paymentStats?.fixedFees || 0) },\n      { component: 'Ads Fees', totalAmount: Number(paymentStats?.adsFees || 0) },\n      { component: 'Adjustments (Claims, Recovery, Compensation, GST Comp.)', totalAmount: Number(paymentStats?.adjustments || 0) },\n      { component: 'TCS', totalAmount: Number(paymentStats?.tcs || 0) },\n      { component: 'TDS', totalAmount: Number(paymentStats?.tds || 0) },\n      { component: 'Final Settlement', totalAmount: Number(paymentStats?.finalSettlement || 0) },\n    ];\n  }\n\n  async getEarningsOverview(): Promise<EarningsOverviewData[]> {\n    // Get actual product costs from orders joined with products\n    const [actualCosts] = await db\n      .select({\n        actualProductCost: sql<number>`sum(${products.costPrice} * ${orders.quantity})`,\n        actualPackagingCost: sql<number>`sum(${products.packagingCost} * ${orders.quantity})`,\n      })\n      .from(orders)\n      .leftJoin(products, eq(orders.sku, products.sku));\n\n    const [earningsData] = await db\n      .select({\n        finalSettlement: sum(payments.settlementAmount),\n        marketingCost: sum(payments.adsFee),\n        commissionFees: sum(payments.commissionFee),\n        gatewayFees: sum(payments.paymentGatewayFee),\n        fixedFees: sum(payments.fixedFee),\n      })\n      .from(payments);\n\n    const finalSettlement = Number(earningsData?.finalSettlement || 0);\n    const marketingCost = Number(earningsData?.marketingCost || 0);\n    const productCost = Number(actualCosts?.actualProductCost || 0);\n    const packagingCost = Number(actualCosts?.actualPackagingCost || 0);\n    const commissionFees = Number(earningsData?.commissionFees || 0);\n    const gatewayFees = Number(earningsData?.gatewayFees || 0);\n    const fixedFees = Number(earningsData?.fixedFees || 0);\n    \n    // Calculate accurate net profit\n    const totalCosts = marketingCost + productCost + packagingCost + commissionFees + gatewayFees + fixedFees;\n    const netProfit = finalSettlement - totalCosts;\n\n    return [\n      { description: 'Final Settlement (Meesho Payout)', amount: finalSettlement },\n      { description: 'Marketing Cost', amount: -marketingCost },\n      { description: 'Product Cost', amount: -productCost },\n      { description: 'Packaging Cost', amount: -packagingCost },\n      { description: 'Commission Fees', amount: -commissionFees },\n      { description: 'Payment Gateway Fees', amount: -gatewayFees },\n      { description: 'Fixed Fees', amount: -fixedFees },\n      { description: 'Net Profit', amount: netProfit },\n    ];\n  }\n\n  async getOperationalCosts(): Promise<OperationalCostsData[]> {\n    const [costsData] = await db\n      .select({\n        adsFee: sum(payments.adsFee),\n        fixedFee: sum(payments.fixedFee),\n        totalClaims: sql<number>`sum(case when ${payments.fixedFee} > 0 then ${payments.fixedFee} else 0 end)`,\n      })\n      .from(payments);\n\n    return [\n      { type: 'Affiliate Fees', amount: Number(costsData?.adsFee || 0) },\n      { type: 'Fixed Fee', amount: Number(costsData?.fixedFee || 0) },\n      { type: 'Meesho Commission', amount: Number(costsData?.adsFee || 0) * 0.15 },\n      { type: 'Warehousing Fee', amount: Number(costsData?.fixedFee || 0) * 0.5 },\n      { type: 'Total Claims', amount: Number(costsData?.totalClaims || 0) },\n    ];\n  }\n\n  async getDailyVolumeAndAOV(): Promise<DailyVolumeData[]> {\n    const dailyData = await db\n      .select({\n        date: sql<string>`DATE(CAST(${ordersDynamic.dynamicData}->>'Order Date' AS DATE))`,\n        orderVolume: count(ordersDynamic.id),\n        totalRevenue: sql<number>`SUM(CAST(${ordersDynamic.dynamicData}->>'Supplier Discounted Price (Incl GST and Commision)' AS DECIMAL))`,\n      })\n      .from(ordersDynamic)\n      .where(sql`${ordersDynamic.uploadId} IN (SELECT id FROM uploads WHERE is_current_version = true) \n                 AND CAST(${ordersDynamic.dynamicData}->>'Order Date' AS DATE) >= CURRENT_DATE - INTERVAL '30 days'`)\n      .groupBy(sql`DATE(CAST(${ordersDynamic.dynamicData}->>'Order Date' AS DATE))`)\n      .orderBy(sql`DATE(CAST(${ordersDynamic.dynamicData}->>'Order Date' AS DATE))`);\n\n    return dailyData.map(day => ({\n      date: day.date,\n      orderVolume: day.orderVolume,\n      aov: day.orderVolume > 0 ? Number(day.totalRevenue || 0) / day.orderVolume : 0,\n    }));\n  }\n\n  async getTopPerformingProducts(): Promise<TopProductsData[]> {\n    const topProducts = await db\n      .select({\n        sku: sql<string>`${ordersDynamic.dynamicData}->>'SKU'`,\n        name: sql<string>`${ordersDynamic.dynamicData}->>'Product Name'`,\n        orders: count(ordersDynamic.id),\n        totalSales: sql<number>`SUM(CAST(${ordersDynamic.dynamicData}->>'Supplier Discounted Price (Incl GST and Commision)' AS DECIMAL) * CAST(${ordersDynamic.dynamicData}->>'Quantity' AS INTEGER))`,\n        totalQuantity: sql<number>`SUM(CAST(${ordersDynamic.dynamicData}->>'Quantity' AS INTEGER))`,\n      })\n      .from(ordersDynamic)\n      .where(sql`${ordersDynamic.uploadId} IN (SELECT id FROM uploads WHERE is_current_version = true)`)\n      .groupBy(sql`${ordersDynamic.dynamicData}->>'SKU'`, sql`${ordersDynamic.dynamicData}->>'Product Name'`)\n      .orderBy(desc(sql<number>`SUM(CAST(${ordersDynamic.dynamicData}->>'Supplier Discounted Price (Incl GST and Commision)' AS DECIMAL) * CAST(${ordersDynamic.dynamicData}->>'Quantity' AS INTEGER))`))\n      .limit(10);\n\n    return topProducts.map(product => ({\n      sku: product.sku,\n      name: product.name,\n      orders: product.orders,\n      revenue: Number(product.totalSales || 0),\n      totalQuantity: Number(product.totalQuantity || 0),\n    }));\n  }\n\n  async getTopReturnProducts(): Promise<TopReturnsData[]> {\n    const topReturns = await db\n      .select({\n        sku: sql<string>`${ordersDynamic.dynamicData}->>'SKU'`,\n        name: sql<string>`${ordersDynamic.dynamicData}->>'Product Name'`,\n        returns: sql<number>`count(case when UPPER(${ordersDynamic.dynamicData}->>'Reason for Credit Entry') IN ('RETURN', 'RETURNED', 'REFUND') then 1 end)`,\n        rtoCount: sql<number>`count(case when UPPER(${ordersDynamic.dynamicData}->>'Reason for Credit Entry') IN ('RTO', 'RTO_COMPLETE', 'RTO_LOCKED') then 1 end)`,\n        totalCount: count(ordersDynamic.id),\n      })\n      .from(ordersDynamic)\n      .where(sql`${ordersDynamic.uploadId} IN (SELECT id FROM uploads WHERE is_current_version = true)`)\n      .groupBy(sql`${ordersDynamic.dynamicData}->>'SKU'`, sql`${ordersDynamic.dynamicData}->>'Product Name'`)\n      .having(sql`count(case when UPPER(${ordersDynamic.dynamicData}->>'Reason for Credit Entry') IN ('RETURN', 'RETURNED', 'REFUND', 'RTO', 'RTO_COMPLETE', 'RTO_LOCKED') then 1 end) > 0`)\n      .orderBy(sql`count(case when UPPER(${ordersDynamic.dynamicData}->>'Reason for Credit Entry') IN ('RETURN', 'RETURNED', 'REFUND', 'RTO', 'RTO_COMPLETE', 'RTO_LOCKED') then 1 end) DESC`)\n      .limit(10);\n\n    return topReturns.map(product => ({\n      sku: product.sku,\n      name: product.name,\n      returns: product.returns,\n      rtoCount: product.rtoCount,\n      combinedCount: product.returns + product.rtoCount,\n    }));\n  }\n\n  async getOrdersOverview(): Promise<OrdersOverview> {\n    try {\n      // Try to get from cache first\n      const cached = await this.getCalculationCache('orders_overview');\n      if (cached && (Date.now() - new Date(cached.lastUpdated).getTime()) < 10 * 60 * 1000) {\n        return cached.calculationResult as OrdersOverview;\n      }\n\n      // Get payment status for each sub order number (aggregated to handle multiple payments)\n      const paymentStatusMap = new Map<string, boolean>();\n      const paymentData = await db\n        .select({\n          subOrderNo: payments.subOrderNo,\n          hasPayment: sql<boolean>`COUNT(*) > 0 AND SUM(CASE WHEN COALESCE(${payments.settlementAmount}, 0) > 0 THEN 1 ELSE 0 END) > 0`,\n        })\n        .from(payments)\n        .groupBy(payments.subOrderNo);\n\n      paymentData.forEach(payment => {\n        paymentStatusMap.set(payment.subOrderNo, payment.hasPayment);\n      });\n\n      // Get static orders data\n      const staticOrdersData = await db\n        .select({\n          subOrderNo: orders.subOrderNo,\n          reasonForCredit: orders.reasonForCredit,\n          discountedPrice: orders.discountedPrice,\n          listedPrice: orders.listedPrice,\n        })\n        .from(orders);\n\n      // Get dynamic orders data from current uploads\n      const dynamicOrdersData = await db\n        .select({\n          subOrderNo: ordersDynamic.subOrderNo,\n          dynamicData: ordersDynamic.dynamicData,\n        })\n        .from(ordersDynamic)\n        .innerJoin(uploads, and(\n          eq(ordersDynamic.uploadId, uploads.id),\n          eq(uploads.isCurrentVersion, true)\n        ));\n\n      // Helper function to normalize status values for consistent matching\n      const normalizeStatus = (status: string): string => {\n        if (!status) return '';\n        return status.toString().toUpperCase().trim();\n      };\n\n      // Helper function to extract order value from dynamic data with quantity\n      const extractOrderValue = (dynamicData: any): number => {\n        const possiblePriceKeys = [\n          'Supplier Discounted Price (Incl GST and Commision)',\n          'Discounted Price', \n          'discountedPrice',\n          'Listed Price',\n          'listedPrice'\n        ];\n        \n        let unitPrice = 0;\n        for (const key of possiblePriceKeys) {\n          if (dynamicData && dynamicData[key] && !isNaN(Number(dynamicData[key]))) {\n            unitPrice = Number(dynamicData[key]);\n            break;\n          }\n        }\n        \n        // Get quantity and multiply\n        const quantity = Number(dynamicData?.['Quantity'] || dynamicData?.['quantity'] || 1);\n        return unitPrice * quantity;\n      };\n\n      // Explicit status mapping table with precedence rules\n      const STATUS_MAPPINGS: Record<string, string> = {\n        // Delivered statuses\n        'DELIVERED': 'DELIVERED',\n        \n        // Shipped statuses  \n        'SHIPPED': 'SHIPPED',\n        'IN TRANSIT': 'SHIPPED', \n        'OUT FOR DELIVERY': 'SHIPPED',\n        'IN_TRANSIT': 'SHIPPED',\n        'OUT_FOR_DELIVERY': 'SHIPPED',\n        \n        // Ready to ship statuses\n        'READY TO SHIP': 'READY_TO_SHIP',\n        'RTS': 'READY_TO_SHIP',\n        'READY_TO_SHIP': 'READY_TO_SHIP',\n        \n        // Cancelled statuses\n        'CANCELLED': 'CANCELLED',\n        'CANCELED': 'CANCELLED',\n        \n        // RTO statuses (ONLY RTO_COMPLETE and RTO_LOCKED)\n        'RTO_COMPLETE': 'RTO',\n        'RTO_LOCKED': 'RTO',\n        // Explicitly exclude other RTO variants like RTO_OFD\n        \n        // Exchanged statuses\n        'EXCHANGE': 'EXCHANGED',\n        'EXCHANGED': 'EXCHANGED',\n        \n        // Return statuses\n        'RETURN': 'RETURN',\n        'RETURNED': 'RETURN', \n        'REFUND': 'RETURN',\n      };\n\n      // Canonical status resolver with explicit precedence: dynamic over static\n      const resolveOrderStatus = (staticStatus: string, dynamicData: any): string => {\n        // Priority 1: Check dynamic data for \"Reason for Credit Entry\" (most authoritative)\n        if (dynamicData && dynamicData['Reason for Credit Entry']) {\n          const status = normalizeStatus(dynamicData['Reason for Credit Entry']);\n          const mapped = (STATUS_MAPPINGS as any)[status];\n          if (mapped) return mapped;\n        }\n        \n        // Priority 2: Check dynamic data for other status fields\n        const otherStatusKeys = ['Order Status', 'Sub Order Status', 'status', 'Status'];\n        for (const key of otherStatusKeys) {\n          if (dynamicData && dynamicData[key]) {\n            const status = normalizeStatus(dynamicData[key]);\n            const mapped = (STATUS_MAPPINGS as any)[status];\n            if (mapped) return mapped;\n          }\n        }\n        \n        // Priority 3: Fallback to static reasonForCredit\n        if (staticStatus) {\n          const status = normalizeStatus(staticStatus);\n          const mapped = (STATUS_MAPPINGS as any)[status];\n          if (mapped) return mapped;\n        }\n        \n        return 'OTHER';\n      };\n\n      // Initialize metrics\n      let delivered = 0;\n      let shipped = 0; \n      let readyToShip = 0;\n      let cancelled = 0;\n      let rto = 0;\n      let exchanged = 0;\n      let returns = 0;\n      let totalDeliveredValue = 0;\n      let awaitingPaymentOrders = 0;\n\n      // Create consolidated order data map\n      const orderMap = new Map<string, {\n        status: string,\n        orderValue: number,\n        hasPayment: boolean,\n        dynamicData: any\n      }>();\n\n      // Build merged order data with proper deduplication and precedence\n      // Priority: Dynamic data over static, with quantity-adjusted values\n      \n      // First pass: Process static orders\n      for (const order of staticOrdersData) {\n        const orderValue = Number(order.discountedPrice || order.listedPrice || 0);\n        const hasPayment = paymentStatusMap.get(order.subOrderNo) || false;\n        \n        orderMap.set(order.subOrderNo, {\n          status: order.reasonForCredit || '',\n          orderValue,\n          hasPayment,\n          dynamicData: null\n        });\n      }\n\n      // Second pass: Merge dynamic orders (prefer dynamic when available)\n      for (const dynOrder of dynamicOrdersData) {\n        const dynamicData = dynOrder.dynamicData as Record<string, any>;\n        const existing = orderMap.get(dynOrder.subOrderNo);\n        \n        if (existing) {\n          // Update existing with dynamic data (higher priority)\n          existing.dynamicData = dynamicData;\n          const dynamicValue = extractOrderValue(dynamicData);\n          if (dynamicValue > 0) {\n            existing.orderValue = dynamicValue;\n          }\n        } else {\n          // New order from dynamic data only\n          const orderValue = extractOrderValue(dynamicData);\n          const hasPayment = paymentStatusMap.get(dynOrder.subOrderNo) || false;\n          \n          orderMap.set(dynOrder.subOrderNo, {\n            status: '',\n            orderValue,\n            hasPayment,\n            dynamicData\n          });\n        }\n      }\n\n      // Calculate final metrics with proper deduplication\n      for (const [subOrderNo, orderData] of Array.from(orderMap.entries())) {\n        const resolvedStatus = resolveOrderStatus(orderData.status, orderData.dynamicData);\n        \n        switch (resolvedStatus) {\n          case 'DELIVERED':\n            delivered++;\n            totalDeliveredValue += orderData.orderValue;\n            if (!orderData.hasPayment) {\n              awaitingPaymentOrders++;\n            }\n            break;\n          case 'SHIPPED':\n            shipped++;\n            break;\n          case 'READY_TO_SHIP':\n            readyToShip++;\n            break;\n          case 'CANCELLED':\n            cancelled++;\n            break;\n          case 'RTO':\n            rto++; // Only RTO_COMPLETE and RTO_LOCKED count here\n            break;\n          case 'EXCHANGED':\n            exchanged++;\n            totalDeliveredValue += orderData.orderValue; // Include exchanged in AOV\n            break;\n          case 'RETURN':\n            returns++; // Returns counted separately for return rate calculation\n            break;\n        }\n      }\n\n      // Calculate derived metrics\n      const avgOrderValue = delivered > 0 ? totalDeliveredValue / delivered : 0;\n      const returnRate = delivered > 0 ? (returns / delivered) * 100 : 0;\n\n      const result: OrdersOverview = {\n        delivered,\n        shipped,\n        readyToShip,\n        cancelled,\n        rto,\n        exchanged,\n        avgOrderValue: Math.round(avgOrderValue * 100) / 100,\n        returnRate: Math.round(returnRate * 100) / 100,\n        awaitingPaymentOrders,\n        totalOrdersUsedForAOV: delivered,\n      };\n\n      // Cache the result\n      const currentUploads = await db.select().from(uploads).where(eq(uploads.isCurrentVersion, true));\n      await this.setCalculationCache({\n        cacheKey: 'orders_overview',\n        calculationType: 'orders_overview',\n        calculationResult: result,\n        dependsOnUploads: currentUploads.map(u => u.id),\n      });\n\n      return result;\n      \n    } catch (error) {\n      console.error('Error calculating orders overview:', error);\n      throw new Error(`Failed to calculate orders overview: ${error}`);\n    }\n  }\n\n  // Dynamic Products Implementation\n  async getAllProductsDynamic(): Promise<ProductDynamic[]> {\n    return db.select().from(productsDynamic).orderBy(desc(productsDynamic.updatedAt));\n  }\n\n  async getProductDynamicBySku(sku: string): Promise<ProductDynamic | undefined> {\n    const result = await db.select().from(productsDynamic).where(eq(productsDynamic.sku, sku)).limit(1);\n    return result[0];\n  }\n\n  async createProductDynamic(product: InsertProductDynamic): Promise<ProductDynamic> {\n    const result = await db.insert(productsDynamic).values(product).returning();\n    return result[0];\n  }\n\n  async updateProductDynamic(id: string, product: Partial<InsertProductDynamic>): Promise<ProductDynamic | undefined> {\n    const result = await db.update(productsDynamic).set({\n      ...product,\n      updatedAt: new Date(),\n    }).where(eq(productsDynamic.id, id)).returning();\n    return result[0];\n  }\n\n  async bulkCreateProductsDynamic(products: InsertProductDynamic[]): Promise<ProductDynamic[]> {\n    if (products.length === 0) return [];\n    \n    try {\n      return await db\n        .insert(productsDynamic)\n        .values(products)\n        .onConflictDoNothing()\n        .returning();\n    } catch (error) {\n      console.error('Error during bulk product dynamic creation:', error);\n      throw new Error(`Failed to create products: ${error}`);\n    }\n  }\n\n  async replaceAllProductsDynamic(uploadId: string, products: InsertProductDynamic[]): Promise<ProductDynamic[]> {\n    // First, delete all existing products for this upload\n    await db.delete(productsDynamic).where(eq(productsDynamic.uploadId, uploadId));\n    \n    // Then insert the new products\n    if (products.length === 0) return [];\n    return await db.insert(productsDynamic).values(products).returning();\n  }\n\n  async addUniqueProductsDynamic(uploadId: string, products: InsertProductDynamic[]): Promise<ProductDynamic[]> {\n    if (products.length === 0) return [];\n    \n    // Insert only unique products (ignore conflicts based on sku and uploadId combination)\n    try {\n      return await db\n        .insert(productsDynamic)\n        .values(products)\n        .onConflictDoNothing({ target: [productsDynamic.sku, productsDynamic.uploadId] })\n        .returning();\n    } catch (error) {\n      console.error('Error during unique product creation:', error);\n      throw new Error(`Failed to add unique products: ${error}`);\n    }\n  }\n\n  // Dynamic Orders Implementation\n  async getAllOrdersDynamic(): Promise<OrderDynamic[]> {\n    return db.select().from(ordersDynamic).orderBy(desc(ordersDynamic.updatedAt));\n  }\n\n  async getOrderDynamicBySubOrderNo(subOrderNo: string): Promise<OrderDynamic | undefined> {\n    const result = await db.select().from(ordersDynamic).where(eq(ordersDynamic.subOrderNo, subOrderNo)).limit(1);\n    return result[0];\n  }\n\n  async createOrderDynamic(order: InsertOrderDynamic): Promise<OrderDynamic> {\n    const result = await db.insert(ordersDynamic).values(order).returning();\n    return result[0];\n  }\n\n  async updateOrderDynamic(id: string, order: Partial<InsertOrderDynamic>): Promise<OrderDynamic | undefined> {\n    const result = await db.update(ordersDynamic).set({\n      ...order,\n      updatedAt: new Date(),\n    }).where(eq(ordersDynamic.id, id)).returning();\n    return result[0];\n  }\n\n  async bulkCreateOrdersDynamic(orders: InsertOrderDynamic[]): Promise<OrderDynamic[]> {\n    if (orders.length === 0) return [];\n    \n    try {\n      return await db\n        .insert(ordersDynamic)\n        .values(orders)\n        .onConflictDoNothing()\n        .returning();\n    } catch (error) {\n      console.error('Error during bulk order dynamic creation:', error);\n      throw new Error(`Failed to create orders: ${error}`);\n    }\n  }\n\n  async replaceAllOrdersDynamic(uploadId: string, orders: InsertOrderDynamic[]): Promise<OrderDynamic[]> {\n    // For orders, clear ALL existing orders regardless of upload_id to prevent duplicates\n    // This ensures that when users upload new order files, old data is completely replaced\n    console.log('Clearing all existing orders before adding new ones to prevent duplicates');\n    await db.delete(ordersDynamic);\n    \n    // Then insert the new orders\n    if (orders.length === 0) return [];\n    return await db.insert(ordersDynamic).values(orders).returning();\n  }\n\n  // File Structure Management\n  async markUploadAsCurrent(uploadId: string, fileType: string): Promise<void> {\n    // First, mark all other uploads of this type as not current\n    await db.update(uploads).set({ isCurrentVersion: false }).where(eq(uploads.fileType, fileType));\n    \n    // Then mark this upload as current\n    await db.update(uploads).set({ isCurrentVersion: true }).where(eq(uploads.id, uploadId));\n  }\n\n  async getFileStructure(uploadId: string): Promise<FileStructure | undefined> {\n    const result = await db.select().from(uploads).where(eq(uploads.id, uploadId)).limit(1);\n    if (result[0] && result[0].columnStructure) {\n      return result[0].columnStructure as FileStructure;\n    }\n    return undefined;\n  }\n\n  async saveFileStructure(uploadId: string, structure: FileStructure): Promise<void> {\n    await db.update(uploads).set({ \n      columnStructure: structure \n    }).where(eq(uploads.id, uploadId));\n  }\n\n  // Calculation Cache Implementation\n  async getCalculationCache(cacheKey: string): Promise<CalculationCache | undefined> {\n    const result = await db.select().from(calculationCache).where(eq(calculationCache.cacheKey, cacheKey)).limit(1);\n    return result[0];\n  }\n\n  async setCalculationCache(cache: InsertCalculationCache): Promise<CalculationCache> {\n    // Use upsert to update if exists or create if not\n    const result = await db\n      .insert(calculationCache)\n      .values(cache)\n      .onConflictDoUpdate({\n        target: calculationCache.cacheKey,\n        set: {\n          calculationResult: cache.calculationResult,\n          lastUpdated: new Date(),\n          dependsOnUploads: cache.dependsOnUploads,\n        },\n      })\n      .returning();\n    return result[0];\n  }\n\n  async invalidateCalculationCache(cacheKeys: string[]): Promise<void> {\n    if (cacheKeys.length === 0) return;\n    await db.delete(calculationCache).where(sql`${calculationCache.cacheKey} = ANY(${cacheKeys})`);\n  }\n\n  async invalidateCalculationCacheByUpload(uploadId: string): Promise<void> {\n    // Delete all cache entries that depend on this upload\n    await db.delete(calculationCache).where(\n      sql`${calculationCache.dependsOnUploads}::jsonb ? ${uploadId}`\n    );\n  }\n\n  // Live Dashboard Metrics Implementation\n  async getLiveDashboardMetrics(): Promise<LiveDashboardMetrics> {\n    // Try to get from cache first\n    const cached = await this.getCalculationCache('live_dashboard_metrics');\n    if (cached && (Date.now() - new Date(cached.lastUpdated).getTime()) < 5 * 60 * 1000) {\n      // Return cached result if less than 5 minutes old\n      return cached.calculationResult as LiveDashboardMetrics;\n    }\n\n    // Calculate fresh metrics\n    return await this.calculateRealTimeMetrics();\n  }\n\n  async calculateRealTimeMetrics(): Promise<LiveDashboardMetrics> {\n    // Get current uploads to determine which data to use\n    const currentUploads = await db.select().from(uploads).where(eq(uploads.isCurrentVersion, true));\n    \n    const [productsData] = await db\n      .select({\n        totalProducts: count(productsDynamic.id),\n      })\n      .from(productsDynamic)\n      .where(sql`${productsDynamic.uploadId} IN (SELECT id FROM uploads WHERE is_current_version = true AND file_type LIKE '%orders%')`);\n\n    const [ordersData] = await db\n      .select({\n        totalOrders: count(ordersDynamic.id),\n        totalSales: sql<number>`SUM(CAST(${ordersDynamic.dynamicData}->>'discountedPrice' AS DECIMAL))`,\n      })\n      .from(ordersDynamic)\n      .where(sql`${ordersDynamic.uploadId} IN (SELECT id FROM uploads WHERE is_current_version = true)`);\n\n    // Calculate GST from products and orders\n    const [gstData] = await db\n      .select({\n        totalGST: sql<number>`\n          SUM(\n            CAST(${ordersDynamic.dynamicData}->>'discountedPrice' AS DECIMAL) * \n            CAST(COALESCE(${productsDynamic.dynamicData}->>'gstPercent', '18') AS DECIMAL) / 100\n          )\n        `,\n      })\n      .from(ordersDynamic)\n      .leftJoin(productsDynamic, sql`${ordersDynamic.dynamicData}->>'sku' = ${productsDynamic.sku}`)\n      .where(sql`${ordersDynamic.uploadId} IN (SELECT id FROM uploads WHERE is_current_version = true)`);\n\n    // Calculate profit/loss\n    const [profitData] = await db\n      .select({\n        totalCost: sql<number>`\n          SUM(\n            CAST(${ordersDynamic.dynamicData}->>'quantity' AS INTEGER) * \n            (\n              CAST(COALESCE(${productsDynamic.dynamicData}->>'costPrice', '0') AS DECIMAL) +\n              CAST(COALESCE(${productsDynamic.dynamicData}->>'packagingCost', '0') AS DECIMAL)\n            )\n          )\n        `,\n      })\n      .from(ordersDynamic)\n      .leftJoin(productsDynamic, sql`${ordersDynamic.dynamicData}->>'sku' = ${productsDynamic.sku}`)\n      .where(sql`${ordersDynamic.uploadId} IN (SELECT id FROM uploads WHERE is_current_version = true)`);\n\n    // Calculate trends (last 30 days)\n    const salesTrend = await db\n      .select({\n        date: sql<string>`DATE(CAST(${ordersDynamic.dynamicData}->>'orderDate' AS TIMESTAMP))`,\n        value: sql<number>`SUM(CAST(${ordersDynamic.dynamicData}->>'discountedPrice' AS DECIMAL))`,\n      })\n      .from(ordersDynamic)\n      .where(\n        and(\n          sql`${ordersDynamic.uploadId} IN (SELECT id FROM uploads WHERE is_current_version = true)`,\n          sql`CAST(${ordersDynamic.dynamicData}->>'orderDate' AS TIMESTAMP) >= CURRENT_DATE - INTERVAL '30 days'`\n        )\n      )\n      .groupBy(sql`DATE(CAST(${ordersDynamic.dynamicData}->>'orderDate' AS TIMESTAMP))`)\n      .orderBy(sql`DATE(CAST(${ordersDynamic.dynamicData}->>'orderDate' AS TIMESTAMP))`);\n\n    const totalProducts = Number(productsData?.totalProducts || 0);\n    const totalOrders = Number(ordersData?.totalOrders || 0);\n    const totalSales = Number(ordersData?.totalSales || 0);\n    const totalGST = Number(gstData?.totalGST || 0);\n    const totalCost = Number(profitData?.totalCost || 0);\n    const profitLoss = totalSales - totalCost;\n\n    const metrics: LiveDashboardMetrics = {\n      totalProducts,\n      totalOrders,\n      totalSales,\n      totalGST,\n      profitLoss,\n      trends: {\n        sales: salesTrend.map(item => ({ date: item.date, value: Number(item.value || 0) })),\n        gst: salesTrend.map(item => ({ date: item.date, value: Number(item.value || 0) * 0.18 })), // Simplified GST calculation\n        profit: salesTrend.map(item => ({ date: item.date, value: Number(item.value || 0) * 0.2 })), // Simplified profit calculation\n      },\n    };\n\n    // Cache the results\n    await this.setCalculationCache({\n      cacheKey: 'live_dashboard_metrics',\n      calculationType: 'dashboard_summary',\n      calculationResult: metrics,\n      dependsOnUploads: currentUploads.map(u => u.id),\n    });\n\n    return metrics;\n  }\n\n  async recalculateAllMetrics(triggerUploadId?: string): Promise<void> {\n    // Invalidate all cached calculations\n    await db.delete(calculationCache);\n    \n    // Recalculate main dashboard metrics\n    await this.calculateRealTimeMetrics();\n    \n    console.log(`Recalculated all metrics${triggerUploadId ? ` triggered by upload ${triggerUploadId}` : ''}`);\n  }\n\n  async getCurrentUploads(): Promise<Upload[]> {\n    try {\n      const currentUploads = await db.select().from(uploads).where(eq(uploads.isCurrentVersion, true));\n      return currentUploads;\n    } catch (error) {\n      console.error('Error fetching current uploads:', error);\n      throw error;\n    }\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":65671},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, decimal, integer, timestamp, boolean, json, unique } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  firebaseUid: text(\"firebase_uid\").notNull().unique(),\n  email: text(\"email\").notNull(),\n  displayName: text(\"display_name\"),\n  photoURL: text(\"photo_url\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const products = pgTable(\"products\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  sku: text(\"sku\").notNull(),\n  title: text(\"title\").notNull(),\n  costPrice: decimal(\"cost_price\", { precision: 10, scale: 2 }).default(\"0\"),\n  packagingCost: decimal(\"packaging_cost\", { precision: 10, scale: 2 }).default(\"0\"),\n  finalPrice: decimal(\"final_price\", { precision: 10, scale: 2 }).default(\"0\"),\n  gstPercent: decimal(\"gst_percent\", { precision: 5, scale: 2 }).default(\"5\"),\n  totalOrders: integer(\"total_orders\").default(0),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n}, (table) => {\n  return {\n    uniqueUserSku: unique().on(table.userId, table.sku),\n  };\n});\n\nexport const orders = pgTable(\"orders\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  subOrderNo: text(\"sub_order_no\").notNull().unique(),\n  orderDate: timestamp(\"order_date\").notNull(),\n  customerState: text(\"customer_state\"),\n  productName: text(\"product_name\").notNull(),\n  sku: text(\"sku\").notNull(),\n  size: text(\"size\"),\n  quantity: integer(\"quantity\").notNull(),\n  listedPrice: decimal(\"listed_price\", { precision: 10, scale: 2 }).notNull(),\n  discountedPrice: decimal(\"discounted_price\", { precision: 10, scale: 2 }).notNull(),\n  packetId: text(\"packet_id\"),\n  reasonForCredit: text(\"reason_for_credit\").notNull(),\n  paymentStatus: text(\"payment_status\"), // Mapped from reasonForCredit: PAID, REFUNDED, CANCELLED, etc.\n  paymentDate: timestamp(\"payment_date\"), // Date when payment was processed\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const payments = pgTable(\"payments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  subOrderNo: text(\"sub_order_no\").notNull(),\n  settlementDate: timestamp(\"settlement_date\"),\n  settlementAmount: decimal(\"settlement_amount\", { precision: 10, scale: 2 }),\n  orderValue: decimal(\"order_value\", { precision: 10, scale: 2 }),\n  commissionFee: decimal(\"commission_fee\", { precision: 10, scale: 2 }),\n  fixedFee: decimal(\"fixed_fee\", { precision: 10, scale: 2 }),\n  paymentGatewayFee: decimal(\"payment_gateway_fee\", { precision: 10, scale: 2 }),\n  adsFee: decimal(\"ads_fee\", { precision: 10, scale: 2 }).default(\"0\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n}, (table) => {\n  return {\n    uniquePayment: unique().on(table.subOrderNo, table.settlementDate),\n  };\n});\n\nexport const reconciliations = pgTable(\"reconciliations\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  subOrderNo: text(\"sub_order_no\").notNull().unique(),\n  orderId: varchar(\"order_id\").references(() => orders.id),\n  paymentId: varchar(\"payment_id\").references(() => payments.id),\n  productId: varchar(\"product_id\").references(() => products.id),\n  status: text(\"status\").notNull(), // 'reconciled', 'mismatch', 'unreconciled'\n  orderValue: decimal(\"order_value\", { precision: 10, scale: 2 }),\n  settlementAmount: decimal(\"settlement_amount\", { precision: 10, scale: 2 }),\n  productCost: decimal(\"product_cost\", { precision: 10, scale: 2 }),\n  packagingCost: decimal(\"packaging_cost\", { precision: 10, scale: 2 }),\n  adsCost: decimal(\"ads_cost\", { precision: 10, scale: 2 }),\n  grossProfit: decimal(\"gross_profit\", { precision: 10, scale: 2 }),\n  netProfit: decimal(\"net_profit\", { precision: 10, scale: 2 }),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\nexport const uploads = pgTable(\"uploads\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  filename: text(\"filename\").notNull(),\n  originalName: text(\"original_name\").notNull(),\n  fileType: text(\"file_type\").notNull(), // 'payment_zip', 'orders_csv'\n  status: text(\"status\").notNull(), // 'processing', 'processed', 'failed'\n  recordsProcessed: integer(\"records_processed\").default(0),\n  errors: json(\"errors\"),\n  sourceMonth: text(\"source_month\"),\n  label: text(\"label\"),\n  columnStructure: json(\"column_structure\"), // Store dynamic column info\n  isCurrentVersion: boolean(\"is_current_version\").default(true),\n  uploadedBy: varchar(\"uploaded_by\").references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Enhanced products table to support dynamic columns\nexport const productsDynamic = pgTable(\"products_dynamic\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  uploadId: varchar(\"upload_id\").references(() => uploads.id),\n  dynamicData: json(\"dynamic_data\").notNull(), // Store all dynamic column data\n  sku: text(\"sku\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n}, (table) => {\n  return {\n    uniqueProductUpload: unique().on(table.sku, table.uploadId),\n  };\n});\n\n// Enhanced orders table to support dynamic columns  \nexport const ordersDynamic = pgTable(\"orders_dynamic\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  uploadId: varchar(\"upload_id\").references(() => uploads.id),\n  dynamicData: json(\"dynamic_data\").notNull(), // Store all dynamic column data\n  subOrderNo: text(\"sub_order_no\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n}, (table) => {\n  return {\n    uniqueOrderUpload: unique().on(table.subOrderNo, table.uploadId),\n  };\n});\n\n// Real-time calculation cache\nexport const calculationCache = pgTable(\"calculation_cache\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  cacheKey: text(\"cache_key\").notNull().unique(),\n  calculationType: text(\"calculation_type\").notNull(), // 'dashboard_summary', 'product_totals', etc.\n  calculationResult: json(\"calculation_result\").notNull(),\n  lastUpdated: timestamp(\"last_updated\").defaultNow().notNull(),\n  dependsOnUploads: json(\"depends_on_uploads\"), // Track which uploads this depends on\n});\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertProductSchema = createInsertSchema(products).omit({\n  id: true,\n  updatedAt: true,\n});\n\nexport const insertOrderSchema = createInsertSchema(orders).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertPaymentSchema = createInsertSchema(payments).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertReconciliationSchema = createInsertSchema(reconciliations).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertUploadSchema = createInsertSchema(uploads).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertProductDynamicSchema = createInsertSchema(productsDynamic).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertOrderDynamicSchema = createInsertSchema(ordersDynamic).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertCalculationCacheSchema = createInsertSchema(calculationCache).omit({\n  id: true,\n  lastUpdated: true,\n});\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\n\nexport type Product = typeof products.$inferSelect;\nexport type InsertProduct = z.infer<typeof insertProductSchema>;\n\nexport type ProductDynamic = typeof productsDynamic.$inferSelect;\nexport type InsertProductDynamic = z.infer<typeof insertProductDynamicSchema>;\n\nexport type Order = typeof orders.$inferSelect;\nexport type InsertOrder = z.infer<typeof insertOrderSchema>;\n\nexport type OrderDynamic = typeof ordersDynamic.$inferSelect;\nexport type InsertOrderDynamic = z.infer<typeof insertOrderDynamicSchema>;\n\nexport type Payment = typeof payments.$inferSelect;\nexport type InsertPayment = z.infer<typeof insertPaymentSchema>;\n\nexport type Reconciliation = typeof reconciliations.$inferSelect;\nexport type InsertReconciliation = z.infer<typeof insertReconciliationSchema>;\n\nexport type Upload = typeof uploads.$inferSelect;\nexport type InsertUpload = z.infer<typeof insertUploadSchema>;\n\nexport type CalculationCache = typeof calculationCache.$inferSelect;\nexport type InsertCalculationCache = z.infer<typeof insertCalculationCacheSchema>;\n\n// Dashboard Analytics Types\nexport interface ComprehensiveFinancialSummary {\n  // Overall Financial Summary\n  totalSaleAmount: number;\n  settlementAmount: number;\n  totalPurchaseCost: number;\n  totalPackagingCost: number;\n  shippingCost: number;\n  totalTds: number;\n  netProfit: number;\n\n  // Orders Overview  \n  totalOrders: number;\n  delivered: number;\n  shipped: number;\n  exchanged: number;\n  cancelled: number;\n  returns: number;\n  avgOrderValue: number;\n  returnRate: number;\n  ordersAwaitingPaymentRecord: number;\n}\n\nexport interface SettlementComponentsData {\n  component: string;\n  totalAmount: number;\n}\n\nexport interface EarningsOverviewData {\n  description: string;\n  amount: number;\n}\n\nexport interface OperationalCostsData {\n  type: string;\n  amount: number;\n}\n\nexport interface DailyVolumeData {\n  date: string;\n  orderVolume: number;\n  aov: number;\n}\n\nexport interface TopProductsData {\n  sku: string;\n  name: string;\n  orders: number;\n  revenue: number;\n}\n\nexport interface TopReturnsData {\n  sku: string;\n  name: string;\n  returns: number;\n  rtoCount: number;\n  combinedCount: number;\n}\n\n// Dynamic column structure types\nexport interface ColumnMetadata {\n  name: string;\n  type: 'text' | 'number' | 'date' | 'boolean';\n  required: boolean;\n  description?: string;\n}\n\nexport interface FileStructure {\n  columns: ColumnMetadata[];\n  primaryKey: string;\n  totalRows: number;\n  sampleData: Record<string, any>[];\n}\n\n// Live dashboard metrics\nexport interface LiveDashboardMetrics {\n  totalProducts: number;\n  totalOrders: number;\n  totalSales: number;\n  totalGST: number;\n  profitLoss: number;\n  trends: {\n    sales: { date: string; value: number }[];\n    gst: { date: string; value: number }[];\n    profit: { date: string; value: number }[];\n  };\n}\n\n// Real-time sync events\nexport interface SyncEvent {\n  type: 'product_update' | 'order_update' | 'file_upload';\n  entityId: string;\n  changes: Record<string, any>;\n  timestamp: Date;\n}\n\n// Orders Overview Analytics (separate from Order Status chart data)\nexport interface OrdersOverview {\n  delivered: number;\n  shipped: number;\n  readyToShip: number;\n  cancelled: number;\n  rto: number; // RTO Complete + RTO Locked combined\n  exchanged: number;\n  avgOrderValue: number;\n  returnRate: number; // Percentage of returns vs delivered\n  awaitingPaymentOrders: number; // Delivered orders without payment records\n  totalOrdersUsedForAOV: number; // Denominator for AOV calculation\n}\n","size_bytes":11250},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { AuthProvider } from \"@/contexts/AuthContext\";\nimport ProtectedRoute from \"@/components/ProtectedRoute\";\nimport Dashboard from \"@/pages/Dashboard\";\nimport Upload from \"@/pages/Upload\";\nimport Orders from \"@/pages/Orders\";\nimport Products from \"@/pages/Products\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction AppLayout({ children }: { children: React.ReactNode }) {\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {children}\n    </div>\n  );\n}\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Dashboard} />\n      <Route path=\"/upload\" component={Upload} />\n      <Route path=\"/orders\" component={Orders} />\n      <Route path=\"/products\" component={Products} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <AuthProvider>\n          <ProtectedRoute>\n            <AppLayout>\n              <Router />\n            </AppLayout>\n          </ProtectedRoute>\n          <Toaster />\n        </AuthProvider>\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1417},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(210, 40%, 98%);\n  --foreground: hsl(210, 40%, 2%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(210, 40%, 2%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(210, 40%, 2%);\n  --primary: hsl(214, 100%, 59%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(210, 40%, 96%);\n  --secondary-foreground: hsl(210, 40%, 2%);\n  --muted: hsl(210, 40%, 96%);\n  --muted-foreground: hsl(210, 40%, 45%);\n  --accent: hsl(210, 40%, 96%);\n  --accent-foreground: hsl(210, 40%, 2%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(210, 40%, 94%);\n  --input: hsl(210, 40%, 96%);\n  --ring: hsl(214, 100%, 59%);\n  --chart-1: hsl(214, 100%, 59%);\n  --chart-2: hsl(159, 78%, 36%);\n  --chart-3: hsl(42, 93%, 56%);\n  --chart-4: hsl(147, 78%, 42%);\n  --chart-5: hsl(341, 75%, 51%);\n  --sidebar: hsl(0, 0%, 100%);\n  --sidebar-foreground: hsl(210, 40%, 2%);\n  --sidebar-primary: hsl(214, 100%, 59%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(210, 40%, 96%);\n  --sidebar-accent-foreground: hsl(210, 40%, 2%);\n  --sidebar-border: hsl(210, 40%, 88%);\n  --sidebar-ring: hsl(214, 100%, 59%);\n  --font-sans: Inter, \"Open Sans\", sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.5rem;\n  --shadow-2xs: 0px 1px 2px 0px hsl(214, 100%, 59%, 0.05);\n  --shadow-xs: 0px 1px 2px 0px hsl(214, 100%, 59%, 0.05);\n  --shadow-sm: 0px 1px 3px 0px hsl(214, 100%, 59%, 0.1), 0px 1px 2px -1px hsl(214, 100%, 59%, 0.1);\n  --shadow: 0px 1px 3px 0px hsl(214, 100%, 59%, 0.1), 0px 1px 2px -1px hsl(214, 100%, 59%, 0.1);\n  --shadow-md: 0px 4px 6px -1px hsl(214, 100%, 59%, 0.1), 0px 2px 4px -2px hsl(214, 100%, 59%, 0.1);\n  --shadow-lg: 0px 10px 15px -3px hsl(214, 100%, 59%, 0.1), 0px 4px 6px -4px hsl(214, 100%, 59%, 0.1);\n  --shadow-xl: 0px 20px 25px -5px hsl(214, 100%, 59%, 0.1), 0px 8px 10px -6px hsl(214, 100%, 59%, 0.1);\n  --shadow-2xl: 0px 25px 50px -12px hsl(214, 100%, 59%, 0.25);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(0, 0%, 0%);\n  --foreground: hsl(200, 7%, 91%);\n  --card: hsl(228, 10%, 10%);\n  --card-foreground: hsl(0, 0%, 85%);\n  --popover: hsl(0, 0%, 0%);\n  --popover-foreground: hsl(200, 7%, 91%);\n  --primary: hsl(214, 88%, 53%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(195, 15%, 95%);\n  --secondary-foreground: hsl(210, 40%, 8%);\n  --muted: hsl(0, 0%, 9%);\n  --muted-foreground: hsl(210, 3%, 46%);\n  --accent: hsl(206, 70%, 8%);\n  --accent-foreground: hsl(214, 88%, 53%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(210, 5%, 15%);\n  --input: hsl(208, 28%, 18%);\n  --ring: hsl(214, 100%, 59%);\n  --chart-1: hsl(214, 100%, 59%);\n  --chart-2: hsl(159, 78%, 36%);\n  --chart-3: hsl(42, 93%, 56%);\n  --chart-4: hsl(147, 78%, 42%);\n  --chart-5: hsl(341, 75%, 51%);\n  --sidebar: hsl(228, 10%, 10%);\n  --sidebar-foreground: hsl(0, 0%, 85%);\n  --sidebar-primary: hsl(214, 100%, 59%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(206, 70%, 8%);\n  --sidebar-accent-foreground: hsl(214, 88%, 53%);\n  --sidebar-border: hsl(206, 16%, 26%);\n  --sidebar-ring: hsl(214, 100%, 59%);\n  --font-sans: Inter, \"Open Sans\", sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.5rem;\n  --shadow-2xs: 0px 1px 2px 0px hsl(214, 100%, 59%, 0.05);\n  --shadow-xs: 0px 1px 2px 0px hsl(214, 100%, 59%, 0.05);\n  --shadow-sm: 0px 1px 3px 0px hsl(214, 100%, 59%, 0.1), 0px 1px 2px -1px hsl(214, 100%, 59%, 0.1);\n  --shadow: 0px 1px 3px 0px hsl(214, 100%, 59%, 0.1), 0px 1px 2px -1px hsl(214, 100%, 59%, 0.1);\n  --shadow-md: 0px 4px 6px -1px hsl(214, 100%, 59%, 0.1), 0px 2px 4px -2px hsl(214, 100%, 59%, 0.1);\n  --shadow-lg: 0px 10px 15px -3px hsl(214, 100%, 59%, 0.1), 0px 4px 6px -4px hsl(214, 100%, 59%, 0.1);\n  --shadow-xl: 0px 20px 25px -5px hsl(214, 100%, 59%, 0.1), 0px 8px 10px -6px hsl(214, 100%, 59%, 0.1);\n  --shadow-2xl: 0px 25px 50px -12px hsl(214, 100%, 59%, 0.25);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n\n  /* Custom scrollbar styles */\n  ::-webkit-scrollbar {\n    width: 8px;\n    height: 8px;\n  }\n\n  ::-webkit-scrollbar-track {\n    @apply bg-muted;\n  }\n\n  ::-webkit-scrollbar-thumb {\n    @apply bg-border rounded-md;\n  }\n\n  ::-webkit-scrollbar-thumb:hover {\n    @apply bg-muted-foreground;\n  }\n}\n\n@layer components {\n  /* Modern gradient backgrounds */\n  .gradient-bg {\n    background: linear-gradient(135deg, hsl(var(--primary) / 0.1) 0%, hsl(var(--secondary)) 100%);\n  }\n  \n  /* Enhanced card styles - borderless modern look */\n  .modern-card {\n    @apply bg-card backdrop-blur-sm rounded-2xl shadow-sm hover:shadow-xl transition-all duration-300;\n    background-color: hsl(var(--card) / 0.98);\n    border: 1px solid hsl(var(--border) / 0.1);\n    box-shadow: 0 1px 3px 0 rgb(0 0 0 / 0.05), 0 1px 2px -1px rgb(0 0 0 / 0.05);\n  }\n  \n  .modern-card:hover {\n    border-color: hsl(var(--primary) / 0.1);\n    box-shadow: 0 10px 15px -3px rgb(0 0 0 / 0.08), 0 4px 6px -4px rgb(0 0 0 / 0.08);\n  }\n  \n  /* Status indicator styles */\n  .status-delivered {\n    @apply bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-400;\n  }\n  \n  .status-cancelled {\n    @apply bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-400;\n  }\n  \n  .status-processing {\n    @apply bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-400;\n  }\n  \n  .status-returned {\n    @apply bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-400;\n  }\n  \n  /* Modern metric card - borderless design */\n  .metric-card {\n    @apply relative overflow-hidden bg-gradient-to-br from-card via-card to-card rounded-2xl shadow-md hover:shadow-xl transition-all duration-500;\n    background: linear-gradient(135deg, hsl(var(--card)) 0%, hsl(var(--card)) 50%, hsl(var(--card) / 0.98) 100%);\n    border: 1px solid hsl(var(--border) / 0.05);\n  }\n  \n  .metric-card::before {\n    content: '';\n    @apply absolute inset-0 translate-x-[-100%] transition-transform duration-700;\n    background: linear-gradient(90deg, transparent 0%, rgba(255,255,255,0.05) 50%, transparent 100%);\n  }\n  \n  .metric-card:hover::before {\n    @apply translate-x-[100%];\n  }\n  \n  /* Enhanced button styles */\n  .btn-modern {\n    @apply relative overflow-hidden bg-primary text-primary-foreground rounded-xl px-6 py-3 font-medium transition-all duration-300 hover:shadow-lg hover:scale-105 active:scale-95;\n  }\n  \n  .btn-modern:hover {\n    box-shadow: 0 10px 25px -5px hsl(var(--primary) / 0.25);\n  }\n  \n  /* Glassmorphism effect */\n  .glass {\n    @apply backdrop-blur-xl border;\n    background: rgba(255, 255, 255, 0.1);\n    border-color: rgba(255, 255, 255, 0.2);\n  }\n  \n  .dark .glass {\n    background: rgba(31, 41, 55, 0.1);\n    border-color: rgba(75, 85, 99, 0.2);\n  }\n\n  /* Table styles */\n  table {\n    @apply w-full border-collapse;\n  }\n\n  th {\n    @apply text-left font-medium;\n  }\n\n  td {\n    @apply text-left;\n  }\n\n  /* Form styles */\n  input[type=\"number\"]::-webkit-outer-spin-button,\n  input[type=\"number\"]::-webkit-inner-spin-button {\n    -webkit-appearance: none;\n    margin: 0;\n  }\n\n  input[type=\"number\"] {\n    -moz-appearance: textfield;\n  }\n\n  /* Badge styles for status indicators */\n  .status-delivered {\n    @apply bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200;\n  }\n\n  .status-rto {\n    @apply bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200;\n  }\n\n  .status-cancelled {\n    @apply bg-gray-100 text-gray-800 dark:bg-gray-800 dark:text-gray-200;\n  }\n\n  .status-processing {\n    @apply bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200;\n  }\n\n  .status-reconciled {\n    @apply bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200;\n  }\n\n  /* Loading skeleton animation */\n  @keyframes skeleton {\n    0% {\n      opacity: 1;\n    }\n    50% {\n      opacity: 0.5;\n    }\n    100% {\n      opacity: 1;\n    }\n  }\n\n  .animate-skeleton {\n    animation: skeleton 2s ease-in-out infinite;\n  }\n\n  /* Modern fade-in animations */\n  @keyframes fadeIn {\n    from {\n      opacity: 0;\n      transform: translateY(20px);\n    }\n    to {\n      opacity: 1;\n      transform: translateY(0);\n    }\n  }\n\n  @keyframes slideInUp {\n    from {\n      opacity: 0;\n      transform: translateY(30px);\n    }\n    to {\n      opacity: 1;\n      transform: translateY(0);\n    }\n  }\n\n  @keyframes scaleIn {\n    from {\n      opacity: 0;\n      transform: scale(0.9);\n    }\n    to {\n      opacity: 1;\n      transform: scale(1);\n    }\n  }\n\n  @keyframes shimmer {\n    0% {\n      background-position: -200px 0;\n    }\n    100% {\n      background-position: calc(200px + 100%) 0;\n    }\n  }\n\n  /* Animation classes */\n  .animate-fadeIn {\n    animation: fadeIn 0.6s ease-out forwards;\n  }\n\n  .animate-slideInUp {\n    animation: slideInUp 0.5s ease-out forwards;\n  }\n\n  .animate-scaleIn {\n    animation: scaleIn 0.4s ease-out forwards;\n  }\n\n  .animate-shimmer {\n    background: linear-gradient(90deg, hsl(var(--muted)) 25%, hsl(var(--muted-foreground) / 0.1) 50%, hsl(var(--muted)) 75%);\n    background-size: 200px 100%;\n    animation: shimmer 2s infinite;\n  }\n\n  /* Responsive improvements */\n  @media (max-width: 768px) {\n    .responsive-grid {\n      grid-template-columns: 1fr;\n    }\n    \n    .responsive-grid-2 {\n      grid-template-columns: repeat(2, 1fr);\n    }\n    \n    .responsive-text {\n      font-size: 0.875rem;\n    }\n    \n    .responsive-padding {\n      padding: 1rem;\n    }\n  }\n\n  @media (max-width: 640px) {\n    .responsive-grid-2 {\n      grid-template-columns: 1fr;\n    }\n    \n    .responsive-text-sm {\n      font-size: 0.75rem;\n    }\n    \n    .responsive-padding-sm {\n      padding: 0.75rem;\n    }\n  }\n\n  /* Enhanced hover effects */\n  .hover-lift {\n    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n  }\n\n  .hover-lift:hover {\n    transform: translateY(-4px);\n    box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);\n  }\n\n  /* Staggered animation */\n  .animate-stagger {\n    animation-delay: calc(var(--stagger) * 100ms);\n  }\n\n  /* Micro-interactions */\n  .interactive-scale {\n    transition: transform 0.2s ease-out;\n  }\n\n  .interactive-scale:hover {\n    transform: scale(1.02);\n  }\n\n  .interactive-scale:active {\n    transform: scale(0.98);\n  }\n\n  /* Progress indicators */\n  @keyframes progress {\n    0% {\n      width: 0%;\n    }\n    100% {\n      width: 100%;\n    }\n  }\n\n  .animate-progress {\n    animation: progress 2s ease-out forwards;\n  }\n\n  /* Floating action styles */\n  .floating-action {\n    @apply fixed bottom-6 right-6 z-50 bg-primary text-primary-foreground rounded-full p-4 shadow-xl hover:shadow-2xl transition-all duration-300;\n    box-shadow: 0 8px 25px -8px hsl(var(--primary) / 0.3);\n  }\n\n  .floating-action:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 12px 35px -8px hsl(var(--primary) / 0.4);\n  }\n}\n","size_bytes":11022},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/services/fileProcessor.ts":{"content":"import csv from 'csv-parser';\nimport * as xlsx from 'xlsx';\nimport AdmZip from 'adm-zip';\nimport { Readable } from 'stream';\nimport { storage } from '../storage';\nimport { \n  type InsertOrder, type InsertPayment, \n  type InsertOrderDynamic, type InsertProductDynamic,\n  type FileStructure, type ColumnMetadata \n} from '@shared/schema';\nimport { CSVProcessor } from './csvProcessor';\nimport { ZIPProcessor } from './zipProcessor';\n\nexport interface ProcessedFile {\n  orders?: InsertOrder[];\n  payments?: InsertPayment[];\n  ordersDynamic?: InsertOrderDynamic[];\n  productsDynamic?: InsertProductDynamic[];\n  fileStructure?: FileStructure;\n  errors: string[];\n}\n\nexport interface DynamicFileResult {\n  data: Record<string, any>[];\n  fileStructure: FileStructure;\n  errors: string[];\n}\n\nexport class FileProcessor {\n  // Helper method to sanitize numeric fields by removing currency symbols and commas\n  static sanitizeNumericField(value: any): string {\n    if (value == null || value === '') return '0';\n    \n    if (typeof value === 'number') {\n      return value.toString();\n    }\n    \n    if (typeof value === 'string') {\n      // Remove currency symbols (₹, $, €, £) and commas, keep decimal point and numbers\n      const cleaned = value.trim().replace(/[₹$€£,]/g, '');\n      \n      // Check if it's a valid number after cleaning\n      if (cleaned && !isNaN(Number(cleaned))) {\n        return cleaned;\n      }\n    }\n    \n    return '0';\n  }\n\n  // Helper method to normalize column keys for fuzzy matching\n  static normalizeKey(key: string): string {\n    return key.toLowerCase().replace(/[^a-z0-9]/g, '');\n  }\n\n  // Helper method to find column value using fuzzy matching\n  static findColumnValue(row: Record<string, any>, synonyms: string[]): any {\n    for (const synonym of synonyms) {\n      const normalizedSynonym = this.normalizeKey(synonym);\n      for (const [key, value] of Object.entries(row)) {\n        if (this.normalizeKey(key) === normalizedSynonym) {\n          return value;\n        }\n      }\n    }\n    return null;\n  }\n\n  // Helper method to calculate total GST from CGST/SGST or use IGST\n  static calculateTotalGst(row: Record<string, any>): string | null {\n    // First check for IGST (Interstate GST)\n    const igst = this.findColumnValue(row, ['IGST Rate', 'IGST %', 'IGST Percent', 'Interstate GST']);\n    if (igst) {\n      const sanitized = this.sanitizeGstField(igst);\n      console.log(`Found IGST: ${sanitized}%`);\n      return sanitized;\n    }\n\n    // Then check for CGST + SGST (Intrastate GST)\n    const cgst = this.findColumnValue(row, ['CGST Rate', 'CGST %', 'CGST Percent', 'Central GST']);\n    const sgst = this.findColumnValue(row, ['SGST Rate', 'SGST %', 'SGST Percent', 'State GST']);\n    \n    if (cgst && sgst) {\n      const cgstValue = parseFloat(this.sanitizeGstField(cgst, '0'));\n      const sgstValue = parseFloat(this.sanitizeGstField(sgst, '0'));\n      const totalGst = cgstValue + sgstValue;\n      console.log(`Found CGST (${cgstValue}%) + SGST (${sgstValue}%) = ${totalGst}%`);\n      return totalGst.toString();\n    }\n\n    // Fallback to general GST columns\n    const generalGst = this.findColumnValue(row, [\n      'Product GST %', 'Product GST', 'GST %', 'GST Percent',\n      'GST_Percent', 'Tax Rate', 'GST Rate', 'Product_GST',\n      'Item Tax Rate'\n    ]);\n    \n    if (generalGst) {\n      const sanitized = this.sanitizeGstField(generalGst);\n      console.log(`Found general GST: ${sanitized}%`);\n      return sanitized;\n    }\n\n    return null;\n  }\n\n  // Helper method to sanitize GST fields with proper validation and fallback\n  static sanitizeGstField(value: any, defaultGst: string = '5'): string {\n    if (value == null || value === '') return defaultGst;\n    \n    if (typeof value === 'number') {\n      // Valid number, ensure it's reasonable for GST (0-100)\n      const numValue = Number(value);\n      if (numValue >= 0 && numValue <= 100) {\n        return value.toString();\n      }\n      return defaultGst;\n    }\n    \n    if (typeof value === 'string') {\n      // Remove % symbol, whitespace, and common formatting\n      const cleaned = value.trim().replace(/[%\\s]/g, '');\n      \n      // Check if it's a valid number after cleaning\n      if (cleaned && !isNaN(Number(cleaned))) {\n        const numValue = Number(cleaned);\n        // Ensure GST is within reasonable range (0-100)\n        if (numValue >= 0 && numValue <= 100) {\n          return cleaned;\n        }\n      }\n    }\n    \n    // Invalid or out of range value, use default\n    return defaultGst;\n  }\n\n  // Enhanced method to extract files from ZIP archive (XLSX, CSV, etc.)\n  static async extractFilesFromZip(buffer: Buffer): Promise<{ files: Array<{ buffer: Buffer; filename: string; type: string }> } | null> {\n    try {\n      const zip = new AdmZip(buffer);\n      const zipEntries = zip.getEntries();\n      const files: Array<{ buffer: Buffer; filename: string; type: string }> = [];\n\n      // Extract all relevant files (XLSX, CSV, etc.)\n      zipEntries.forEach((entry: any) => {\n        if (!entry.isDirectory) {\n          const filename = entry.entryName.toLowerCase();\n          let type = 'unknown';\n          \n          if (filename.endsWith('.xlsx')) {\n            type = 'xlsx';\n          } else if (filename.endsWith('.csv')) {\n            type = 'csv';\n          } else if (filename.endsWith('.xls')) {\n            type = 'xls';\n          }\n\n          if (type !== 'unknown') {\n            const buffer = entry.getData();\n            files.push({\n              buffer,\n              filename: entry.entryName,\n              type\n            });\n          }\n        }\n      });\n\n      return { files };\n    } catch (error) {\n      console.error('Error extracting files from ZIP:', error);\n      return null;\n    }\n  }\n\n  // Legacy method for backward compatibility\n  static async extractXLSXFromZip(buffer: Buffer): Promise<{ xlsxBuffer: Buffer; filename: string } | null> {\n    const result = await FileProcessor.extractFilesFromZip(buffer);\n    if (result && result.files.length > 0) {\n      const xlsxFile = result.files.find(f => f.type === 'xlsx');\n      if (xlsxFile) {\n        return {\n          xlsxBuffer: xlsxFile.buffer,\n          filename: xlsxFile.filename\n        };\n      }\n    }\n    return null;\n  }\n\n  // Use the dedicated ZIP processor for enhanced payment processing\n  static async processPaymentsZIP(buffer: Buffer): Promise<ProcessedFile & {\n    productGstData?: Array<{ sku: string; gstPercent: number; productName: string; }>;\n    orderStatusData?: Array<{ subOrderNo: string; orderStatus: string; }>;\n  }> {\n    const result = await ZIPProcessor.processPaymentZIP(buffer);\n    return {\n      payments: result.payments,\n      errors: result.errors,\n      productGstData: result.productGstData,\n      orderStatusData: result.orderStatusData\n    };\n  }\n\n  // Enhanced method that extracts dynamic structure and processes data\n  static async processOrdersCSVDynamic(buffer: Buffer, uploadId: string): Promise<DynamicFileResult> {\n    const data: Record<string, any>[] = [];\n    const errors: string[] = [];\n    let headers: string[] = [];\n\n    return new Promise((resolve) => {\n      const stream = Readable.from(buffer);\n      let isFirstRow = true;\n      \n      stream\n        .pipe(csv())\n        .on('data', (row: any) => {\n          try {\n            // Capture headers from first row\n            if (isFirstRow) {\n              headers = Object.keys(row);\n              isFirstRow = false;\n            }\n\n            // Store all row data as-is for dynamic processing\n            const cleanedRow: Record<string, any> = {};\n            for (const [key, value] of Object.entries(row)) {\n              // Clean and type the data appropriately\n              if (typeof value === 'string') {\n                const trimmed = value.trim();\n                // Try to parse numbers\n                if (trimmed && !isNaN(Number(trimmed.replace(/[₹,]/g, '')))) {\n                  cleanedRow[key] = trimmed.replace(/[₹,]/g, '');\n                } else if (trimmed.toLowerCase() === 'true' || trimmed.toLowerCase() === 'false') {\n                  cleanedRow[key] = trimmed.toLowerCase() === 'true';\n                } else {\n                  cleanedRow[key] = trimmed;\n                }\n              } else {\n                cleanedRow[key] = value;\n              }\n            }\n\n            data.push(cleanedRow);\n          } catch (error) {\n            errors.push(`Error processing row: ${error}`);\n          }\n        })\n        .on('end', () => {\n          // Generate file structure metadata\n          const fileStructure = FileProcessor.analyzeFileStructure(headers, data, 'Sub Order No');\n          resolve({ data, fileStructure, errors });\n        })\n        .on('error', (error: any) => {\n          errors.push(`CSV parsing error: ${error}`);\n          resolve({ data, fileStructure: { columns: [], primaryKey: '', totalRows: 0, sampleData: [] }, errors });\n        });\n    });\n  }\n\n  // Use the dedicated CSV processor for enhanced order processing\n  static async processOrdersCSV(buffer: Buffer): Promise<ProcessedFile & {\n    productMetadata?: Array<{ sku: string; gstPercent?: number; costPrice?: number; productName: string; }>;\n  }> {\n    const result = await CSVProcessor.processOrdersCSV(buffer);\n    return {\n      orders: result.orders,\n      errors: result.errors,\n      productMetadata: result.productMetadata\n    };\n  }\n\n  static async processPaymentsXLSX(buffer: Buffer): Promise<ProcessedFile> {\n    const payments: InsertPayment[] = [];\n    const productGstUpdates: Map<string, string> = new Map();\n    const errors: string[] = [];\n\n    try {\n      const workbook = xlsx.read(buffer, { type: 'buffer' });\n      \n      // Look for \"Order Payments\" sheet first, fallback to first sheet\n      let targetSheet = 'Order Payments';\n      if (!workbook.Sheets[targetSheet]) {\n        targetSheet = workbook.SheetNames[0];\n        console.log(`Order Payments sheet not found, using: ${targetSheet}`);\n      } else {\n        console.log('Processing Order Payments sheet');\n      }\n      \n      const worksheet = workbook.Sheets[targetSheet];\n      \n      // For Meesho files, read as array of arrays to handle header row properly\n      const rawData = xlsx.utils.sheet_to_json(worksheet, { header: 1 });\n      \n      // Find the header row (usually row 1 in Meesho files)\n      let headerRowIndex = 0;\n      let headers: string[] = [];\n      \n      for (let i = 0; i < Math.min(5, rawData.length); i++) {\n        const row = rawData[i] as any[];\n        if (row && row.length > 10 && row[0] === 'Sub Order No') {\n          headerRowIndex = i;\n          headers = row;\n          break;\n        }\n      }\n      \n      if (headers.length === 0) {\n        console.error('Could not find header row with Sub Order No');\n        return { payments: [], errors: ['Invalid payment file format - header row not found'] };\n      }\n      \n      console.log(`Found headers at row ${headerRowIndex}:`, headers.slice(0, 10));\n      \n      // Find column indices for key fields\n      const subOrderIndex = headers.indexOf('Sub Order No');\n      const supplierSkuIndex = headers.indexOf('Supplier SKU');\n      const gstIndex = headers.indexOf('Product GST %');\n      const settlementDateIndex = headers.indexOf('Payment Date');\n      const settlementAmountIndex = headers.indexOf('Final Settlement Amount');\n      const orderValueIndex = headers.indexOf('Total Sale Amount (Incl. Shipping & GST)');\n      const commissionIndex = headers.indexOf('Meesho Commission (Incl. GST)');\n      \n      console.log(`Column indices: SubOrder=${subOrderIndex}, SKU=${supplierSkuIndex}, GST=${gstIndex}`);\n      \n      if (subOrderIndex === -1) {\n        return { payments: [], errors: ['Sub Order No column not found'] };\n      }\n\n      // Process data rows (starting after header row)\n      for (let i = headerRowIndex + 2; i < rawData.length; i++) {\n        try {\n          const row = rawData[i] as any[];\n          if (!row || row.length < 5) continue;\n          \n          const subOrderNo = row[subOrderIndex];\n          const supplierSku = row[supplierSkuIndex];\n          const productGst = row[gstIndex];\n          \n          // Create payment record\n          const payment: InsertPayment = {\n            subOrderNo: subOrderNo ? String(subOrderNo).trim() : '',\n            settlementDate: settlementDateIndex !== -1 && row[settlementDateIndex] ? new Date(row[settlementDateIndex]) : null,\n            settlementAmount: FileProcessor.sanitizeNumericField(settlementAmountIndex !== -1 ? row[settlementAmountIndex] : '0'),\n            orderValue: FileProcessor.sanitizeNumericField(orderValueIndex !== -1 ? row[orderValueIndex] : '0'),\n            commissionFee: FileProcessor.sanitizeNumericField(commissionIndex !== -1 ? row[commissionIndex] : '0'),\n            fixedFee: FileProcessor.sanitizeNumericField('0'),\n            paymentGatewayFee: FileProcessor.sanitizeNumericField('0'),\n            adsFee: FileProcessor.sanitizeNumericField('0'),\n          };\n\n          // Extract GST information for product updates\n          if (supplierSku && productGst && !productGstUpdates.has(supplierSku)) {\n            const sanitizedGst = FileProcessor.sanitizeGstField(productGst);\n            productGstUpdates.set(supplierSku, sanitizedGst);\n            console.log(`Found GST data: SKU ${supplierSku} -> ${sanitizedGst}%`);\n          }\n\n          // Validation - only add payments with sub order numbers\n          if (!payment.subOrderNo) {\n            continue;\n          }\n\n          payments.push(payment);\n        } catch (error) {\n          errors.push(`Error processing payment row ${i + 1}: ${error}`);\n        }\n      }\n\n      console.log(`Found ${productGstUpdates.size} products with GST data to update`);\n\n      // Add diagnostic error if no payments were processed\n      if (payments.length === 0 && rawData.length > headerRowIndex + 2) {\n        errors.push(`No payments processed - data extraction failed. Found headers: ${headers.join(', ')}. Processing ${rawData.length - headerRowIndex - 2} data rows.`);\n        console.warn('Payment processing failed - no valid payment rows found');\n      }\n\n      // Update products with GST information from payment file\n      if (productGstUpdates.size > 0) {\n        const updates = Array.from(productGstUpdates.entries());\n        for (const [sku, gstPercent] of updates) {\n          try {\n            await storage.updateProduct(sku, { gstPercent });\n            console.log(`Updated GST for product ${sku}: ${gstPercent}%`);\n          } catch (error) {\n            console.error(`Error updating GST for product ${sku}: ${error}`);\n            errors.push(`Error updating GST for product ${sku}: ${error}`);\n          }\n        }\n        console.log(`Successfully updated GST for ${updates.length} products`);\n      }\n    } catch (error) {\n      console.error('XLSX parsing error:', error);\n      errors.push(`XLSX parsing error: ${error}`);\n    }\n\n    return { payments, errors };\n  }\n\n  // Enhanced method to create dynamic products from order data\n  static async extractProductsFromOrdersDynamic(\n    orderData: Record<string, any>[], \n    uploadId: string, \n    defaultGstPercent: string = '5'\n  ): Promise<InsertProductDynamic[]> {\n    const uniqueProducts = new Map<string, InsertProductDynamic>();\n\n    orderData.forEach(order => {\n      const sku = order['SKU'] || order['sku'];\n      const productName = order['Product Name'] || order['productName'] || order['product_name'];\n      \n      if (sku && !uniqueProducts.has(sku)) {\n        // Extract all product-related information\n        const productData: Record<string, any> = {\n          sku: sku,\n          productName: productName,\n          costPrice: order['Cost Price'] || order['costPrice'] || '0',\n          packagingCost: order['Packaging Cost'] || order['packagingCost'] || '15',\n          gstPercent: order['GST Percent'] || order['GST %'] || order['Tax Rate'] || defaultGstPercent,\n          // Include any other fields that might be product-related\n          ...Object.fromEntries(\n            Object.entries(order).filter(([key]) => \n              key.toLowerCase().includes('product') || \n              key.toLowerCase().includes('price') ||\n              key.toLowerCase().includes('cost') ||\n              key.toLowerCase().includes('gst') ||\n              key.toLowerCase().includes('tax')\n            )\n          )\n        };\n\n        uniqueProducts.set(sku, {\n          uploadId,\n          dynamicData: productData,\n          sku: sku,\n        });\n      }\n    });\n\n    return Array.from(uniqueProducts.values());\n  }\n\n  // Enhanced method to process any CSV file dynamically\n  static async processGenericCSV(buffer: Buffer, uploadId: string, primaryKeyField?: string): Promise<DynamicFileResult> {\n    const data: Record<string, any>[] = [];\n    const errors: string[] = [];\n    let headers: string[] = [];\n\n    return new Promise((resolve) => {\n      const stream = Readable.from(buffer);\n      let isFirstRow = true;\n      \n      stream\n        .pipe(csv())\n        .on('data', (row: any) => {\n          try {\n            if (isFirstRow) {\n              headers = Object.keys(row);\n              isFirstRow = false;\n            }\n\n            // Clean and process all data\n            const cleanedRow: Record<string, any> = {};\n            for (const [key, value] of Object.entries(row)) {\n              cleanedRow[key] = FileProcessor.cleanAndTypeValue(value);\n            }\n\n            data.push(cleanedRow);\n          } catch (error) {\n            errors.push(`Error processing row: ${error}`);\n          }\n        })\n        .on('end', () => {\n          const detectedPrimaryKey = primaryKeyField || FileProcessor.detectPrimaryKey(headers);\n          const fileStructure = FileProcessor.analyzeFileStructure(headers, data, detectedPrimaryKey);\n          resolve({ data, fileStructure, errors });\n        })\n        .on('error', (error: any) => {\n          errors.push(`CSV parsing error: ${error}`);\n          resolve({ data, fileStructure: { columns: [], primaryKey: '', totalRows: 0, sampleData: [] }, errors });\n        });\n    });\n  }\n\n  // Utility methods for file analysis\n  static analyzeFileStructure(headers: string[], data: Record<string, any>[], primaryKey: string): FileStructure {\n    const columns: ColumnMetadata[] = headers.map(header => {\n      const sampleValues = data.slice(0, 100).map(row => row[header]).filter(val => val != null);\n      \n      let type: 'text' | 'number' | 'date' | 'boolean' = 'text';\n      \n      // Determine column type based on sample data\n      if (sampleValues.length > 0) {\n        const numericCount = sampleValues.filter(val => !isNaN(Number(val))).length;\n        const dateCount = sampleValues.filter(val => !isNaN(Date.parse(val))).length;\n        const booleanCount = sampleValues.filter(val => \n          typeof val === 'boolean' || val === 'true' || val === 'false'\n        ).length;\n\n        if (booleanCount / sampleValues.length > 0.8) {\n          type = 'boolean';\n        } else if (numericCount / sampleValues.length > 0.8) {\n          type = 'number';\n        } else if (dateCount / sampleValues.length > 0.8 && header.toLowerCase().includes('date')) {\n          type = 'date';\n        }\n      }\n\n      return {\n        name: header,\n        type,\n        required: sampleValues.length / data.length > 0.9, // Consider required if >90% have values\n        description: FileProcessor.generateColumnDescription(header, type),\n      };\n    });\n\n    return {\n      columns,\n      primaryKey,\n      totalRows: data.length,\n      sampleData: data.slice(0, 5), // First 5 rows as sample\n    };\n  }\n\n  static detectPrimaryKey(headers: string[]): string {\n    const primaryKeyPatterns = [\n      /^id$/i,\n      /sub.*order.*no/i,\n      /order.*id/i,\n      /sku$/i,\n      /product.*id/i,\n    ];\n\n    for (const pattern of primaryKeyPatterns) {\n      const match = headers.find(header => pattern.test(header));\n      if (match) return match;\n    }\n\n    // Default to first column if no pattern matches\n    return headers[0] || '';\n  }\n\n  static cleanAndTypeValue(value: any): any {\n    if (typeof value !== 'string') return value;\n    \n    const trimmed = value.trim();\n    \n    // Empty string\n    if (!trimmed) return '';\n    \n    // Boolean\n    if (trimmed.toLowerCase() === 'true') return true;\n    if (trimmed.toLowerCase() === 'false') return false;\n    \n    // Number (including currency)\n    const numberMatch = trimmed.match(/^[₹$€£]?([0-9,]+\\.?[0-9]*)$/);\n    if (numberMatch) {\n      const cleanNumber = numberMatch[1].replace(/,/g, '');\n      const parsed = parseFloat(cleanNumber);\n      if (!isNaN(parsed)) return parsed.toString();\n    }\n    \n    return trimmed;\n  }\n\n  // Helper method to map order status to payment status\n  static mapPaymentStatus(reasonForCredit: string): string {\n    if (!reasonForCredit) return 'PENDING';\n    \n    const status = reasonForCredit.toUpperCase();\n    switch (status) {\n      case 'DELIVERED':\n        return 'PAID';\n      case 'RTO_COMPLETE':\n      case 'RTO COMPLETE':\n        return 'REFUNDED';\n      case 'CANCELLED':\n      case 'CANCELED':\n        return 'CANCELLED';\n      case 'RTO_LOCKED':\n      case 'RTO LOCKED':\n        return 'PROCESSING';\n      case 'SHIPPED':\n      case 'OUT_FOR_DELIVERY':\n      case 'OUT FOR DELIVERY':\n        return 'PROCESSING';\n      case 'LOST':\n        return 'LOST';\n      default:\n        return 'PENDING';\n    }\n  }\n\n  // Helper method to check if payment is completed\n  static isPaymentCompleted(reasonForCredit: string): boolean {\n    if (!reasonForCredit) return false;\n    \n    const status = reasonForCredit.toUpperCase();\n    return ['DELIVERED', 'RTO_COMPLETE', 'RTO COMPLETE'].includes(status);\n  }\n\n  static generateColumnDescription(columnName: string, type: string): string {\n    const name = columnName.toLowerCase();\n    \n    if (name.includes('price') || name.includes('cost') || name.includes('amount')) {\n      return `${type === 'number' ? 'Numeric' : 'Text'} field for ${columnName}`;\n    }\n    if (name.includes('date') || name.includes('time')) {\n      return `Date/time field for ${columnName}`;\n    }\n    if (name.includes('id') || name.includes('no')) {\n      return `Identifier field for ${columnName}`;\n    }\n    if (name.includes('name') || name.includes('title')) {\n      return `Text field for ${columnName}`;\n    }\n    \n    return `${type.charAt(0).toUpperCase() + type.slice(1)} field for ${columnName}`;\n  }\n\n  // Legacy method for backward compatibility\n  static async extractProductsFromOrders(orders: InsertOrder[], defaultGstPercent: string = '18'): Promise<void> {\n    const uniqueProducts = new Map<string, any>();\n\n    orders.forEach(order => {\n      if (!uniqueProducts.has(order.sku)) {\n        // Try to extract GST from product information or use default\n        let gstPercent = defaultGstPercent;\n        \n        // Check if GST information is available in the order data\n        if ((order as any).gstPercent) {\n          gstPercent = (order as any).gstPercent;\n        }\n        \n        const productInfo = {\n          sku: order.sku,\n          title: order.productName,\n          costPrice: '0',\n          packagingCost: '15',\n          gstPercent: gstPercent,\n          totalOrders: 0,\n        };\n        \n        uniqueProducts.set(order.sku, productInfo);\n      }\n      uniqueProducts.get(order.sku)!.totalOrders += 1;\n    });\n\n    // Handle products with unique requirement and proper order count increments\n    const productList = Array.from(uniqueProducts.values());\n    const existingProducts = await storage.getAllProducts();\n    const existingSkusMap = new Map(existingProducts.map(p => [p.sku, p]));\n\n    // Prepare products for upsert with proper totalOrders handling\n    const productsToUpsert = productList.map(product => {\n      const existing = existingSkusMap.get(product.sku);\n      return {\n        ...product,\n        totalOrders: existing \n          ? (Number(existing.totalOrders) || 0) + product.totalOrders  // Increment existing count\n          : product.totalOrders  // New product, use current count\n      };\n    });\n    \n    if (productsToUpsert.length > 0) {\n      await storage.bulkUpsertProducts(productsToUpsert);\n      console.log(`Upserted ${productsToUpsert.length} products with incremental order counts (unique product requirement)`);\n    }\n  }\n}\n","size_bytes":24382},"server/services/firebase.ts":{"content":"import { initializeApp, cert, getApps } from 'firebase-admin/app';\nimport { getAuth } from 'firebase-admin/auth';\n\n// Embedded Firebase Admin Configuration for Meesho Payment Reconciliation\n// This credential is embedded directly for easy future usage and development  \nconst firebaseConfig = {\n  projectId: \"reconme-fbee1\",\n};\n\nif (getApps().length === 0) {\n  initializeApp(firebaseConfig);\n}\n\nexport const auth = getAuth();\n\nexport async function verifyFirebaseToken(idToken: string) {\n  try {\n    const decodedToken = await auth.verifyIdToken(idToken);\n    return {\n      uid: decodedToken.uid,\n      email: decodedToken.email,\n      name: decodedToken.name,\n      picture: decodedToken.picture,\n    };\n  } catch (error) {\n    console.error('Firebase token verification failed:', error);\n    throw new Error('Invalid Firebase token');\n  }\n}\n","size_bytes":844},"server/services/reconciliation.ts":{"content":"import { storage } from '../storage';\nimport { type InsertReconciliation } from '@shared/schema';\n\nexport class ReconciliationEngine {\n  static async runReconciliation(): Promise<{\n    processed: number;\n    reconciled: number;\n    mismatched: number;\n    unreconciled: number;\n  }> {\n    const orders = await storage.getAllOrders();\n    const payments = await storage.getAllPayments();\n    const products = await storage.getAllProducts();\n\n    // Create maps for quick lookup\n    const paymentMap = new Map();\n    payments.forEach(payment => {\n      if (!paymentMap.has(payment.subOrderNo)) {\n        paymentMap.set(payment.subOrderNo, []);\n      }\n      paymentMap.get(payment.subOrderNo).push(payment);\n    });\n\n    const productMap = new Map();\n    products.forEach(product => {\n      productMap.set(product.sku, product);\n    });\n\n    const reconciliations: InsertReconciliation[] = [];\n    let reconciledCount = 0;\n    let mismatchedCount = 0;\n    let unreconciledCount = 0;\n\n    for (const order of orders) {\n      const orderPayments = paymentMap.get(order.subOrderNo) || [];\n      const product = productMap.get(order.sku);\n\n      if (!product) {\n        console.warn(`Product not found for SKU: ${order.sku}`);\n        continue;\n      }\n\n      const orderValue = Number(order.discountedPrice) || 0;\n      const productCost = Number(product.costPrice) || 0;\n      const packagingCost = Number(product.packagingCost) || 0;\n\n      let status: string;\n      let settlementAmount = 0;\n      let adsCost = 0;\n\n      if (orderPayments.length > 0) {\n        const payment = orderPayments[0]; // Take first payment\n        settlementAmount = Number(payment.settlementAmount) || 0;\n        adsCost = Number(payment.adsFee) || 0;\n\n        // Determine status based on settlement\n        if (settlementAmount > 0) {\n          // Check for discrepancies (simple tolerance check)\n          const expectedSettlement = orderValue * 0.87; // Rough estimate after fees\n          const tolerance = 5.0; // ₹5 tolerance\n          \n          if (Math.abs(settlementAmount - expectedSettlement) <= tolerance) {\n            status = 'reconciled';\n            reconciledCount++;\n          } else {\n            status = 'mismatch';\n            mismatchedCount++;\n          }\n        } else {\n          status = 'unreconciled';\n          unreconciledCount++;\n        }\n      } else {\n        // No payment found\n        status = 'unreconciled';\n        unreconciledCount++;\n      }\n\n      const totalCost = productCost + packagingCost;\n      const grossProfit = settlementAmount - totalCost;\n      const netProfit = grossProfit - adsCost;\n\n      const reconciliation: InsertReconciliation = {\n        subOrderNo: order.subOrderNo,\n        orderId: order.id,\n        paymentId: orderPayments[0]?.id || null,\n        productId: product.id,\n        status,\n        orderValue: orderValue.toString(),\n        settlementAmount: settlementAmount.toString(),\n        productCost: productCost.toString(),\n        packagingCost: packagingCost.toString(),\n        adsCost: adsCost.toString(),\n        grossProfit: grossProfit.toString(),\n        netProfit: netProfit.toString(),\n      };\n\n      reconciliations.push(reconciliation);\n    }\n\n    // Clear existing reconciliations and create new ones\n    if (reconciliations.length > 0) {\n      await storage.bulkCreateReconciliations(reconciliations);\n    }\n\n    return {\n      processed: reconciliations.length,\n      reconciled: reconciledCount,\n      mismatched: mismatchedCount,\n      unreconciled: unreconciledCount,\n    };\n  }\n\n  static async calculateProfitLoss(subOrderNo: string): Promise<{\n    grossProfit: number;\n    netProfit: number;\n    profitMargin: number;\n  }> {\n    const reconciliation = await storage.getReconciliationBySubOrderNo(subOrderNo);\n    \n    if (!reconciliation) {\n      return { grossProfit: 0, netProfit: 0, profitMargin: 0 };\n    }\n\n    const grossProfit = Number(reconciliation.grossProfit) || 0;\n    const netProfit = Number(reconciliation.netProfit) || 0;\n    const orderValue = Number(reconciliation.orderValue) || 0;\n    const profitMargin = orderValue > 0 ? (netProfit / orderValue) * 100 : 0;\n\n    return {\n      grossProfit,\n      netProfit,\n      profitMargin,\n    };\n  }\n}\n","size_bytes":4242},"client/src/components/Header.tsx":{"content":"import { Link, useLocation } from 'wouter';\nimport { Button } from '@/components/ui/button';\nimport { MoreHorizontal, LayoutDashboard, Upload, FileText, Package, LogOut } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { logOut } from '@/lib/firebase';\n\nconst navigation = [\n  { name: 'Dashboard', href: '/', icon: LayoutDashboard },\n  { name: 'Orders', href: '/orders', icon: FileText },\n  { name: 'Products', href: '/products', icon: Package },\n  { name: 'Upload Files', href: '/upload', icon: Upload },\n];\n\ninterface HeaderProps {\n  title: string;\n  subtitle: string;\n}\n\nexport default function Header({ title, subtitle }: HeaderProps) {\n  const [location] = useLocation();\n  const { toast } = useToast();\n  const { user } = useAuth();\n\n\n  const handleLogout = async () => {\n    try {\n      await logOut();\n      toast({\n        title: \"Signed out successfully\",\n        description: \"You have been logged out of your account.\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Error signing out\",\n        description: \"There was a problem signing out. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const getInitials = (name?: string, email?: string) => {\n    if (name) {\n      return name.split(' ').map(n => n[0]).join('').toUpperCase();\n    }\n    if (email) {\n      return email.slice(0, 2).toUpperCase();\n    }\n    return 'U';\n  };\n\n  return (\n    <>\n      {/* Top Navigation Header */}\n      <nav className=\"bg-card border-b border-border px-6 py-3\" data-testid=\"top-nav\">\n        <div className=\"flex items-center justify-between\">\n          {/* Logo and Navigation */}\n          <div className=\"flex items-center gap-8\">\n            <div className=\"flex items-center gap-3\">\n              <div className=\"w-8 h-8 bg-primary rounded-md flex items-center justify-center\">\n                <span className=\"text-primary-foreground font-bold text-sm\">RM</span>\n              </div>\n              <h1 className=\"font-bold text-lg\">ReconMe</h1>\n            </div>\n            \n            {/* Navigation Links */}\n            <div className=\"flex items-center gap-6\">\n              {navigation.map((item) => {\n                const isActive = location === item.href || (item.href !== '/' && location.startsWith(item.href));\n                return (\n                  <Link key={item.name} href={item.href}>\n                    <div \n                      className={`flex items-center gap-2 px-3 py-2 rounded-md transition-colors text-sm font-medium cursor-pointer ${\n                        isActive \n                          ? 'bg-primary text-primary-foreground' \n                          : 'hover:bg-accent text-foreground'\n                      }`}\n                      data-testid={`nav-${item.name.toLowerCase().replace(' ', '-')}`}\n                    >\n                      <item.icon className=\"w-4 h-4\" />\n                      {item.name}\n                    </div>\n                  </Link>\n                );\n              })}\n            </div>\n          </div>\n\n          {/* User Profile */}\n          <div className=\"flex items-center\">\n            <button \n              onClick={handleLogout}\n              className=\"text-sm text-muted-foreground hover:text-foreground transition-colors flex items-center gap-3 px-3 py-2 rounded-md hover:bg-accent\"\n              data-testid=\"button-logout\"\n            >\n              <div className=\"w-8 h-8 bg-secondary rounded-full flex items-center justify-center\">\n                <span className=\"text-sm font-medium\" data-testid=\"user-initials\">\n                  {getInitials(user?.displayName, user?.email)}\n                </span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <span className=\"text-sm font-medium\" data-testid=\"user-name\">\n                  {user?.displayName || user?.email?.split('@')[0] || 'User'}\n                </span>\n                <LogOut className=\"w-4 h-4\" />\n              </div>\n            </button>\n          </div>\n        </div>\n      </nav>\n\n      {/* Page Header */}\n      <header className=\"bg-card border-b border-border px-6 py-4\" data-testid=\"header\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-2xl font-bold\" data-testid=\"page-title\">{title}</h1>\n            <p className=\"text-muted-foreground\" data-testid=\"page-subtitle\">{subtitle}</p>\n          </div>\n          <div className=\"flex items-center gap-4\">\n            <Button variant=\"ghost\" size=\"icon\" data-testid=\"button-menu\">\n              <MoreHorizontal className=\"w-5 h-5\" />\n            </Button>\n          </div>\n        </div>\n      </header>\n    </>\n  );\n}\n","size_bytes":4766},"client/src/components/ProtectedRoute.tsx":{"content":"import { useAuth } from '@/contexts/AuthContext';\nimport Login from '@/pages/Login';\n\ninterface ProtectedRouteProps {\n  children: React.ReactNode;\n}\n\nexport default function ProtectedRoute({ children }: ProtectedRouteProps) {\n  const { user, loading } = useAuth();\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  if (!user) {\n    return <Login />;\n  }\n\n  return <>{children}</>;\n}\n","size_bytes":555},"client/src/components/Sidebar.tsx":{"content":"import { Link, useLocation } from 'wouter';\nimport { \n  LayoutDashboard, \n  Upload, \n  FileText, \n  Package, \n  Calculator,\n  LogOut\n} from 'lucide-react';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { logOut } from '@/lib/firebase';\nimport { useToast } from '@/hooks/use-toast';\n\nconst navigation = [\n  { name: 'Dashboard', href: '/', icon: LayoutDashboard },\n  { name: 'Upload Files', href: '/upload', icon: Upload },\n  { name: 'Orders', href: '/orders', icon: FileText },\n  { name: 'Products', href: '/products', icon: Package },\n  { name: 'Reconciliation', href: '/reconciliation', icon: Calculator },\n];\n\nexport default function Sidebar() {\n  const [location] = useLocation();\n  const { user } = useAuth();\n  const { toast } = useToast();\n\n  const handleLogout = async () => {\n    try {\n      await logOut();\n      toast({\n        title: \"Signed out successfully\",\n        description: \"You have been logged out of your account.\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Error signing out\",\n        description: \"There was a problem signing out. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const getInitials = (name?: string, email?: string) => {\n    if (name) {\n      return name.split(' ').map(n => n[0]).join('').toUpperCase();\n    }\n    if (email) {\n      return email.slice(0, 2).toUpperCase();\n    }\n    return 'U';\n  };\n\n  return (\n    <div className=\"w-64 bg-card border-r border-border flex flex-col h-full\" data-testid=\"sidebar\">\n      {/* Logo */}\n      <div className=\"p-6 border-b border-border\">\n        <div className=\"flex items-center gap-3\">\n          <div className=\"w-8 h-8 bg-primary rounded-md flex items-center justify-center\">\n            <span className=\"text-primary-foreground font-bold text-sm\">RM</span>\n          </div>\n          <h1 className=\"font-bold text-lg\">ReconMe</h1>\n        </div>\n      </div>\n      \n      {/* Navigation */}\n      <nav className=\"flex-1 p-4\">\n        <ul className=\"space-y-2\">\n          {navigation.map((item) => {\n            const isActive = location === item.href || (item.href !== '/' && location.startsWith(item.href));\n            return (\n              <li key={item.name}>\n                <Link href={item.href}>\n                  <div \n                    className={`flex items-center gap-3 px-3 py-2 rounded-md transition-colors text-sm font-medium cursor-pointer ${\n                      isActive \n                        ? 'bg-primary text-primary-foreground' \n                        : 'hover:bg-accent text-foreground'\n                    }`}\n                    data-testid={`nav-${item.name.toLowerCase().replace(' ', '-')}`}\n                  >\n                    <item.icon className=\"w-5 h-5\" />\n                    {item.name}\n                  </div>\n                </Link>\n              </li>\n            );\n          })}\n        </ul>\n      </nav>\n      \n      {/* User Profile */}\n      <div className=\"p-4 border-t border-border\">\n        <div className=\"flex items-center gap-3 mb-3\">\n          <div className=\"w-8 h-8 bg-secondary rounded-full flex items-center justify-center\">\n            <span className=\"text-sm font-medium\" data-testid=\"user-initials\">\n              {getInitials(user?.displayName, user?.email)}\n            </span>\n          </div>\n          <div className=\"flex-1 min-w-0\">\n            <p className=\"text-sm font-medium truncate\" data-testid=\"user-name\">\n              {user?.displayName || user?.email?.split('@')[0] || 'User'}\n            </p>\n            <p className=\"text-xs text-muted-foreground truncate\" data-testid=\"user-email\">\n              {user?.email}\n            </p>\n          </div>\n        </div>\n        <button \n          onClick={handleLogout}\n          className=\"w-full text-left text-sm text-muted-foreground hover:text-foreground transition-colors flex items-center gap-2\"\n          data-testid=\"button-logout\"\n        >\n          <LogOut className=\"w-4 h-4\" />\n          Sign out\n        </button>\n      </div>\n    </div>\n  );\n}\n","size_bytes":4041},"client/src/contexts/AuthContext.tsx":{"content":"import React, { createContext, useContext, useEffect, useState } from 'react';\nimport { onAuthStateChanged, User as FirebaseUser } from 'firebase/auth';\nimport { auth } from '@/lib/firebase';\nimport { apiRequest } from '@/lib/queryClient';\n\ninterface User {\n  id: string;\n  firebaseUid: string;\n  email: string;\n  displayName?: string;\n  photoURL?: string;\n}\n\ninterface AuthContextType {\n  user: User | null;\n  firebaseUser: FirebaseUser | null;\n  loading: boolean;\n  token: string | null;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport function AuthProvider({ children }: { children: React.ReactNode }) {\n  const [user, setUser] = useState<User | null>(null);\n  const [firebaseUser, setFirebaseUser] = useState<FirebaseUser | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [token, setToken] = useState<string | null>(null);\n\n  useEffect(() => {\n    const unsubscribe = onAuthStateChanged(auth, async (firebaseUser) => {\n      if (firebaseUser) {\n        try {\n          const idToken = await firebaseUser.getIdToken();\n          setToken(idToken);\n          \n          // Verify token with backend and get/create user\n          const response = await apiRequest('POST', '/api/auth/verify', { idToken });\n          const data = await response.json();\n          \n          setUser(data.user);\n          setFirebaseUser(firebaseUser);\n        } catch (error) {\n          console.error('Auth verification failed:', error);\n          setUser(null);\n          setFirebaseUser(null);\n          setToken(null);\n        }\n      } else {\n        setUser(null);\n        setFirebaseUser(null);\n        setToken(null);\n      }\n      setLoading(false);\n    });\n\n    return () => unsubscribe();\n  }, []);\n\n  return (\n    <AuthContext.Provider value={{ user, firebaseUser, loading, token }}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n}\n","size_bytes":2085},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/firebase.ts":{"content":"import { initializeApp, getApps } from \"firebase/app\";\nimport { getAuth, signInWithRedirect, GoogleAuthProvider, getRedirectResult, signInWithEmailAndPassword, createUserWithEmailAndPassword, signOut } from \"firebase/auth\";\n\n// Embedded Firebase Configuration for Meesho Payment Reconciliation\n// These credentials are embedded directly for easy future usage and development\nconst firebaseConfig = {\n  apiKey: \"AIzaSyCLtVv-8X3mBfKeCkS_Q0nqk-7DoPfDo4c\",\n  authDomain: \"reconme-fbee1.firebaseapp.com\",\n  databaseURL: \"https://reconme-fbee1-default-rtdb.firebaseio.com\",\n  projectId: \"reconme-fbee1\",\n  storageBucket: \"reconme-fbee1.firebasestorage.app\",\n  messagingSenderId: \"511599323860\",\n  appId: \"1:511599323860:web:38ac9cf5e061ff350e2941\",\n};\n\n// Initialize Firebase only if no apps exist\nconst app = getApps().length === 0 ? initializeApp(firebaseConfig) : getApps()[0];\nexport const auth = getAuth(app);\n\n// Google Auth Provider\nconst googleProvider = new GoogleAuthProvider();\n\nexport const signInWithGoogle = () => {\n  return signInWithRedirect(auth, googleProvider);\n};\n\nexport const handleRedirectResult = () => {\n  return getRedirectResult(auth);\n};\n\nexport const signInWithEmail = (email: string, password: string) => {\n  return signInWithEmailAndPassword(auth, email, password);\n};\n\nexport const signUpWithEmail = (email: string, password: string) => {\n  return createUserWithEmailAndPassword(auth, email, password);\n};\n\nexport const logOut = () => {\n  return signOut(auth);\n};\n\nexport { auth as default };\n","size_bytes":1519},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n  token?: string | null,\n): Promise<Response> {\n  const headers: Record<string, string> = {};\n  \n  if (data) {\n    headers[\"Content-Type\"] = \"application/json\";\n  }\n  \n  if (token) {\n    headers[\"Authorization\"] = `Bearer ${token}`;\n  }\n\n  const res = await fetch(url, {\n    method,\n    headers,\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n  token?: string | null;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior, token }) =>\n  async ({ queryKey }) => {\n    const headers: Record<string, string> = {};\n    \n    if (token) {\n      headers[\"Authorization\"] = `Bearer ${token}`;\n    }\n\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      headers,\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1722},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/Dashboard.tsx":{"content":"import { useState } from 'react';\nimport { useAuthQuery } from '@/hooks/use-auth-query';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport Header from '@/components/Header';\nimport RevenueChart from '@/components/charts/RevenueChart';\nimport OrderStatusChart from '@/components/charts/OrderStatusChart';\nimport DailyVolumeChart from '@/components/charts/DailyVolumeChart';\nimport TopProductsChart from '@/components/charts/TopProductsChart';\nimport TopReturnsChart from '@/components/charts/TopReturnsChart';\nimport { useToast } from '@/hooks/use-toast';\nimport { queryClient } from '@/lib/queryClient';\nimport { \n  DollarSign, \n  TrendingUp, \n  ShoppingBag, \n  CheckCircle,\n  Clock,\n  FileText,\n  Package,\n  CreditCard,\n  PieChart,\n  BarChart3,\n  TrendingDown,\n  Activity,\n  BarChart,\n  Database,\n  Zap,\n  RefreshCw\n} from 'lucide-react';\n\nimport type { \n  ComprehensiveFinancialSummary, \n  SettlementComponentsData, \n  EarningsOverviewData, \n  OperationalCostsData,\n  OrdersOverview \n} from '@shared/schema';\n\nexport default function Dashboard() {\n  const [isRefreshing, setIsRefreshing] = useState(false);\n  const { toast } = useToast();\n  const { token } = useAuth();\n\n  const { data: summary, isLoading: summaryLoading } = useAuthQuery<ComprehensiveFinancialSummary>({\n    queryKey: ['/api/dashboard/comprehensive-summary'],\n  });\n\n  const { data: settlementComponents = [], isLoading: settlementLoading } = useAuthQuery<SettlementComponentsData[]>({\n    queryKey: ['/api/dashboard/settlement-components'],\n  });\n\n  const { data: earningsOverview = [], isLoading: earningsLoading } = useAuthQuery<EarningsOverviewData[]>({\n    queryKey: ['/api/dashboard/earnings-overview'],\n  });\n\n  const { data: operationalCosts = [], isLoading: costsLoading } = useAuthQuery<OperationalCostsData[]>({\n    queryKey: ['/api/dashboard/operational-costs'],\n  });\n\n  const { data: ordersOverview, isLoading: ordersOverviewLoading } = useAuthQuery<OrdersOverview>({\n    queryKey: ['/api/dashboard/orders-overview'],\n  });\n\n  const isLoading = summaryLoading || settlementLoading || earningsLoading || costsLoading || ordersOverviewLoading;\n\n  const handleRefreshData = async () => {\n    if (!token) {\n      toast({\n        title: \"Authentication Error\",\n        description: \"Please log in again to refresh data.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsRefreshing(true);\n    try {\n      // Call the recalculate API endpoint\n      const response = await fetch('/api/dashboard/recalculate', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`,\n        },\n      });\n\n      if (!response.ok) {\n        if (response.status === 401) {\n          toast({\n            title: \"Session Expired\",\n            description: \"Please log in again to refresh data.\",\n            variant: \"destructive\",\n          });\n          // Handle auth failure - could add logout logic here if needed\n          return;\n        }\n        throw new Error('Failed to refresh data');\n      }\n\n      // Invalidate all dashboard queries to force refetch\n      await queryClient.invalidateQueries({ \n        predicate: (query) => \n          typeof query.queryKey[0] === 'string' && \n          query.queryKey[0].startsWith('/api/dashboard')\n      });\n\n      toast({\n        title: \"Data Refreshed\",\n        description: \"Dashboard data has been updated with the latest processed files.\",\n      });\n    } catch (error) {\n      console.error('Refresh error:', error);\n      toast({\n        title: \"Refresh Failed\", \n        description: \"Failed to refresh dashboard data. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsRefreshing(false);\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex flex-col bg-gradient-to-br from-slate-50 via-blue-50/30 to-slate-100\">\n        <Header title=\"Dashboard\" subtitle=\"Financial Analytics & Insights\" />\n        <div className=\"flex-1 p-6\">\n          <div className=\"space-y-6\">\n            {/* Loading Financial Summary */}\n            <div className=\"grid lg:grid-cols-2 gap-6\">\n              {[1, 2].map((i) => (\n                <Card key={i} className=\"modern-card animate-pulse\">\n                  <CardHeader className=\"pb-4\">\n                    <div className=\"flex items-center gap-3\">\n                      <div className=\"w-10 h-10 bg-slate-200 rounded-lg animate-shimmer\"></div>\n                      <div className=\"flex-1\">\n                        <div className=\"h-5 bg-slate-200 rounded w-3/4 mb-2 animate-shimmer\"></div>\n                        <div className=\"h-3 bg-slate-200 rounded w-1/2 animate-shimmer\"></div>\n                      </div>\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-4\">\n                      {[...Array(3)].map((_, j) => (\n                        <div key={j} className=\"space-y-2\">\n                          <div className=\"h-3 bg-slate-200 rounded w-1/4 animate-shimmer\"></div>\n                          <div className=\"grid grid-cols-2 gap-3\">\n                            <div className=\"h-16 bg-slate-200 rounded-xl animate-shimmer\"></div>\n                            <div className=\"h-16 bg-slate-200 rounded-xl animate-shimmer\"></div>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n            \n            {/* Loading Chart */}\n            <Card className=\"modern-card animate-pulse\">\n              <CardHeader className=\"pb-6\">\n                <div className=\"flex items-center gap-3\">\n                  <div className=\"w-10 h-10 bg-slate-200 rounded-lg animate-shimmer\"></div>\n                  <div className=\"flex-1\">\n                    <div className=\"h-5 bg-slate-200 rounded w-1/2 mb-2 animate-shimmer\"></div>\n                    <div className=\"h-3 bg-slate-200 rounded w-1/3 animate-shimmer\"></div>\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"h-80 bg-slate-200 rounded-xl animate-shimmer\"></div>\n              </CardContent>\n            </Card>\n            \n            {/* Loading Cards Grid */}\n            <div className=\"grid lg:grid-cols-3 gap-6\">\n              {[...Array(3)].map((_, i) => (\n                <Card key={i} className=\"modern-card animate-pulse\">\n                  <CardHeader className=\"pb-4\">\n                    <div className=\"flex items-center gap-3\">\n                      <div className=\"w-8 h-8 bg-slate-200 rounded-lg animate-shimmer\"></div>\n                      <div className=\"flex-1\">\n                        <div className=\"h-4 bg-slate-200 rounded w-3/4 mb-1 animate-shimmer\"></div>\n                        <div className=\"h-3 bg-slate-200 rounded w-1/2 animate-shimmer\"></div>\n                      </div>\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-3\">\n                      {[...Array(4)].map((_, j) => (\n                        <div key={j} className=\"flex justify-between items-center\">\n                          <div className=\"h-3 bg-slate-200 rounded w-1/3 animate-shimmer\"></div>\n                          <div className=\"h-4 bg-slate-200 rounded w-1/4 animate-shimmer\"></div>\n                        </div>\n                      ))}\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  const summaryData = summary || {\n    totalSaleAmount: 0,\n    settlementAmount: 0,\n    totalPurchaseCost: 0,\n    totalPackagingCost: 0,\n    shippingCost: 0,\n    totalTds: 0,\n    netProfit: 0,\n    totalOrders: 0,\n    delivered: 0,\n    shipped: 0,\n    exchanged: 0,\n    cancelled: 0,\n    returns: 0,\n    avgOrderValue: 0,\n    returnRate: 0,\n    ordersAwaitingPaymentRecord: 0,\n  };\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-IN', {\n      style: 'currency',\n      currency: 'INR',\n      maximumFractionDigits: 0,\n    }).format(amount);\n  };\n\n  const formatPercentage = (value: number) => {\n    return `${value.toFixed(1)}%`;\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status.toLowerCase()) {\n      case 'delivered': return 'text-green-600';\n      case 'shipped': return 'text-blue-600';\n      case 'cancelled': return 'text-red-600';\n      case 'exchanged': return 'text-yellow-600';\n      default: return 'text-muted-foreground';\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex flex-col bg-gradient-to-br from-slate-50 via-blue-50/30 to-slate-100\">\n      <Header title=\"Dashboard\" subtitle=\"Financial Analytics & Insights\" />\n      \n      {/* Refresh Button Section */}\n      <div className=\"px-6 py-4 border-b border-border/50 bg-white/50 backdrop-blur-sm\">\n        <div className=\"flex justify-between items-center\">\n          <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n            <Database className=\"w-4 h-4\" />\n            <span>Data from processed files (Orders CSV + Payment ZIP)</span>\n          </div>\n          <Button \n            onClick={handleRefreshData} \n            disabled={isRefreshing}\n            variant=\"outline\" \n            size=\"sm\"\n            className=\"flex items-center gap-2 hover:bg-primary hover:text-primary-foreground transition-colors\"\n            data-testid=\"button-refresh-dashboard\"\n          >\n            <RefreshCw className={`w-4 h-4 ${isRefreshing ? 'animate-spin' : ''}`} />\n            {isRefreshing ? 'Refreshing...' : 'Refresh Data'}\n          </Button>\n        </div>\n      </div>\n      \n      <div className=\"flex-1 p-6\">\n        <div className=\"space-y-6\">\n        {/* Top Row - Overall Financial Summary & Orders Overview */}\n        <div className=\"grid responsive-grid lg:grid-cols-2 gap-6 animate-fadeIn\">\n          {/* Overall Financial Summary - Optimized */}\n          <Card className=\"modern-card hover-lift animate-slideInUp group\" style={{\"--stagger\": 1} as any}>\n            <CardHeader className=\"pb-4\">\n              <CardTitle className=\"text-xl font-bold flex items-center justify-between\">\n                <div className=\"flex items-center gap-3\">\n                  <div className=\"p-2 rounded-lg bg-green-100 text-green-600\">\n                    <DollarSign className=\"w-6 h-6\" />\n                  </div>\n                  <span>Financial Summary</span>\n                </div>\n                <div className=\"text-right\">\n                  <p className=\"text-sm text-muted-foreground font-normal\">Net Profit</p>\n                  <p className=\"text-2xl font-bold text-green-600\">{formatCurrency(summaryData.netProfit)}</p>\n                </div>\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              {/* Revenue Section */}\n              <div className=\"space-y-3\">\n                <h4 className=\"text-sm font-semibold text-muted-foreground uppercase tracking-wider\">Revenue</h4>\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"p-3 rounded-xl bg-green-50 border border-green-100 hover:bg-green-100 transition-colors\">\n                    <p className=\"text-xs text-green-700 font-medium\">Total Sales</p>\n                    <p className=\"text-lg font-bold text-green-600\">{formatCurrency(summaryData.totalSaleAmount)}</p>\n                  </div>\n                  <div className=\"p-3 rounded-xl bg-blue-50 border border-blue-100 hover:bg-blue-100 transition-colors\">\n                    <p className=\"text-xs text-blue-700 font-medium\">Settlement</p>\n                    <p className=\"text-lg font-bold text-blue-600\">{formatCurrency(summaryData.settlementAmount)}</p>\n                  </div>\n                </div>\n              </div>\n              \n              {/* Costs Section */}\n              <div className=\"space-y-3\">\n                <h4 className=\"text-sm font-semibold text-muted-foreground uppercase tracking-wider\">Costs</h4>\n                <div className=\"grid grid-cols-2 gap-3\">\n                  <div className=\"flex justify-between items-center py-2 px-3 rounded-lg hover:bg-slate-50 transition-colors\">\n                    <span className=\"text-xs text-muted-foreground\">Purchase</span>\n                    <span className=\"text-sm font-semibold text-orange-600\">{formatCurrency(summaryData.totalPurchaseCost)}</span>\n                  </div>\n                  <div className=\"flex justify-between items-center py-2 px-3 rounded-lg hover:bg-slate-50 transition-colors\">\n                    <span className=\"text-xs text-muted-foreground\">Packaging</span>\n                    <span className=\"text-sm font-semibold text-purple-600\">{formatCurrency(summaryData.totalPackagingCost)}</span>\n                  </div>\n                  <div className=\"flex justify-between items-center py-2 px-3 rounded-lg hover:bg-slate-50 transition-colors\">\n                    <span className=\"text-xs text-muted-foreground\">Shipping</span>\n                    <span className=\"text-sm font-semibold text-indigo-600\">{formatCurrency(summaryData.shippingCost)}</span>\n                  </div>\n                  <div className=\"flex justify-between items-center py-2 px-3 rounded-lg hover:bg-slate-50 transition-colors\">\n                    <span className=\"text-xs text-muted-foreground\">TDS</span>\n                    <span className=\"text-sm font-semibold text-red-600\">{formatCurrency(summaryData.totalTds)}</span>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Orders Overview - New 9 Metrics */}\n          <Card className=\"modern-card hover-lift animate-slideInUp group\" style={{\"--stagger\": 2} as any}>\n            <CardHeader className=\"pb-4\">\n              <CardTitle className=\"text-xl font-bold flex items-center justify-between\">\n                <div className=\"flex items-center gap-3\">\n                  <div className=\"p-2 rounded-lg bg-blue-100 text-blue-600\">\n                    <ShoppingBag className=\"w-6 h-6\" />\n                  </div>\n                  <span>Orders Overview</span>\n                </div>\n                <div className=\"text-right\">\n                  <p className=\"text-sm text-muted-foreground font-normal\">Delivered Orders</p>\n                  <p className=\"text-2xl font-bold text-blue-600\">{(ordersOverview?.delivered ?? 0).toLocaleString()}</p>\n                </div>\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              {/* Primary Order Status Metrics */}\n              <div className=\"space-y-3\">\n                <h4 className=\"text-sm font-semibold text-muted-foreground uppercase tracking-wider\">Order Status Metrics</h4>\n                <div className=\"grid grid-cols-2 gap-3\">\n                  <div className=\"p-3 rounded-xl bg-blue-50 border border-blue-100 hover:scale-105 transition-transform cursor-pointer\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"text-xs text-blue-700 font-medium\">Shipped</p>\n                        <p className=\"text-lg font-bold text-blue-600\">{(ordersOverview?.shipped ?? 0).toLocaleString()}</p>\n                      </div>\n                      <div className=\"w-2 h-2 rounded-full bg-blue-500\"></div>\n                    </div>\n                  </div>\n                  <div className=\"p-3 rounded-xl bg-yellow-50 border border-yellow-100 hover:scale-105 transition-transform cursor-pointer\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"text-xs text-yellow-700 font-medium\">Ready To Ship</p>\n                        <p className=\"text-lg font-bold text-yellow-600\">{(ordersOverview?.readyToShip ?? 0).toLocaleString()}</p>\n                      </div>\n                      <div className=\"w-2 h-2 rounded-full bg-yellow-500\"></div>\n                    </div>\n                  </div>\n                  <div className=\"p-3 rounded-xl bg-red-50 border border-red-100 hover:scale-105 transition-transform cursor-pointer\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"text-xs text-red-700 font-medium\">Cancelled</p>\n                        <p className=\"text-lg font-bold text-red-600\">{(ordersOverview?.cancelled ?? 0).toLocaleString()}</p>\n                      </div>\n                      <div className=\"w-2 h-2 rounded-full bg-red-500\"></div>\n                    </div>\n                  </div>\n                  <div className=\"p-3 rounded-xl bg-purple-50 border border-purple-100 hover:scale-105 transition-transform cursor-pointer\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"text-xs text-purple-700 font-medium\">Exchanged</p>\n                        <p className=\"text-lg font-bold text-purple-600\">{(ordersOverview?.exchanged ?? 0).toLocaleString()}</p>\n                      </div>\n                      <div className=\"w-2 h-2 rounded-full bg-purple-500\"></div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              \n              {/* Key Order Metrics */}\n              <div className=\"space-y-3\">\n                <h4 className=\"text-sm font-semibold text-muted-foreground uppercase tracking-wider\">Key Order Metrics</h4>\n                <div className=\"grid grid-cols-1 gap-2\">\n                  <div className=\"flex justify-between items-center py-2 px-3 bg-gradient-to-r from-slate-50 to-slate-100 rounded-lg hover:from-slate-100 hover:to-slate-150 transition-all\">\n                    <span className=\"text-sm font-medium\">Avg. Order Value</span>\n                    <span className=\"text-base font-bold\">{formatCurrency(ordersOverview?.avgOrderValue ?? 0)}</span>\n                  </div>\n                  <div className=\"flex justify-between items-center py-2 px-3 bg-gradient-to-r from-red-50 to-orange-50 rounded-lg hover:from-red-100 hover:to-orange-100 transition-all\">\n                    <span className=\"text-sm font-medium\">Return Rate</span>\n                    <span className=\"text-base font-bold text-red-600\">{formatPercentage(ordersOverview?.returnRate ?? 0)}</span>\n                  </div>\n                  <div className=\"flex justify-between items-center py-2 px-3 bg-gradient-to-r from-orange-50 to-red-50 rounded-lg hover:from-orange-100 hover:to-red-100 transition-all\">\n                    <span className=\"text-sm font-medium\">RTO (RTO Complete + Locked)</span>\n                    <span className=\"text-base font-bold text-orange-600\">{(ordersOverview?.rto ?? 0).toLocaleString()}</span>\n                  </div>\n                  <div className=\"flex justify-between items-center py-2 px-3 bg-gradient-to-r from-yellow-50 to-amber-50 rounded-lg hover:from-yellow-100 hover:to-amber-100 transition-all\">\n                    <span className=\"text-sm font-medium\">Awaiting Payment Orders</span>\n                    <span className=\"text-base font-bold text-yellow-600\">{(ordersOverview?.awaitingPaymentOrders ?? 0).toLocaleString()}</span>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Revenue and Orders Trend - Optimized */}\n        <Card className=\"modern-card hover-lift animate-scaleIn\" style={{\"--stagger\": 3} as any}>\n          <CardHeader className=\"pb-6\">\n            <CardTitle className=\"text-xl font-bold flex items-center justify-between\">\n              <div className=\"flex items-center gap-3\">\n                <div className=\"p-2 rounded-lg bg-indigo-100 text-indigo-600\">\n                  <TrendingUp className=\"w-6 h-6\" />\n                </div>\n                <div>\n                  <span>Revenue & Orders Trend</span>\n                  <p className=\"text-sm text-muted-foreground font-normal mt-1\">Daily performance overview</p>\n                </div>\n              </div>\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"px-6 pb-6\">\n            <div className=\"bg-gradient-to-br from-slate-50 to-white p-4 rounded-xl border border-slate-100\">\n              <RevenueChart />\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Middle Row - Financial Components - Optimized */}\n        <div className=\"grid responsive-grid lg:grid-cols-3 gap-6 animate-fadeIn\" style={{\"--stagger\": 4} as any}>\n          {/* Settlement Components Breakdown */}\n          <Card className=\"modern-card hover-lift group\">\n            <CardHeader className=\"pb-4\">\n              <CardTitle className=\"text-lg font-bold flex items-center gap-3\">\n                <div className=\"p-2 rounded-lg bg-emerald-100 text-emerald-600\">\n                  <CreditCard className=\"w-5 h-5\" />\n                </div>\n                <div>\n                  <span>Settlement Breakdown</span>\n                  <p className=\"text-sm text-muted-foreground font-normal\">Component analysis</p>\n                </div>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-2\">\n                {settlementComponents.map((component, index) => (\n                  <div key={index} className=\"group/item flex justify-between items-center py-3 px-4 rounded-lg hover:bg-slate-50 transition-all cursor-pointer\" style={{\"--stagger\": index + 1} as any}>\n                    <span className=\"text-sm font-medium group-hover/item:font-semibold transition-all\">{component.component}</span>\n                    <span className=\"text-sm font-bold text-emerald-600 group-hover/item:text-emerald-700 transition-all\">{formatCurrency(component.totalAmount)}</span>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Earnings Overview */}\n          <Card className=\"modern-card hover-lift group\">\n            <CardHeader className=\"pb-4\">\n              <CardTitle className=\"text-lg font-bold flex items-center gap-3\">\n                <div className=\"p-2 rounded-lg bg-purple-100 text-purple-600\">\n                  <PieChart className=\"w-5 h-5\" />\n                </div>\n                <div>\n                  <span>Earnings Overview</span>\n                  <p className=\"text-sm text-muted-foreground font-normal\">Profit & loss summary</p>\n                </div>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-2\">\n                {earningsOverview.map((earning, index) => (\n                  <div key={index} className=\"group/item flex justify-between items-center py-3 px-4 rounded-lg hover:bg-slate-50 transition-all cursor-pointer\">\n                    <span className=\"text-sm font-medium group-hover/item:font-semibold transition-all\">{earning.description}</span>\n                    <span className={`text-sm font-bold group-hover/item:scale-105 transition-transform ${\n                      earning.amount >= 0 \n                        ? 'text-green-600 group-hover/item:text-green-700' \n                        : 'text-red-600 group-hover/item:text-red-700'\n                    }`}>\n                      {formatCurrency(earning.amount)}\n                    </span>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Order Status Overview */}\n          <Card className=\"modern-card\">\n            <CardHeader>\n              <CardTitle className=\"text-lg font-semibold flex items-center gap-2\">\n                <Package className=\"w-5 h-5\" />\n                Order Status Overview\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <OrderStatusChart />\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Operational Costs & Daily Volume */}\n        <div className=\"grid responsive-grid lg:grid-cols-2 gap-6 animate-fadeIn\" style={{\"--stagger\": 6} as any}>\n          {/* Operational Costs & Recoveries */}\n          <Card className=\"modern-card\">\n            <CardHeader>\n              <CardTitle className=\"text-lg font-semibold flex items-center gap-2\">\n                <TrendingDown className=\"w-5 h-5\" />\n                Operational Costs & Recoveries\n                <span className=\"text-sm text-muted-foreground ml-2\">(Metrics from the payment files (e.g., commission fees, claims))</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                {operationalCosts.map((cost, index) => (\n                  <div key={index} className=\"flex justify-between items-center py-2 border-b border-border last:border-0\">\n                    <span className=\"text-sm font-medium\">{cost.type}</span>\n                    <span className=\"text-sm font-bold text-red-600\">{formatCurrency(cost.amount)}</span>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Daily Order Volume & AOV */}\n          <Card className=\"modern-card\">\n            <CardHeader>\n              <CardTitle className=\"text-lg font-semibold flex items-center gap-2\">\n                <BarChart3 className=\"w-5 h-5\" />\n                Daily Order Volume & AOV\n                <span className=\"text-sm text-muted-foreground ml-2\">(Daily order count and average order value)</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <DailyVolumeChart />\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Bottom Row - Top Products Analytics */}\n        <div className=\"grid responsive-grid lg:grid-cols-2 gap-6 animate-fadeIn\" style={{\"--stagger\": 8} as any}>\n          {/* Top 10 Performing Products */}\n          <Card className=\"modern-card\">\n            <CardHeader>\n              <CardTitle className=\"text-lg font-semibold flex items-center gap-2\">\n                <TrendingUp className=\"w-5 h-5\" />\n                Top 10 Performing Products (by SKU)\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <TopProductsChart />\n            </CardContent>\n          </Card>\n\n          {/* Top 10 SKUs by Combined Returns/RTOs */}\n          <Card className=\"modern-card\">\n            <CardHeader>\n              <CardTitle className=\"text-lg font-semibold flex items-center gap-2\">\n                <TrendingDown className=\"w-5 h-5\" />\n                Top 10 SKUs by Combined Returns/RTOs\n                <span className=\"text-sm text-muted-foreground ml-2\">(SKUs with highest quantity of returns or RTOs)</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <TopReturnsChart />\n            </CardContent>\n          </Card>\n        </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":27522},"client/src/pages/Login.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { useLocation } from 'wouter';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\nimport { signInWithEmail, signInWithGoogle, handleRedirectResult } from '@/lib/firebase';\nimport { useToast } from '@/hooks/use-toast';\nimport { useAuth } from '@/contexts/AuthContext';\n\nconst loginSchema = z.object({\n  email: z.string().email('Please enter a valid email address'),\n  password: z.string().min(6, 'Password must be at least 6 characters'),\n});\n\ntype LoginForm = z.infer<typeof loginSchema>;\n\nexport default function Login() {\n  const [isLoading, setIsLoading] = useState(false);\n  const [, setLocation] = useLocation();\n  const { user } = useAuth();\n  const { toast } = useToast();\n\n  const form = useForm<LoginForm>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      email: '',\n      password: '',\n    },\n  });\n\n  // Redirect to dashboard if user is authenticated\n  useEffect(() => {\n    if (user) {\n      setLocation('/');\n    }\n  }, [user, setLocation]);\n\n  // Handle redirect result on component mount\n  useEffect(() => {\n    handleRedirectResult()\n      .then((result) => {\n        if (result?.user) {\n          toast({\n            title: \"Welcome back!\",\n            description: \"You have been signed in successfully.\",\n          });\n        }\n      })\n      .catch((error) => {\n        toast({\n          title: \"Sign in failed\",\n          description: error.message,\n          variant: \"destructive\",\n        });\n      });\n  }, [toast]);\n\n  const onSubmit = async (data: LoginForm) => {\n    setIsLoading(true);\n    try {\n      await signInWithEmail(data.email, data.password);\n      toast({\n        title: \"Welcome back!\",\n        description: \"You have been signed in successfully.\",\n      });\n    } catch (error: any) {\n      toast({\n        title: \"Sign in failed\",\n        description: error.message || \"Please check your credentials and try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleGoogleSignIn = async () => {\n    try {\n      await signInWithGoogle();\n      // Redirect will be handled by useEffect above\n    } catch (error: any) {\n      toast({\n        title: \"Sign in failed\", \n        description: error.message || \"Google sign in failed. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-primary/10 to-accent/20 flex items-center justify-center p-4\">\n      <div className=\"w-full max-w-md\">\n        <div className=\"text-center mb-8\">\n          <h1 className=\"text-3xl font-bold text-primary mb-2\">ReconMe</h1>\n          <p className=\"text-muted-foreground\">Payment Reconciliation Platform</p>\n        </div>\n        \n        <Card className=\"shadow-lg\">\n          <CardContent className=\"p-8\">\n            <h2 className=\"text-2xl font-semibold text-center mb-6\">Welcome Back</h2>\n            \n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"email\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Email</FormLabel>\n                      <FormControl>\n                        <Input \n                          type=\"email\" \n                          placeholder=\"Enter your email\" \n                          {...field}\n                          data-testid=\"input-email\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={form.control}\n                  name=\"password\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Password</FormLabel>\n                      <FormControl>\n                        <Input \n                          type=\"password\" \n                          placeholder=\"Enter your password\" \n                          {...field}\n                          data-testid=\"input-password\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <Button \n                  type=\"submit\" \n                  className=\"w-full\" \n                  disabled={isLoading}\n                  data-testid=\"button-signin\"\n                >\n                  {isLoading ? 'Signing in...' : 'Sign In'}\n                </Button>\n              </form>\n            </Form>\n            \n            <div className=\"mt-6\">\n              <div className=\"relative\">\n                <div className=\"absolute inset-0 flex items-center\">\n                  <div className=\"w-full border-t border-border\"></div>\n                </div>\n                <div className=\"relative flex justify-center text-sm\">\n                  <span className=\"px-2 bg-card text-muted-foreground\">Or continue with</span>\n                </div>\n              </div>\n              \n              <Button \n                variant=\"outline\" \n                className=\"w-full mt-4\" \n                onClick={handleGoogleSignIn}\n                data-testid=\"button-google-signin\"\n              >\n                <svg className=\"w-5 h-5 mr-2\" viewBox=\"0 0 24 24\">\n                  <path fill=\"currentColor\" d=\"M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z\"/>\n                  <path fill=\"currentColor\" d=\"M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z\"/>\n                  <path fill=\"currentColor\" d=\"M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z\"/>\n                  <path fill=\"currentColor\" d=\"M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z\"/>\n                </svg>\n                Sign in with Google\n              </Button>\n            </div>\n            \n            <p className=\"text-center text-sm text-muted-foreground mt-6\">\n              Don't have an account? <a href=\"#\" className=\"text-primary hover:underline\">Sign up</a>\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":6920},"client/src/pages/Orders.tsx":{"content":"import { useState } from 'react';\nimport { useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Badge } from '@/components/ui/badge';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport Header from '@/components/Header';\nimport { Search, Filter, Download } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\nimport { useAuthQuery, useAuthApiRequest } from '@/hooks/use-auth-query';\nimport { useAuth } from '@/contexts/AuthContext';\n\ninterface OrderFilters {\n  subOrderNo: string;\n  status: string;\n  paymentStatus: string;\n  dateFrom: string;\n  dateTo: string;\n  [key: string]: string; // Add index signature to satisfy URLSearchParams\n}\n\nexport default function Orders() {\n  const [filters, setFilters] = useState<OrderFilters>({\n    subOrderNo: '',\n    status: '',\n    paymentStatus: '',\n    dateFrom: '',\n    dateTo: '',\n  });\n  const [handleDuplicates, setHandleDuplicates] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: orders, isLoading } = useAuthQuery<any[]>({\n    queryKey: ['/api/orders-dynamic', Object.keys(filters).length > 0 ? `?${new URLSearchParams(filters as Record<string, string>).toString()}` : ''],\n  });\n\n  const apiRequest = useAuthApiRequest();\n  \n\n  const handleApplyFilters = () => {\n    queryClient.invalidateQueries({ queryKey: ['/api/orders-dynamic'] });\n  };\n\n  const handleClearFilters = () => {\n    setFilters({\n      subOrderNo: '',\n      status: '',\n      paymentStatus: '',\n      dateFrom: '',\n      dateTo: '',\n    });\n    queryClient.invalidateQueries({ queryKey: ['/api/orders-dynamic'] });\n  };\n\n  const handleExportOrders = () => {\n    const params = new URLSearchParams(filters as Record<string, string>);\n    window.open(`/api/export/orders?${params}`, '_blank');\n  };\n\n  const getStatusBadge = (status: string) => {\n    switch (status.toUpperCase()) {\n      case 'DELIVERED':\n        return <Badge className=\"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200\">DELIVERED</Badge>;\n      case 'RTO_COMPLETE':\n      case 'RTO COMPLETE':\n        return <Badge className=\"bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200\">RTO COMPLETE</Badge>;\n      case 'CANCELLED':\n      case 'CANCELED':\n        return <Badge className=\"bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-200\">CANCELLED</Badge>;\n      case 'RTO_LOCKED':\n      case 'RTO LOCKED':\n        return <Badge className=\"bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200\">RTO LOCKED</Badge>;\n      case 'SHIPPED':\n      case 'IN_TRANSIT':\n      case 'IN TRANSIT':\n        return <Badge className=\"bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200\">SHIPPED</Badge>;\n      case 'OUT_FOR_DELIVERY':\n      case 'OUT FOR DELIVERY':\n        return <Badge className=\"bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-200\">OUT FOR DELIVERY</Badge>;\n      case 'RETURN':\n      case 'RETURNED':\n        return <Badge className=\"bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-200\">RETURNED</Badge>;\n      default:\n        return <Badge variant=\"secondary\">{status}</Badge>;\n    }\n  };\n\n  const getPaymentStatusBadge = (paymentStatus?: string, hasPayment?: boolean, settlementAmount?: number, paymentDate?: string, orderStatus?: string) => {\n    // Enhanced logic based on actual payment data instead of just order status\n    \n    // 1. If we have actual payment/settlement data, use that\n    if (hasPayment && typeof settlementAmount === 'number' && isFinite(settlementAmount)) {\n      if (settlementAmount > 0) {\n        return <Badge className=\"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200\">Paid</Badge>;\n      } else if (settlementAmount === 0) {\n        // Zero settlement could be RTO with full refund or cancelled with no charge\n        return <Badge className=\"bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200\">Refunded</Badge>;\n      } else {\n        // Negative settlement (rare case)\n        return <Badge className=\"bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200\">Refunded</Badge>;\n      }\n    }\n    \n    // 2. If payment date exists but no settlement amount, it's processing\n    if (paymentDate && hasPayment) {\n      return <Badge className=\"bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200\">Processing</Badge>;\n    }\n    \n    // 3. Use enhanced payment status from orders table if available\n    if (paymentStatus) {\n      switch (paymentStatus.toUpperCase()) {\n        case 'PAID':\n          return <Badge className=\"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200\">Paid</Badge>;\n        case 'REFUNDED':\n          return <Badge className=\"bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200\">Refunded</Badge>;\n        case 'CANCELLED':\n          return <Badge className=\"bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-200\">Cancelled</Badge>;\n        case 'PROCESSING':\n          return <Badge className=\"bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200\">Processing</Badge>;\n        case 'LOST':\n          return <Badge className=\"bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200\">Lost</Badge>;\n        default:\n          return <Badge className=\"bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-200\">Pending</Badge>;\n      }\n    }\n    \n    // 4. Fallback: No payment data available\n    return <Badge className=\"bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-200\">Pending</Badge>;\n  };\n\n  const formatCurrency = (amount: string | number) => {\n    const formatted = new Intl.NumberFormat('en-IN', {\n      style: 'currency',\n      currency: 'INR',\n    }).format(Number(amount));\n    // Ensure single line display by replacing any line breaks\n    return formatted.replace(/\\s*\\n\\s*/g, ' ');\n  };\n\n  const calculateGrossProfitLoss = (settlementAmount?: number, costPrice?: number, packagingCost?: number, quantity = 1, orderStatus?: string) => {\n    // Calculate if we have finite settlement data from payment file (including 0 and negative)\n    if (typeof settlementAmount !== 'number' || !isFinite(settlementAmount)) {\n      return {\n        amount: null,\n        isProfit: null,\n        formatted: '-',\n        note: 'No settlement data'\n      };\n    }\n\n    // Check if order status is RTO or RETURNED - exclude product cost for these statuses\n    const isRtoOrReturned = orderStatus && (\n      orderStatus.toUpperCase() === 'RTO_COMPLETE' ||\n      orderStatus.toUpperCase() === 'RTO COMPLETE' ||\n      orderStatus.toUpperCase() === 'RETURN' ||\n      orderStatus.toUpperCase() === 'RETURNED'\n    );\n\n    // Ecommerce Gross P/L = Revenue (Settlement) - COGS (Cost of Goods Sold)\n    // For RTO/RETURNED orders: Only include packaging cost, exclude product cost\n    // For normal orders: Include both product cost and packaging cost\n    const totalCOGS = isRtoOrReturned \n      ? (packagingCost || 0) * quantity  // Only packaging cost for RTO/RETURNED\n      : ((costPrice || 0) + (packagingCost || 0)) * quantity;  // Full COGS for others\n    \n    const grossPL = settlementAmount - totalCOGS;\n    \n    return {\n      amount: grossPL,\n      isProfit: grossPL >= 0,\n      formatted: formatCurrency(grossPL),\n      note: totalCOGS > 0 ? null : isRtoOrReturned ? 'RTO/Return - Cost excluded' : 'No cost data'\n    };\n  };\n\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <Header title=\"Orders Management\" subtitle=\"View and manage your orders data\" />\n      \n      <div className=\"flex-1 p-6\">\n        {/* Filters Section */}\n        <Card className=\"shadow-sm mb-6\">\n          <CardContent className=\"p-6\">\n            <h3 className=\"text-lg font-semibold mb-4 flex items-center gap-2\">\n              <Filter className=\"w-5 h-5\" />\n              Filters\n            </h3>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n              <div>\n                <Label htmlFor=\"sub-order-id\">Sub Order ID</Label>\n                <Input\n                  id=\"sub-order-id\"\n                  placeholder=\"Search sub order ID...\"\n                  value={filters.subOrderNo}\n                  onChange={(e) => setFilters({ ...filters, subOrderNo: e.target.value })}\n                  data-testid=\"input-sub-order-id\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"order-status\">Order Status</Label>\n                <Select value={filters.status} onValueChange={(value) => setFilters({ ...filters, status: value })}>\n                  <SelectTrigger data-testid=\"select-order-status\">\n                    <SelectValue placeholder=\"All Statuses\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Statuses</SelectItem>\n                    <SelectItem value=\"DELIVERED\">DELIVERED</SelectItem>\n                    <SelectItem value=\"RTO_COMPLETE\">RTO_COMPLETE</SelectItem>\n                    <SelectItem value=\"CANCELLED\">CANCELLED</SelectItem>\n                    <SelectItem value=\"RTO_LOCKED\">RTO_LOCKED</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              <div>\n                <Label htmlFor=\"payment-status\">Payment Status</Label>\n                <Select value={filters.paymentStatus} onValueChange={(value) => setFilters({ ...filters, paymentStatus: value })}>\n                  <SelectTrigger data-testid=\"select-payment-status\">\n                    <SelectValue placeholder=\"All Payments\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Payments</SelectItem>\n                    <SelectItem value=\"paid\">Paid</SelectItem>\n                    <SelectItem value=\"pending\">Pending</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              <div>\n                <Label htmlFor=\"date-range\">Date Range</Label>\n                <Input\n                  id=\"date-range\"\n                  type=\"date\"\n                  value={filters.dateFrom}\n                  onChange={(e) => setFilters({ ...filters, dateFrom: e.target.value })}\n                  data-testid=\"input-date-range\"\n                />\n              </div>\n            </div>\n            <div className=\"flex justify-between items-center mt-4\">\n              <div className=\"flex gap-2\">\n                <Button onClick={handleApplyFilters} data-testid=\"button-apply-filters\">\n                  Apply Filters\n                </Button>\n                <Button variant=\"secondary\" onClick={handleClearFilters} data-testid=\"button-clear-filters\">\n                  Clear\n                </Button>\n              </div>\n              <div className=\"flex items-center gap-4\">\n                <label className=\"flex items-center gap-2\">\n                  <Checkbox \n                    checked={handleDuplicates}\n                    onCheckedChange={(checked) => setHandleDuplicates(checked === true)}\n                    data-testid=\"checkbox-handle-duplicates\"\n                  />\n                  <span className=\"text-sm\">Handle Duplicates</span>\n                </label>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Orders Table */}\n        <Card className=\"shadow-sm\">\n          <CardContent className=\"p-0\">\n            <div className=\"p-6 border-b border-border\">\n              <div className=\"flex justify-between items-center\">\n                <h3 className=\"text-lg font-semibold\">\n                  Orders ({orders ? orders.length : 0} total)\n                </h3>\n                <div className=\"flex items-center gap-2\">\n                  <Button \n                    variant=\"secondary\" \n                    size=\"sm\" \n                    onClick={handleExportOrders}\n                    data-testid=\"button-export-orders\"\n                  >\n                    <Download className=\"w-4 h-4 mr-2\" />\n                    Export\n                  </Button>\n                </div>\n              </div>\n            </div>\n            <div className=\"overflow-x-auto\">\n              <table className=\"w-full\">\n                <thead className=\"bg-muted/50\">\n                  <tr>\n                    <th className=\"px-4 py-3 text-left text-sm font-medium text-muted-foreground\">S.No.</th>\n                    <th className=\"px-4 py-3 text-left text-sm font-medium text-muted-foreground\">SKU</th>\n                    <th className=\"px-4 py-3 text-left text-sm font-medium text-muted-foreground\">Sub Order ID</th>\n                    <th className=\"px-4 py-3 text-left text-sm font-medium text-muted-foreground\">Qty</th>\n                    <th className=\"px-4 py-3 text-left text-sm font-medium text-muted-foreground\">Order Date</th>\n                    <th className=\"px-4 py-3 text-left text-sm font-medium text-muted-foreground\">Payment Date</th>\n                    <th className=\"px-4 py-3 text-left text-sm font-medium text-muted-foreground\">Listed Price</th>\n                    <th className=\"px-4 py-3 text-left text-sm font-medium text-muted-foreground\">Settlement</th>\n                    <th className=\"px-4 py-3 text-left text-sm font-medium text-muted-foreground\">Cost Price</th>\n                    <th className=\"px-4 py-3 text-left text-sm font-medium text-muted-foreground\">Gross P/L</th>\n                    <th className=\"px-4 py-3 text-left text-sm font-medium text-muted-foreground\">Order Status</th>\n                    <th className=\"px-4 py-3 text-left text-sm font-medium text-muted-foreground\">Payment Status</th>\n                  </tr>\n                </thead>\n                <tbody className=\"divide-y divide-border\">\n                  {isLoading ? (\n                    <tr>\n                      <td colSpan={12} className=\"px-4 py-8 text-center text-muted-foreground\">\n                        Loading orders...\n                      </td>\n                    </tr>\n                  ) : orders && orders.length > 0 ? (\n                    orders.map((order: any, index: number) => {\n                      const costPrice = parseFloat(order.costPrice || '0');\n                      const packagingCost = parseFloat(order.packagingCost || '0');\n                      const quantity = parseInt(order.quantity || '1');\n                      \n                      // Enhanced settlement amount parsing with better validation\n                      const settlementAmount = (() => {\n                        if (order.settlementAmount === null || order.settlementAmount === undefined) {\n                          return undefined;\n                        }\n                        const parsed = typeof order.settlementAmount === 'string' \n                          ? parseFloat(order.settlementAmount)\n                          : Number(order.settlementAmount);\n                        return isNaN(parsed) ? undefined : parsed;\n                      })();\n                      \n                      // Use settlement amount from payment file (including 0 and negative values)\n                      const profitLoss = calculateGrossProfitLoss(\n                        settlementAmount,\n                        costPrice,\n                        packagingCost,\n                        quantity,\n                        order.reasonForCredit\n                      );\n\n                      const isNegativeSettlement = typeof settlementAmount === 'number' && settlementAmount < 0;\n                      const orderStatus = isNegativeSettlement ? 'RETURN' : (order.reasonForCredit || 'PENDING');\n                      \n                      return (\n                        <tr key={`${order.subOrderNo}-${index}`} className=\"hover:bg-muted/50\" data-testid={`row-order-${order.subOrderNo}`}>\n                          <td className=\"px-4 py-3 text-sm\">{index + 1}</td>\n                          <td className=\"px-4 py-3 text-sm font-mono\">{order.sku}</td>\n                          <td className=\"px-4 py-3 text-sm font-mono\">{order.subOrderNo}</td>\n                          <td className=\"px-4 py-3 text-sm\">{order.quantity}</td>\n                          <td className=\"px-4 py-3 text-sm\">\n                            {new Date(order.orderDate).toLocaleDateString('en-IN', { \n                              year: 'numeric', \n                              month: '2-digit', \n                              day: '2-digit' \n                            })}\n                          </td>\n                          <td className=\"px-4 py-3 text-sm\">\n                            {order.paymentDate ? new Date(order.paymentDate).toLocaleDateString('en-IN', { \n                              year: 'numeric', \n                              month: '2-digit', \n                              day: '2-digit' \n                            }) : \n                             order.settlementDate ? new Date(order.settlementDate).toLocaleDateString('en-IN', { \n                              year: 'numeric', \n                              month: '2-digit', \n                              day: '2-digit' \n                            }) : '-'}\n                          </td>\n                          <td className=\"px-4 py-3 text-sm\">{formatCurrency(order.listedPrice)}</td>\n                          <td className=\"px-4 py-3 text-sm font-medium\">\n                            {typeof settlementAmount === 'number' && isFinite(settlementAmount) ? (\n                              <span className={`font-semibold ${\n                                settlementAmount > 0 ? \"text-green-600\" : \n                                settlementAmount === 0 ? \"text-yellow-600\" : \n                                \"text-red-600\"\n                              }`}>\n                                {formatCurrency(settlementAmount)}\n                              </span>\n                            ) : (\n                              <span className=\"text-gray-500\">-</span>\n                            )}\n                          </td>\n                          <td className=\"px-4 py-3 text-sm\">\n                            <span>{costPrice > 0 ? formatCurrency(costPrice) : '-'}</span>\n                          </td>\n                          <td className=\"px-4 py-3 text-sm\">\n                            {profitLoss.amount !== null ? (\n                              <span className={`font-medium whitespace-nowrap ${profitLoss.isProfit ? 'text-green-600' : 'text-red-600'}`}>\n                                {profitLoss.formatted}\n                              </span>\n                            ) : (\n                              <span className=\"text-gray-500\">-</span>\n                            )}\n                          </td>\n                          <td className=\"px-4 py-3\">\n                            {getStatusBadge(orderStatus)}\n                          </td>\n                          <td className=\"px-4 py-3\">\n                            {getPaymentStatusBadge(order.paymentStatus, order.hasPayment || false, settlementAmount, order.paymentDate, orderStatus)}\n                          </td>\n                        </tr>\n                      );\n                    })\n                  ) : (\n                    <tr>\n                      <td colSpan={12} className=\"px-4 py-8 text-center text-muted-foreground\">\n                        No orders found. Upload order files to get started.\n                      </td>\n                    </tr>\n                  )}\n                </tbody>\n              </table>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":19945},"client/src/pages/Products.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport Header from '@/components/Header';\nimport { Package, Search } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\nimport { useAuthQuery, useAuthApiRequest } from '@/hooks/use-auth-query';\n\nexport default function Products() {\n  const [bulkCostPrice, setBulkCostPrice] = useState('');\n  const [bulkPackagingCost, setBulkPackagingCost] = useState('');\n  const [searchQuery, setSearchQuery] = useState('');\n  const [productValues, setProductValues] = useState<Record<string, {costPrice: string, packagingCost: string, gstPercent: string}>>({});\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const apiRequest = useAuthApiRequest();\n\n  const { data: products, isLoading } = useAuthQuery({\n    queryKey: ['/api/products'],\n  });\n\n  const productsArray = Array.isArray(products) ? products : [];\n\n  // Sync product values with incoming data\n  useEffect(() => {\n    if (productsArray.length > 0) {\n      const newValues: Record<string, {costPrice: string, packagingCost: string, gstPercent: string}> = {};\n      productsArray.forEach((product: any) => {\n        newValues[product.sku] = {\n          costPrice: product.costPrice || '0',\n          packagingCost: product.packagingCost || '0',\n          gstPercent: product.gstPercent ?? '5'\n        };\n      });\n      setProductValues(newValues);\n    }\n  }, [productsArray]);\n\n\n  const updateProductMutation = useMutation({\n    mutationFn: async ({ sku, data }: { sku: string; data: any }) => {\n      return apiRequest('PUT', `/api/products/${sku}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/products'] });\n      toast({\n        title: \"Product updated\",\n        description: \"Product has been updated successfully.\",\n      });\n    },\n  });\n\n  const bulkUpdateMutation = useMutation({\n    mutationFn: async ({ field, value }: { field: string; value: string }) => {\n      return apiRequest('POST', '/api/products/bulk-update', { field, value });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/products'] });\n      // Clear the bulk input fields\n      setBulkCostPrice('');\n      setBulkPackagingCost('');\n      toast({\n        title: \"Bulk update completed\",\n        description: \"All products have been updated successfully.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Bulk update failed\",\n        description: \"There was an error updating the products.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateAllCostsMutation = useMutation({\n    mutationFn: async () => {\n      return apiRequest('POST', '/api/products/update-all-costs', {});\n    },\n    onSuccess: () => {\n      // Refresh products and dashboard data\n      queryClient.invalidateQueries({ queryKey: ['/api/products'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/dashboard/comprehensive-summary'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/dashboard/settlement-components'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/dashboard/earnings-overview'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/dashboard/operational-costs'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/dashboard/daily-volume'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/dashboard/top-products'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/dashboard/top-returns'] });\n      toast({\n        title: \"All product costs updated\",\n        description: \"Final prices have been recalculated and dashboard refreshed.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Update failed\",\n        description: \"There was an error updating product costs.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleProductUpdate = (sku: string, field: string, value: string) => {\n    updateProductMutation.mutate({\n      sku,\n      data: { [field]: value }\n    });\n  };\n\n  const updateProductValue = (sku: string, field: string, value: string) => {\n    setProductValues(prev => ({\n      ...prev,\n      [sku]: {\n        ...prev[sku],\n        [field]: value\n      }\n    }));\n  };\n\n  const calculateFinalPrice = (costPrice: number, packagingCost: number, gstPercent: number) => {\n    // Final price = cost + (cost × GST%) + packaging\n    const baseCost = costPrice || 0;\n    const packaging = packagingCost || 0;\n    const gst = gstPercent || 0;\n    \n    const gstAmount = (baseCost * gst) / 100;\n    const finalPrice = baseCost + gstAmount + packaging;\n    \n    // Round to 2 decimals\n    return Math.round(finalPrice * 100) / 100;\n  };\n\n\n\n  const handleBulkSetCost = () => {\n    if (!bulkCostPrice) {\n      toast({\n        title: \"Missing value\", \n        description: \"Please enter a cost price value.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    bulkUpdateMutation.mutate({\n      field: 'costPrice',\n      value: bulkCostPrice\n    });\n  };\n\n  const handleBulkSetPackaging = () => {\n    if (!bulkPackagingCost) {\n      toast({\n        title: \"Missing value\",\n        description: \"Please enter a packaging cost value.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    bulkUpdateMutation.mutate({\n      field: 'packagingCost',\n      value: bulkPackagingCost\n    });\n  };\n\n  const filteredProducts = productsArray.filter((product: any) =>\n    product.sku.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    product.title.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <Header title=\"Products\" subtitle=\"Manage product costs and configurations\" />\n      \n      <div className=\"flex-1 p-6\">\n        {/* Product Management Header */}\n        <Card className=\"shadow-sm mb-6\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex justify-between items-center mb-4\">\n              <h3 className=\"text-lg font-semibold flex items-center gap-2\">\n                <Package className=\"w-5 h-5\" />\n                Product Cost Management\n              </h3>\n              <div className=\"flex items-center gap-4\">\n                <Button \n                  onClick={() => updateAllCostsMutation.mutate()}\n                  disabled={updateAllCostsMutation.isPending}\n                  data-testid=\"button-update-all-products\"\n                >\n                  {updateAllCostsMutation.isPending ? 'Updating...' : 'Update All Product Costs'}\n                </Button>\n              </div>\n            </div>\n            \n            {/* Bulk Actions */}\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <div>\n                <Label htmlFor=\"bulk-cost\">Bulk Set Cost Price</Label>\n                <div className=\"flex gap-2\">\n                  <Input\n                    id=\"bulk-cost\"\n                    type=\"number\"\n                    step=\"0.01\"\n                    placeholder=\"₹ Amount\"\n                    value={bulkCostPrice}\n                    onChange={(e) => setBulkCostPrice(e.target.value)}\n                    data-testid=\"input-bulk-cost-price\"\n                  />\n                  <Button \n                    variant=\"outline\" \n                    onClick={handleBulkSetCost}\n                    disabled={bulkUpdateMutation.isPending}\n                    data-testid=\"button-bulk-set-cost\"\n                    className=\"whitespace-nowrap\"\n                  >\n                    Apply to All\n                  </Button>\n                </div>\n              </div>\n              <div>\n                <Label htmlFor=\"bulk-packaging\">Bulk Set Packaging Cost</Label>\n                <div className=\"flex gap-2\">\n                  <Input\n                    id=\"bulk-packaging\"\n                    type=\"number\"\n                    step=\"0.01\"\n                    placeholder=\"₹ Amount\"\n                    value={bulkPackagingCost}\n                    onChange={(e) => setBulkPackagingCost(e.target.value)}\n                    data-testid=\"input-bulk-packaging-cost\"\n                  />\n                  <Button \n                    variant=\"outline\" \n                    onClick={handleBulkSetPackaging}\n                    disabled={bulkUpdateMutation.isPending}\n                    data-testid=\"button-bulk-set-packaging\"\n                    className=\"whitespace-nowrap\"\n                  >\n                    Apply to All\n                  </Button>\n                </div>\n              </div>\n              <div>\n                <Label htmlFor=\"search\">Search Products</Label>\n                <div className=\"relative\">\n                  <Search className=\"w-4 h-4 absolute left-3 top-3 text-muted-foreground\" />\n                  <Input\n                    id=\"search\"\n                    placeholder=\"Search by SKU or title...\"\n                    value={searchQuery}\n                    onChange={(e) => setSearchQuery(e.target.value)}\n                    className=\"pl-9\"\n                    data-testid=\"input-search-products\"\n                  />\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Products Table */}\n        <Card className=\"shadow-sm\">\n          <CardContent className=\"p-0\">\n            <div className=\"p-6 border-b border-border\">\n              <h3 className=\"text-lg font-semibold\">\n                Products ({filteredProducts.length} total)\n              </h3>\n            </div>\n            <div className=\"overflow-x-auto\">\n              <table className=\"w-full\">\n                <thead className=\"bg-muted/50\">\n                  <tr>\n                    <th className=\"px-4 py-3 text-left text-sm font-medium text-muted-foreground\">S.No.</th>\n                    <th className=\"px-4 py-3 text-left text-sm font-medium text-muted-foreground\">SKU</th>\n                    <th className=\"px-4 py-3 text-left text-sm font-medium text-muted-foreground\">Product Name</th>\n                    <th className=\"px-4 py-3 text-left text-sm font-medium text-muted-foreground\">Cost (₹)</th>\n                    <th className=\"px-4 py-3 text-left text-sm font-medium text-muted-foreground\">Packaging (₹)</th>\n                    <th className=\"px-4 py-3 text-left text-sm font-medium text-muted-foreground\">GST (%)</th>\n                    <th className=\"px-4 py-3 text-left text-sm font-medium text-muted-foreground\">Final Price (₹)</th>\n                  </tr>\n                </thead>\n                <tbody className=\"divide-y divide-border\">\n                  {isLoading ? (\n                    <tr>\n                      <td colSpan={7} className=\"px-4 py-8 text-center text-muted-foreground\">\n                        Loading products...\n                      </td>\n                    </tr>\n                  ) : filteredProducts.length > 0 ? (\n                    filteredProducts.map((product: any, index: number) => {\n                      const currentValues = productValues[product.sku] || {\n                        costPrice: product.costPrice || '0',\n                        packagingCost: product.packagingCost || '0',\n                        gstPercent: product.gstPercent ?? '5'\n                      };\n                      const costPrice = parseFloat(currentValues.costPrice);\n                      const packagingCost = parseFloat(currentValues.packagingCost);\n                      const gstPercent = parseFloat(currentValues.gstPercent);\n                      const finalPrice = calculateFinalPrice(costPrice, packagingCost, gstPercent);\n                      \n                      return (\n                        <tr key={product.sku} className=\"hover:bg-muted/50\" data-testid={`row-product-${product.sku}`}>\n                          <td className=\"px-4 py-3 text-sm font-medium text-center\">{index + 1}</td>\n                          <td className=\"px-4 py-3 text-sm font-mono\">{product.sku}</td>\n                          <td className=\"px-4 py-3 text-sm\">\n                            <div className=\"max-w-xs\">\n                              <span className=\"text-sm\" title={product.title}>\n                                {product.title ? (product.title.length > 30 ? `${product.title.substring(0, 30)}...` : product.title) : (\n                                  <span className=\"text-gray-400 italic\">No product name</span>\n                                )}\n                              </span>\n                            </div>\n                          </td>\n                          <td className=\"px-4 py-3 text-sm\">\n                            <Input\n                              type=\"number\"\n                              step=\"0.01\"\n                              value={currentValues.costPrice}\n                              onChange={(e) => updateProductValue(product.sku, 'costPrice', e.target.value)}\n                              onBlur={(e) => handleProductUpdate(product.sku, 'costPrice', e.target.value)}\n                              className=\"w-24\"\n                              data-testid={`input-cost-price-${product.sku}`}\n                            />\n                          </td>\n                          <td className=\"px-4 py-3 text-sm\">\n                            <Input\n                              type=\"number\"\n                              step=\"0.01\"\n                              value={currentValues.packagingCost}\n                              onChange={(e) => updateProductValue(product.sku, 'packagingCost', e.target.value)}\n                              onBlur={(e) => handleProductUpdate(product.sku, 'packagingCost', e.target.value)}\n                              className=\"w-24\"\n                              data-testid={`input-packaging-cost-${product.sku}`}\n                            />\n                          </td>\n                          <td className=\"px-4 py-3 text-sm\">\n                            <Input\n                              type=\"number\"\n                              step=\"0.1\"\n                              min=\"0\"\n                              max=\"100\"\n                              value={currentValues.gstPercent}\n                              onChange={(e) => updateProductValue(product.sku, 'gstPercent', e.target.value)}\n                              onBlur={(e) => handleProductUpdate(product.sku, 'gstPercent', e.target.value)}\n                              className=\"w-20\"\n                              data-testid={`input-gst-percent-${product.sku}`}\n                            />\n                          </td>\n                          <td className=\"px-4 py-3 text-sm\">\n                            <div className=\"flex flex-col\">\n                              <span className={`font-bold ${\n                                finalPrice > 0 ? 'text-green-600' : 'text-gray-400'\n                              }`}>\n                                ₹{finalPrice.toFixed(2)}\n                              </span>\n                              {finalPrice === 0 && (\n                                <span className=\"text-xs text-orange-500\">Set costs above</span>\n                              )}\n                            </div>\n                          </td>\n                        </tr>\n                      );\n                    })\n                  ) : (\n                    <tr>\n                      <td colSpan={7} className=\"px-4 py-8 text-center text-muted-foreground\">\n                        No products found. {searchQuery ? 'Try adjusting your search.' : 'Upload order files to create products.'}\n                      </td>\n                    </tr>\n                  )}\n                </tbody>\n              </table>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":16028},"client/src/pages/Reconciliation.tsx":{"content":"import { useState } from 'react';\nimport { useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Badge } from '@/components/ui/badge';\nimport Header from '@/components/Header';\nimport { Calculator, CheckCircle, X, AlertTriangle, Download } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\nimport { useAuthQuery, useAuthApiRequest } from '@/hooks/use-auth-query';\nimport { useAuth } from '@/contexts/AuthContext';\n\ninterface ReconciliationFilters {\n  dateFrom: string;\n  dateTo: string;\n  tolerance: string;\n  status: string;\n}\n\nexport default function Reconciliation() {\n  const [filters, setFilters] = useState<ReconciliationFilters>({\n    dateFrom: '',\n    dateTo: '',\n    tolerance: '1.00',\n    status: '',\n  });\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const apiRequest = useAuthApiRequest();\n\n  const { data: reconciliations, isLoading: reconciliationsLoading } = useAuthQuery({\n    queryKey: ['/api/reconciliations', filters.status],\n  });\n\n  const { data: summary, isLoading: summaryLoading } = useAuthQuery({\n    queryKey: ['/api/reconciliations/summary'],\n  });\n\n  const reconciliationMutation = useMutation({\n    mutationFn: async () => {\n      return apiRequest('POST', '/api/reconciliations/run', {});\n    },\n    onSuccess: (response) => {\n      const data = response.json();\n      queryClient.invalidateQueries({ queryKey: ['/api/reconciliations'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/reconciliations/summary'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/dashboard/summary'] });\n      toast({\n        title: \"Reconciliation completed\",\n        description: `Processed ${data.processed} records. ${data.reconciled} reconciled, ${data.mismatched} mismatched, ${data.unreconciled} unreconciled.`,\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Reconciliation failed\",\n        description: \"There was an error running the reconciliation engine.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleRunReconciliation = () => {\n    reconciliationMutation.mutate();\n  };\n\n  const handleExportResults = () => {\n    const params = new URLSearchParams({ status: filters.status });\n    window.open(`/api/export/reconciliations?${params}`, '_blank');\n  };\n\n  const getStatusBadge = (status: string) => {\n    switch (status.toLowerCase()) {\n      case 'reconciled':\n        return (\n          <Badge className=\"bg-green-100 text-green-800\">\n            <CheckCircle className=\"w-3 h-3 mr-1\" />\n            Reconciled\n          </Badge>\n        );\n      case 'mismatch':\n        return (\n          <Badge className=\"bg-yellow-100 text-yellow-800\">\n            <AlertTriangle className=\"w-3 h-3 mr-1\" />\n            Mismatch\n          </Badge>\n        );\n      case 'unreconciled':\n        return (\n          <Badge variant=\"secondary\">\n            <X className=\"w-3 h-3 mr-1\" />\n            Unreconciled\n          </Badge>\n        );\n      default:\n        return <Badge variant=\"secondary\">{status}</Badge>;\n    }\n  };\n\n  const formatCurrency = (amount: string | number) => {\n    return new Intl.NumberFormat('en-IN', {\n      style: 'currency',\n      currency: 'INR',\n    }).format(Number(amount));\n  };\n\n  const summaryData = summary || {\n    reconciled: 0,\n    mismatch: 0,\n    unreconciled: 0,\n    successRate: 0,\n  };\n\n  return (\n    <div className=\"flex-1 flex flex-col overflow-hidden\">\n      <Header title=\"Reconciliation\" subtitle=\"Review and reconcile payment discrepancies\" />\n      \n      <div className=\"flex-1 overflow-auto p-6\">\n        {/* Reconciliation Controls */}\n        <Card className=\"shadow-sm mb-6\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex justify-between items-center mb-4\">\n              <h3 className=\"text-lg font-semibold flex items-center gap-2\">\n                <Calculator className=\"w-5 h-5\" />\n                Reconciliation Engine\n              </h3>\n              <Button \n                onClick={handleRunReconciliation}\n                disabled={reconciliationMutation.isPending}\n                data-testid=\"button-run-full-reconciliation\"\n              >\n                {reconciliationMutation.isPending ? 'Running...' : 'Run Full Reconciliation'}\n              </Button>\n            </div>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <div>\n                <Label htmlFor=\"date-from\">Date From</Label>\n                <Input\n                  id=\"date-from\"\n                  type=\"date\"\n                  value={filters.dateFrom}\n                  onChange={(e) => setFilters({ ...filters, dateFrom: e.target.value })}\n                  data-testid=\"input-date-from\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"date-to\">Date To</Label>\n                <Input\n                  id=\"date-to\"\n                  type=\"date\"\n                  value={filters.dateTo}\n                  onChange={(e) => setFilters({ ...filters, dateTo: e.target.value })}\n                  data-testid=\"input-date-to\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"tolerance\">Tolerance (₹)</Label>\n                <Input\n                  id=\"tolerance\"\n                  type=\"number\"\n                  step=\"0.01\"\n                  value={filters.tolerance}\n                  onChange={(e) => setFilters({ ...filters, tolerance: e.target.value })}\n                  data-testid=\"input-tolerance\"\n                />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Reconciliation Summary */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n          <Card className=\"shadow-sm\" data-testid=\"card-reconciled-orders\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-muted-foreground text-sm\">Reconciled Orders</p>\n                  <p className=\"text-2xl font-bold text-green-600\" data-testid=\"text-reconciled-count\">\n                    {summaryLoading ? '...' : summaryData.reconciled.toLocaleString()}\n                  </p>\n                </div>\n                <div className=\"w-10 h-10 bg-green-100 rounded-full flex items-center justify-center\">\n                  <CheckCircle className=\"w-5 h-5 text-green-600\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"shadow-sm\" data-testid=\"card-mismatched\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-muted-foreground text-sm\">Mismatched</p>\n                  <p className=\"text-2xl font-bold text-yellow-600\" data-testid=\"text-mismatch-count\">\n                    {summaryLoading ? '...' : summaryData.mismatch.toLocaleString()}\n                  </p>\n                </div>\n                <div className=\"w-10 h-10 bg-yellow-100 rounded-full flex items-center justify-center\">\n                  <AlertTriangle className=\"w-5 h-5 text-yellow-600\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"shadow-sm\" data-testid=\"card-unreconciled\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-muted-foreground text-sm\">Unreconciled</p>\n                  <p className=\"text-2xl font-bold text-red-600\" data-testid=\"text-unreconciled-count\">\n                    {summaryLoading ? '...' : summaryData.unreconciled.toLocaleString()}\n                  </p>\n                </div>\n                <div className=\"w-10 h-10 bg-red-100 rounded-full flex items-center justify-center\">\n                  <X className=\"w-5 h-5 text-red-600\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"shadow-sm\" data-testid=\"card-success-rate\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-muted-foreground text-sm\">Success Rate</p>\n                  <p className=\"text-2xl font-bold text-blue-600\" data-testid=\"text-success-rate\">\n                    {summaryLoading ? '...' : `${summaryData.successRate.toFixed(1)}%`}\n                  </p>\n                </div>\n                <div className=\"w-10 h-10 bg-blue-100 rounded-full flex items-center justify-center\">\n                  <Calculator className=\"w-5 h-5 text-blue-600\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Reconciliation Details */}\n        <Card className=\"shadow-sm\">\n          <CardContent className=\"p-0\">\n            <div className=\"p-6 border-b border-border\">\n              <div className=\"flex justify-between items-center\">\n                <h3 className=\"text-lg font-semibold\">Reconciliation Details</h3>\n                <div className=\"flex items-center gap-4\">\n                  <Select value={filters.status} onValueChange={(value) => setFilters({ ...filters, status: value })}>\n                    <SelectTrigger className=\"w-40\" data-testid=\"select-status-filter\">\n                      <SelectValue placeholder=\"All Status\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">All Status</SelectItem>\n                      <SelectItem value=\"reconciled\">Reconciled</SelectItem>\n                      <SelectItem value=\"mismatch\">Mismatch</SelectItem>\n                      <SelectItem value=\"unreconciled\">Unreconciled</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  <Button \n                    variant=\"secondary\" \n                    onClick={handleExportResults}\n                    data-testid=\"button-export-results\"\n                  >\n                    <Download className=\"w-4 h-4 mr-2\" />\n                    Export Results\n                  </Button>\n                </div>\n              </div>\n            </div>\n            <div className=\"overflow-x-auto\">\n              <table className=\"w-full\">\n                <thead className=\"bg-muted/50\">\n                  <tr>\n                    <th className=\"px-4 py-3 text-left text-sm font-medium text-muted-foreground\">Sub Order ID</th>\n                    <th className=\"px-4 py-3 text-left text-sm font-medium text-muted-foreground\">SKU</th>\n                    <th className=\"px-4 py-3 text-left text-sm font-medium text-muted-foreground\">Order Value</th>\n                    <th className=\"px-4 py-3 text-left text-sm font-medium text-muted-foreground\">Settlement</th>\n                    <th className=\"px-4 py-3 text-left text-sm font-medium text-muted-foreground\">Product Cost</th>\n                    <th className=\"px-4 py-3 text-left text-sm font-medium text-muted-foreground\">Ads Cost</th>\n                    <th className=\"px-4 py-3 text-left text-sm font-medium text-muted-foreground\">Net Profit</th>\n                    <th className=\"px-4 py-3 text-left text-sm font-medium text-muted-foreground\">Status</th>\n                    <th className=\"px-4 py-3 text-left text-sm font-medium text-muted-foreground\">Actions</th>\n                  </tr>\n                </thead>\n                <tbody className=\"divide-y divide-border\">\n                  {reconciliationsLoading ? (\n                    <tr>\n                      <td colSpan={9} className=\"px-4 py-8 text-center text-muted-foreground\">\n                        Loading reconciliation data...\n                      </td>\n                    </tr>\n                  ) : reconciliations && reconciliations.length > 0 ? (\n                    reconciliations.map((reconciliation: any) => {\n                      const netProfit = Number(reconciliation.netProfit) || 0;\n                      const isProfit = netProfit >= 0;\n                      \n                      return (\n                        <tr key={reconciliation.id} className=\"hover:bg-muted/50\" data-testid={`row-reconciliation-${reconciliation.subOrderNo}`}>\n                          <td className=\"px-4 py-3 text-sm font-mono\">{reconciliation.subOrderNo}</td>\n                          <td className=\"px-4 py-3 text-sm font-mono\">\n                            {/* This would need to be joined from the order data */}\n                            -\n                          </td>\n                          <td className=\"px-4 py-3 text-sm\">{formatCurrency(reconciliation.orderValue)}</td>\n                          <td className=\"px-4 py-3 text-sm font-medium\">{formatCurrency(reconciliation.settlementAmount)}</td>\n                          <td className=\"px-4 py-3 text-sm\">{formatCurrency(reconciliation.productCost)}</td>\n                          <td className=\"px-4 py-3 text-sm\">{formatCurrency(reconciliation.adsCost)}</td>\n                          <td className={`px-4 py-3 text-sm font-medium ${isProfit ? 'text-green-600' : 'text-red-600'}`}>\n                            {isProfit ? '+' : ''}{formatCurrency(netProfit)}\n                          </td>\n                          <td className=\"px-4 py-3\">\n                            {getStatusBadge(reconciliation.status)}\n                          </td>\n                          <td className=\"px-4 py-3 text-sm\">\n                            <Button \n                              variant=\"link\" \n                              size=\"sm\"\n                              data-testid={`button-view-details-${reconciliation.subOrderNo}`}\n                            >\n                              View\n                            </Button>\n                          </td>\n                        </tr>\n                      );\n                    })\n                  ) : (\n                    <tr>\n                      <td colSpan={9} className=\"px-4 py-8 text-center text-muted-foreground\">\n                        No reconciliation data found. Run reconciliation to generate results.\n                      </td>\n                    </tr>\n                  )}\n                </tbody>\n              </table>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":14775},"client/src/pages/Upload.tsx":{"content":"import { useState } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Badge } from '@/components/ui/badge';\nimport Header from '@/components/Header';\nimport { Upload as UploadIcon, FileText, Archive } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest, getQueryFn } from '@/lib/queryClient';\nimport { useAuth } from '@/contexts/AuthContext';\n\nexport default function Upload() {\n  const [paymentFiles, setPaymentFiles] = useState<FileList | null>(null);\n  const [ordersFiles, setOrdersFiles] = useState<FileList | null>(null);\n  const { toast } = useToast();\n  const { token } = useAuth();\n  const queryClient = useQueryClient();\n\n  const { data: uploads = [], isLoading } = useQuery({\n    queryKey: ['/api/uploads'],\n    queryFn: getQueryFn({ on401: \"returnNull\", token }),\n    enabled: !!token,\n  });\n\n  const uploadMutation = useMutation({\n    mutationFn: async (formData: FormData) => {\n      const response = await fetch('/api/upload', {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n        },\n        body: formData,\n      });\n      if (!response.ok) {\n        throw new Error('Upload failed');\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/uploads'] });\n      toast({\n        title: \"Upload started\",\n        description: \"Your files are being processed.\",\n      });\n      \n      // Start polling for completion and refresh UI when both files are processed\n      const pollForCompletion = () => {\n        setTimeout(async () => {\n          try {\n            const response = await fetch('/api/uploads', {\n              headers: { 'Authorization': `Bearer ${token}` },\n            });\n            const uploads = await response.json();\n            \n            // Check if all recent uploads are processed\n            const recentUploads = uploads.filter((upload: any) => \n              new Date(upload.createdAt) > new Date(Date.now() - 5 * 60 * 1000) // Last 5 minutes\n            );\n            \n            const allProcessed = recentUploads.length > 0 && \n              recentUploads.every((upload: any) => upload.status === 'processed' || upload.status === 'failed');\n            \n            if (allProcessed) {\n              // Refresh all data when processing is complete\n              queryClient.invalidateQueries({ queryKey: ['/api/dashboard/summary'] });\n              queryClient.invalidateQueries({ queryKey: ['/api/dashboard/revenue-trend'] });\n              queryClient.invalidateQueries({ queryKey: ['/api/dashboard/order-status'] });\n              queryClient.invalidateQueries({ queryKey: ['/api/orders'] });\n              queryClient.invalidateQueries({ queryKey: ['/api/products'] });\n              queryClient.invalidateQueries({ queryKey: ['/api/uploads'] });\n              \n              toast({\n                title: \"Processing completed\",\n                description: \"Your files have been processed and data updated.\",\n              });\n            } else if (recentUploads.some((upload: any) => upload.status === 'processing')) {\n              pollForCompletion(); // Continue polling\n            }\n          } catch (error) {\n            // Silently handle polling errors\n          }\n        }, 2000); // Poll every 2 seconds\n      };\n      \n      pollForCompletion();\n      \n      // Reset form\n      setPaymentFiles(null);\n      setOrdersFiles(null);\n    },\n    onError: () => {\n      toast({\n        title: \"Upload failed\",\n        description: \"There was an error uploading your files.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleProcessFiles = async () => {\n    if (!paymentFiles && !ordersFiles) {\n      toast({\n        title: \"No files selected\",\n        description: \"Please select at least one file to process.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const uploads = [];\n\n    if (paymentFiles) {\n      const formData = new FormData();\n      formData.append('file', paymentFiles[0]);\n      formData.append('fileType', 'payment_zip');\n      uploads.push(formData);\n    }\n\n    if (ordersFiles) {\n      const formData = new FormData();\n      formData.append('file', ordersFiles[0]);\n      formData.append('fileType', 'orders_csv');\n      uploads.push(formData);\n    }\n\n    // Process uploads sequentially\n    for (const formData of uploads) {\n      await uploadMutation.mutateAsync(formData);\n    }\n  };\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case 'processed':\n        return <Badge className=\"bg-green-100 text-green-800\">Processed</Badge>;\n      case 'processing':\n        return <Badge className=\"bg-yellow-100 text-yellow-800\">Processing</Badge>;\n      case 'failed':\n        return <Badge variant=\"destructive\">Failed</Badge>;\n      default:\n        return <Badge variant=\"secondary\">{status}</Badge>;\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <Header \n        title=\"Upload Files\" \n        subtitle=\"Upload and process payment and order files\"\n      />\n      \n      <div className=\"flex-1 p-6\">\n        {/* Upload Sections */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8\">\n          {/* Payment Files Upload */}\n          <Card className=\"shadow-sm\" data-testid=\"card-payment-upload\">\n            <CardContent className=\"p-6\">\n              <h3 className=\"text-lg font-semibold mb-4 flex items-center gap-2\">\n                <Archive className=\"w-5 h-5 text-blue-600\" />\n                Payment ZIP Files\n              </h3>\n              \n              <div \n                className=\"border-2 border-dashed border-border rounded-lg p-8 text-center hover:border-primary transition-colors cursor-pointer\"\n                onClick={() => document.getElementById('payment-file')?.click()}\n                data-testid=\"dropzone-payment\"\n              >\n                <UploadIcon className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                <p className=\"text-lg font-medium\">Drop payment ZIP files here</p>\n                <p className=\"text-muted-foreground mt-2\">or click to browse</p>\n                <p className=\"text-sm text-muted-foreground mt-2\">Supports ZIP files containing XLSX payment sheets</p>\n              </div>\n              \n              <input\n                id=\"payment-file\"\n                type=\"file\"\n                accept=\".zip\"\n                className=\"hidden\"\n                onChange={(e) => setPaymentFiles(e.target.files)}\n                data-testid=\"input-payment-file\"\n              />\n              \n              {paymentFiles && paymentFiles.length > 0 && paymentFiles[0] && (\n                <div className=\"mt-4 p-3 bg-muted rounded-md\">\n                  <p className=\"text-sm font-medium\">Selected: {paymentFiles[0].name}</p>\n                </div>\n              )}\n              \n            </CardContent>\n          </Card>\n\n          {/* Orders CSV Upload */}\n          <Card className=\"shadow-sm\" data-testid=\"card-orders-upload\">\n            <CardContent className=\"p-6\">\n              <h3 className=\"text-lg font-semibold mb-4 flex items-center gap-2\">\n                <FileText className=\"w-5 h-5 text-green-600\" />\n                Orders CSV Files\n              </h3>\n              \n              <div \n                className=\"border-2 border-dashed border-border rounded-lg p-8 text-center hover:border-primary transition-colors cursor-pointer\"\n                onClick={() => document.getElementById('orders-file')?.click()}\n                data-testid=\"dropzone-orders\"\n              >\n                <FileText className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                <p className=\"text-lg font-medium\">Drop orders CSV files here</p>\n                <p className=\"text-muted-foreground mt-2\">or click to browse</p>\n                <p className=\"text-sm text-muted-foreground mt-2\">Supports CSV files with order data</p>\n              </div>\n              \n              <input\n                id=\"orders-file\"\n                type=\"file\"\n                accept=\".csv\"\n                className=\"hidden\"\n                onChange={(e) => setOrdersFiles(e.target.files)}\n                data-testid=\"input-orders-file\"\n              />\n              \n              {ordersFiles && ordersFiles.length > 0 && ordersFiles[0] && (\n                <div className=\"mt-4 p-3 bg-muted rounded-md\">\n                  <p className=\"text-sm font-medium\">Selected: {ordersFiles[0].name}</p>\n                </div>\n              )}\n              \n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Process Files Button */}\n        <div className=\"text-center mb-8\">\n          <Button \n            size=\"lg\"\n            onClick={handleProcessFiles}\n            disabled={uploadMutation.isPending}\n            data-testid=\"button-process-files\"\n          >\n            {uploadMutation.isPending ? 'Processing...' : 'Process Files'}\n          </Button>\n        </div>\n\n        {/* Upload History */}\n        <Card className=\"shadow-sm\">\n          <CardContent className=\"p-0\">\n            <div className=\"p-6 border-b border-border\">\n              <h3 className=\"text-lg font-semibold\">Upload History</h3>\n            </div>\n            <div className=\"overflow-x-auto\">\n              <table className=\"w-full\">\n                <thead className=\"bg-muted/50\">\n                  <tr>\n                    <th className=\"px-6 py-3 text-left text-sm font-medium text-muted-foreground\">File Name</th>\n                    <th className=\"px-6 py-3 text-left text-sm font-medium text-muted-foreground\">Type</th>\n                    <th className=\"px-6 py-3 text-left text-sm font-medium text-muted-foreground\">Status</th>\n                    <th className=\"px-6 py-3 text-left text-sm font-medium text-muted-foreground\">Records</th>\n                    <th className=\"px-6 py-3 text-left text-sm font-medium text-muted-foreground\">Uploaded</th>\n                  </tr>\n                </thead>\n                <tbody className=\"divide-y divide-border\">\n                  {isLoading ? (\n                    <tr>\n                      <td colSpan={5} className=\"px-6 py-8 text-center text-muted-foreground\">\n                        Loading upload history...\n                      </td>\n                    </tr>\n                  ) : Array.isArray(uploads) && uploads.length > 0 ? (\n                    uploads.map((upload: any) => (\n                      <tr key={upload.id} className=\"hover:bg-muted/50\" data-testid={`row-upload-${upload.id}`}>\n                        <td className=\"px-6 py-4 text-sm font-medium\">{upload.originalName}</td>\n                        <td className=\"px-6 py-4 text-sm\">\n                          {upload.fileType === 'payment_zip' ? 'Payment ZIP' : 'Orders CSV'}\n                        </td>\n                        <td className=\"px-6 py-4\">\n                          {getStatusBadge(upload.status)}\n                        </td>\n                        <td className=\"px-6 py-4 text-sm text-muted-foreground\">\n                          {upload.recordsProcessed > 0 \n                            ? `${upload.recordsProcessed} records` \n                            : '-'\n                          }\n                        </td>\n                        <td className=\"px-6 py-4 text-sm text-muted-foreground\">\n                          {new Date(upload.createdAt).toLocaleString()}\n                        </td>\n                      </tr>\n                    ))\n                  ) : (\n                    <tr>\n                      <td colSpan={5} className=\"px-6 py-8 text-center text-muted-foreground\">\n                        No uploads yet. Upload your first file to get started.\n                      </td>\n                    </tr>\n                  )}\n                </tbody>\n              </table>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":12229},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/charts/OrderStatusChart.tsx":{"content":"import { PieChart, Pie, Cell, ResponsiveContainer, Tooltip, Legend } from 'recharts';\nimport { useAuthQuery } from '@/hooks/use-auth-query';\n\ninterface OrderStatusData {\n  name: string;\n  value: number;\n  color: string;\n}\n\nexport default function OrderStatusChart() {\n  const { data: chartData = [], isLoading } = useAuthQuery<OrderStatusData[]>({\n    queryKey: ['/api/dashboard/order-status'],\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"h-64 flex items-center justify-center\">\n        <div className=\"animate-pulse text-muted-foreground\">Loading chart data...</div>\n      </div>\n    );\n  }\n\n  if (chartData.length === 0) {\n    return (\n      <div className=\"h-64 flex items-center justify-center\">\n        <div className=\"text-muted-foreground\">No data available</div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"h-64\">\n      <ResponsiveContainer width=\"100%\" height=\"100%\">\n        <PieChart>\n          <Pie\n            data={chartData}\n            cx=\"50%\"\n            cy=\"50%\"\n            innerRadius={60}\n            outerRadius={90}\n            paddingAngle={5}\n            dataKey=\"value\"\n          >\n            {chartData.map((entry, index) => (\n              <Cell key={`cell-${index}`} fill={entry.color} />\n            ))}\n          </Pie>\n          <Tooltip \n            formatter={(value: number) => [`${value} orders`, 'Count']}\n          />\n          <Legend \n            verticalAlign=\"bottom\" \n            height={36}\n            formatter={(value) => <span className=\"text-xs\">{value}</span>}\n          />\n        </PieChart>\n      </ResponsiveContainer>\n    </div>\n  );\n}\n","size_bytes":1622},"client/src/components/charts/RevenueChart.tsx":{"content":"import { AreaChart, Area, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, Legend } from 'recharts';\nimport { useAuthQuery } from '@/hooks/use-auth-query';\n\ninterface RevenueTrendData {\n  date: string;\n  revenue: number;\n  orders: number;\n}\n\nexport default function RevenueChart() {\n  const { data: chartData = [], isLoading } = useAuthQuery<RevenueTrendData[]>({\n    queryKey: ['/api/dashboard/revenue-trend'],\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"h-64 flex items-center justify-center\">\n        <div className=\"animate-pulse text-muted-foreground\">Loading chart data...</div>\n      </div>\n    );\n  }\n\n  if (chartData.length === 0) {\n    return (\n      <div className=\"h-64 flex items-center justify-center\">\n        <div className=\"text-muted-foreground\">No data available</div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"h-64\">\n      <ResponsiveContainer width=\"100%\" height=\"100%\">\n        <AreaChart data={chartData}>\n          <CartesianGrid strokeDasharray=\"3 3\" className=\"opacity-30\" />\n          <XAxis \n            dataKey=\"date\" \n            className=\"text-xs\"\n            tick={{ fontSize: 12 }}\n            tickFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n          />\n          <YAxis \n            yAxisId=\"revenue\"\n            orientation=\"left\"\n            className=\"text-xs\"\n            tick={{ fontSize: 12 }}\n            tickFormatter={(value) => `₹${(value / 1000).toFixed(0)}k`}\n          />\n          <YAxis \n            yAxisId=\"orders\"\n            orientation=\"right\"\n            className=\"text-xs\"\n            tick={{ fontSize: 12 }}\n            tickFormatter={(value) => `${value}`}\n          />\n          <Tooltip \n            formatter={(value: number, name: string) => [\n              name === 'revenue' ? `₹${value.toLocaleString()}` : `${value} orders`, \n              name === 'revenue' ? 'Revenue' : 'Orders'\n            ]}\n            labelFormatter={(label) => `Date: ${new Date(label).toLocaleDateString()}`}\n          />\n          <Legend />\n          <Area \n            yAxisId=\"revenue\"\n            type=\"monotone\" \n            dataKey=\"revenue\" \n            stroke=\"hsl(214 100% 59%)\" \n            fill=\"hsl(214 100% 59% / 0.3)\"\n            strokeWidth={2}\n            name=\"Revenue\"\n          />\n          <Area \n            yAxisId=\"orders\"\n            type=\"monotone\" \n            dataKey=\"orders\" \n            stroke=\"hsl(147 78% 42%)\" \n            fill=\"hsl(147 78% 42% / 0.3)\"\n            strokeWidth={2}\n            name=\"Orders\"\n          />\n        </AreaChart>\n      </ResponsiveContainer>\n    </div>\n  );\n}\n","size_bytes":2671},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/hooks/use-auth-query.ts":{"content":"import { useQuery, useMutation, UseQueryOptions, UseMutationOptions } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { apiRequest, getQueryFn } from \"@/lib/queryClient\";\n\nexport function useAuthQuery<T>(options: UseQueryOptions<T> & { queryKey: readonly string[] }) {\n  const { token } = useAuth();\n  \n  return useQuery({\n    ...options,\n    queryFn: getQueryFn({ on401: \"throw\", token }),\n  });\n}\n\nexport function useAuthMutation<TData = unknown, TError = unknown, TVariables = void>(\n  mutationFn: (variables: TVariables, token: string | null) => Promise<TData>,\n  options?: UseMutationOptions<TData, TError, TVariables>\n) {\n  const { token } = useAuth();\n  \n  const authenticatedMutationFn = async (variables: TVariables): Promise<TData> => {\n    return mutationFn(variables, token);\n  };\n\n  return useMutation({\n    mutationFn: authenticatedMutationFn,\n    ...options,\n  });\n}\n\nexport function useAuthApiRequest() {\n  const { token } = useAuth();\n  \n  return (method: string, url: string, data?: unknown) => {\n    return apiRequest(method, url, data, token);\n  };\n}","size_bytes":1109},"README.md":{"content":"# Meesho Payment Reconciliation System\n\nA full-stack web application for reconciling payment data from Meesho with automated order matching and financial reporting capabilities.\n\n## 🚀 Features\n\n- **Authentication**: Firebase-based user authentication with email/password and Google sign-in\n- **File Upload**: Support for CSV and Excel file uploads for payment and order data\n- **Data Reconciliation**: Automated matching of payments with orders\n- **Dashboard**: Real-time analytics with charts and metrics\n- **Responsive Design**: Modern UI built with React, Tailwind CSS, and Shadcn/UI components\n\n## 🛠 Tech Stack\n\n**Frontend:**\n- React 18 with TypeScript\n- Vite for build tooling\n- Tailwind CSS + Shadcn/UI components\n- React Query for state management\n- Recharts for data visualization\n- Wouter for routing\n\n**Backend:**\n- Node.js with Express\n- TypeScript\n- Firebase Admin SDK\n- Drizzle ORM for database operations\n\n**Database:**\n- PostgreSQL (Supabase)\n- Drizzle ORM for schema management\n\n**Authentication:**\n- Firebase Authentication\n- Google OAuth integration\n- Session-based authentication with express-session\n\n## 🔧 Environment Setup\n\n### Quick Setup for New Developers\n\n1. **Check Configuration Files**:\n   - All credentials are stored in `config/setup.js` and `config/env.template`\n   - Use these files to quickly understand and set up the project\n\n2. **Run Setup Helper** (optional):\n   ```bash\n   node -e \"require('./config/setup.js').setupEnvironment()\"\n   ```\n\n### Required Environment Variables\n\nCopy values from `config/env.template` to your Replit Secrets:\n\n```env\n# Firebase Configuration\nVITE_FIREBASE_PROJECT_ID=reconme-fbee1\nVITE_FIREBASE_APP_ID=1:511599323860:web:38ac9cf5e061ff350e2941\nVITE_FIREBASE_API_KEY=AIzaSyCLtVv-8X3mBfKeCkS_Q0nqk-7DoPfDo4c\nVITE_FIREBASE_MESSAGING_SENDER_ID=511599323860\n\n# Database\nDATABASE_URL=postgresql://postgres:$Harsh98@db.tepwrjnmaosalngjffvy.supabase.co:5432/postgres\n```\n\n### Firebase Configuration Details\n\n```javascript\nconst firebaseConfig = {\n  apiKey: \"AIzaSyCLtVv-8X3mBfKeCkS_Q0nqk-7DoPfDo4c\",\n  authDomain: \"reconme-fbee1.firebaseapp.com\",\n  databaseURL: \"https://reconme-fbee1-default-rtdb.firebaseio.com\",\n  projectId: \"reconme-fbee1\",\n  storageBucket: \"reconme-fbee1.firebasestorage.app\",\n  messagingSenderId: \"511599323860\",\n  appId: \"1:511599323860:web:38ac9cf5e061ff350e2941\"\n};\n```\n\n### Test Credentials\n\nFor testing purposes, use these credentials:\n- **Email**: test@gmail.com\n- **Password**: test1234\n\n## 📦 Installation & Setup\n\n1. **Install Dependencies**:\n   ```bash\n   npm install\n   ```\n\n2. **Set Environment Variables**:\n   - Add the Firebase environment variables listed above\n   - Ensure DATABASE_URL is configured for your database\n\n3. **Database Setup**:\n   ```bash\n   npm run db:push\n   ```\n\n4. **Start Development Server**:\n   ```bash\n   npm run dev\n   ```\n\n## 📁 Project Structure\n\n```\n├── client/                 # Frontend React application\n│   ├── src/\n│   │   ├── components/     # Reusable UI components\n│   │   ├── contexts/       # React contexts (Auth, etc.)\n│   │   ├── hooks/          # Custom React hooks\n│   │   ├── lib/           # Utilities and configurations\n│   │   ├── pages/         # Page components\n│   │   └── main.tsx       # Entry point\n├── server/                # Backend Express server\n│   ├── services/          # Business logic services\n│   ├── index.ts          # Server entry point\n│   └── routes.ts         # API routes\n├── shared/               # Shared types and schemas\n└── package.json          # Dependencies and scripts\n```\n\n## 🔄 Available Scripts\n\n- `npm run dev` - Start development server\n- `npm run build` - Build for production\n- `npm run start` - Start production server\n- `npm run check` - TypeScript type checking\n- `npm run db:push` - Push database schema changes\n\n## 🔐 Security Features\n\n- Environment variable-based configuration\n- Firebase authentication with secure token management\n- Session-based authentication with secure cookies\n- Input validation using Zod schemas\n- Protected API routes with authentication middleware\n\n## 🚀 Deployment\n\nThe application is configured for Replit deployment:\n- Frontend serves from port 5000\n- Backend API runs on the same port\n- Environment variables managed through Replit's secret management\n- Automatic SSL and domain setup\n\n## 🔄 Data Flow\n\n1. **File Upload**: Users upload payment/order CSV/Excel files\n2. **Processing**: Backend processes and validates data\n3. **Storage**: Data stored in PostgreSQL database\n4. **Reconciliation**: Automated matching of payments with orders\n5. **Visualization**: Dashboard displays reconciliation results and analytics\n\n## 🤝 Contributing\n\nWhen making changes to this project:\n\n1. Ensure environment variables are properly configured\n2. Test authentication flows with provided test credentials\n3. Verify database connectivity before deploying\n4. Follow existing code patterns and TypeScript conventions\n\n## 📝 Notes for Future Development\n\n- Firebase project: `reconme-fbee1`\n- Database: Supabase PostgreSQL instance\n- Authentication supports both email/password and Google OAuth\n- All sensitive configuration is environment-based for security\n- The project uses modern React patterns with hooks and context\n- Backend follows RESTful API design principles\n\n## 🆘 Troubleshooting\n\n**Authentication Issues:**\n- Verify Firebase environment variables are set correctly\n- Check Firebase console for authorized domains\n- Ensure test credentials are active in Firebase Auth\n\n**Database Issues:**\n- Verify DATABASE_URL connection string\n- Check Supabase dashboard for connection limits\n- Run `npm run db:push` to sync schema\n\n**Build Issues:**\n- Clear node_modules and reinstall: `rm -rf node_modules && npm install`\n- Check TypeScript compilation: `npm run check`\n- Verify all environment variables are set","size_bytes":5961},"config/setup.js":{"content":"// Quick Setup Configuration\n// This file contains all the configuration needed for the application\n// For security, actual values are stored in environment variables\n\nexport const firebaseConfig = {\n  apiKey: \"AIzaSyCLtVv-8X3mBfKeCkS_Q0nqk-7DoPfDo4c\",\n  authDomain: \"reconme-fbee1.firebaseapp.com\",\n  databaseURL: \"https://reconme-fbee1-default-rtdb.firebaseio.com\",\n  projectId: \"reconme-fbee1\",\n  storageBucket: \"reconme-fbee1.firebasestorage.app\",\n  messagingSenderId: \"511599323860\",\n  appId: \"1:511599323860:web:38ac9cf5e061ff350e2941\"\n};\n\nexport const databaseConfig = {\n  url: \"postgresql://postgres:$Harsh98@db.tepwrjnmaosalngjffvy.supabase.co:5432/postgres\"\n};\n\nexport const testCredentials = {\n  email: \"test@gmail.com\",\n  password: \"test1234\"\n};\n\n// Quick setup function for new developers\nexport function setupEnvironment() {\n  console.log(\"=== Meesho Payment Reconciliation Setup ===\");\n  console.log(\"1. Set these environment variables in Replit Secrets:\");\n  console.log(\"   VITE_FIREBASE_PROJECT_ID:\", firebaseConfig.projectId);\n  console.log(\"   VITE_FIREBASE_APP_ID:\", firebaseConfig.appId);\n  console.log(\"   VITE_FIREBASE_API_KEY:\", firebaseConfig.apiKey);\n  console.log(\"   VITE_FIREBASE_MESSAGING_SENDER_ID:\", firebaseConfig.messagingSenderId);\n  console.log(\"   DATABASE_URL:\", databaseConfig.url);\n  console.log(\"\");\n  console.log(\"2. Test login credentials:\");\n  console.log(\"   Email:\", testCredentials.email);\n  console.log(\"   Password:\", testCredentials.password);\n  console.log(\"\");\n  console.log(\"3. Run 'npm install' then 'npm run dev'\");\n}\n\n// Uncomment the line below to run setup\n// setupEnvironment();","size_bytes":1638},"CREDENTIALS.md":{"content":"# Embedded Credentials Reference\n\nAll credentials are now embedded directly in the code for easy future usage:\n\n## Firebase Configuration (Client & Server)\n- **Project ID**: reconme-fbee1\n- **API Key**: AIzaSyCLtVv-8X3mBfKeCkS_Q0nqk-7DoPfDo4c\n- **App ID**: 1:511599323860:web:38ac9cf5e061ff350e2941\n- **Messaging Sender ID**: 511599323860\n\n## Database Configuration  \n- **Supabase URL**: postgresql://postgres:$Harsh98@db.tepwrjnmaosalngjffvy.supabase.co:5432/postgres\n\n## Test Login Credentials\n- **Email**: test@gmail.com\n- **Password**: test1234\n\n## File Locations\n- Client Firebase Config: `client/src/lib/firebase.ts`\n- Server Firebase Config: `server/services/firebase.ts`\n- Database Config: `server/storage.ts`\n\nAll configurations are embedded with fallbacks, so the application will work immediately after download without any environment setup required.","size_bytes":862},"LOCAL_SETUP_INSTRUCTIONS.md":{"content":"# Local Setup Instructions - Meesho Payment Reconciliation System\n\nComplete step-by-step guide to run the Meesho Payment Reconciliation application on your local machine.\n\n## 📋 Prerequisites\n\nBefore starting, ensure you have the following installed:\n\n### Required Software\n1. **Node.js** (version 18 or higher)\n   - Download from: https://nodejs.org/\n   - Verify installation: `node --version`\n\n2. **npm** (comes with Node.js)\n   - Verify installation: `npm --version`\n\n3. **Git** (for cloning repository)\n   - Download from: https://git-scm.com/\n   - Verify installation: `git --version`\n\n## 🚀 Step 1: Get the Code\n\n### Option A: Clone from GitHub (if available)\n```bash\ngit clone <your-github-repository-url>\ncd meesho-payment-reconciliation\n```\n\n### Option B: Download ZIP file\n1. Download the project ZIP file\n2. Extract to your desired folder\n3. Open terminal/command prompt in the extracted folder\n\n## 📦 Step 2: Install Dependencies\n\n```bash\n# Install all project dependencies\nnpm install\n```\n\n**Expected output:** You should see packages being installed and no major errors.\n\n## 🗄️ Step 3: Database Setup\n\nThe application uses Supabase PostgreSQL database with embedded credentials.\n\n### Push Database Schema\n```bash\n# Create all required database tables\nnpm run db:push\n```\n\n**Expected output:** \n```\n✓ Pulling schema from database...\n✓ Changes applied\n```\n\n## 🔥 Step 4: Firebase Configuration\n\n**✅ No setup required!** All Firebase credentials are embedded in the code:\n- Located in: `client/src/lib/firebase.ts` and `server/services/firebase.ts`\n- Project: `reconme-fbee1`\n- All configuration is automatic\n\n## ▶️ Step 5: Start the Application\n\n```bash\n# Start the development server\nnpm run dev\n```\n\n**Expected output:**\n```\n> rest-express@1.0.0 dev\n> NODE_ENV=development tsx server/index.ts\n\n[timestamp] [express] serving on port 5000\n```\n\n## 🌐 Step 6: Access the Application\n\n1. **Open your web browser**\n2. **Navigate to:** `http://localhost:5000`\n3. **You should see:** The login page for Meesho Payment Reconciliation\n\n## 🔐 Step 7: Test Login\n\nUse the embedded test credentials:\n- **Email:** `test@gmail.com`\n- **Password:** `test1234`\n\n### Login Process:\n1. Enter the credentials on the login page\n2. Click \"Sign In\"\n3. You should be redirected to the Dashboard\n4. Dashboard should display analytics and summary data\n\n## 📁 Step 8: Test File Upload\n\n1. **Navigate to Upload page** (use sidebar menu)\n2. **Test with sample files:**\n   - **Orders CSV:** Any CSV file with order data\n   - **Payment Excel:** Any XLSX file with payment data\n3. **Upload process:**\n   - Select files\n   - Add source month/label (optional)\n   - Click \"Process Files\"\n   - Check upload status in the history section\n\n## 🛠️ Step 9: Verify All Features\n\n### Core Features to Test:\n- ✅ **Authentication:** Login/logout works\n- ✅ **Dashboard:** Analytics and charts display\n- ✅ **File Upload:** CSV and Excel files can be uploaded\n- ✅ **Data Processing:** Files are processed and stored\n- ✅ **Navigation:** All menu items work (Orders, Products, Reconciliation)\n\n## 🔧 Step 10: Development Commands\n\n```bash\n# Start development server\nnpm run dev\n\n# Build for production\nnpm run build\n\n# Start production server\nnpm run start\n\n# Check TypeScript types\nnpm run check\n\n# Push database schema changes\nnpm run db:push\n```\n\n## 📂 Project Structure Overview\n\n```\nmeesho-payment-reconciliation/\n├── client/                 # Frontend React application\n│   ├── src/\n│   │   ├── components/     # Reusable UI components\n│   │   ├── pages/         # Page components\n│   │   ├── lib/           # Firebase and utility configs\n│   │   └── contexts/      # React contexts\n├── server/                # Backend Express server\n│   ├── services/          # Business logic\n│   ├── routes.ts          # API routes\n│   └── storage.ts         # Database operations\n├── shared/                # Shared types and schemas\n└── config/               # Configuration files\n```\n\n## 🚨 Troubleshooting\n\n### Common Issues and Solutions:\n\n#### 1. **Port 5000 already in use**\n```bash\n# Kill process using port 5000\nnpx kill-port 5000\n# Then restart\nnpm run dev\n```\n\n#### 2. **Database connection errors**\n- **Issue:** `relation \"users\" does not exist`\n- **Solution:** Run `npm run db:push` to create tables\n\n#### 3. **Firebase authentication errors**\n- **Issue:** `Invalid API key`\n- **Solution:** Credentials are embedded, restart the server: `npm run dev`\n\n#### 4. **Module not found errors**\n```bash\n# Clean install dependencies\nrm -rf node_modules\nrm package-lock.json\nnpm install\n```\n\n#### 5. **TypeScript errors**\n```bash\n# Check for type errors\nnpm run check\n```\n\n#### 6. **Build errors**\n```bash\n# Clean build\nrm -rf dist\nnpm run build\n```\n\n## 📊 Using the Application\n\n### 1. **Dashboard**\n- View revenue analytics\n- Monitor reconciliation status\n- Check order success rates\n\n### 2. **Upload Files**\n- **Payment Files:** Upload Meesho payment XLSX files\n- **Order Files:** Upload order CSV files\n- Monitor processing status\n\n### 3. **Orders Management**\n- View all uploaded orders\n- Filter by date, status, sub-order number\n- Export data\n\n### 4. **Products Management**\n- View product catalog\n- Update cost prices and GST\n- Monitor product performance\n\n### 5. **Reconciliation**\n- View matched/unmatched payments\n- Analyze profit margins\n- Export reconciliation reports\n\n## 🔒 Important Notes\n\n### Security:\n- **Database credentials** are embedded for development\n- **Firebase credentials** are embedded for easy setup\n- **For production:** Use environment variables\n\n### Data:\n- **Test data** is safe to use\n- **Real data** will be processed and stored\n- **Database** is persistent across restarts\n\n### Performance:\n- **File size limit:** 50MB per upload\n- **Supported formats:** CSV, XLSX, ZIP\n- **Processing** is asynchronous\n\n## ✅ Success Checklist\n\nBefore considering setup complete, verify:\n\n- [ ] Node.js and npm installed\n- [ ] Dependencies installed without errors\n- [ ] Database tables created (`npm run db:push`)\n- [ ] Server starts on port 5000\n- [ ] Login works with test credentials\n- [ ] Dashboard loads with data\n- [ ] File upload interface accessible\n- [ ] All navigation menu items work\n\n## 📞 Getting Help\n\nIf you encounter issues:\n\n1. **Check the console** for error messages\n2. **Verify prerequisites** are installed correctly\n3. **Run commands in order** as specified\n4. **Check database connectivity** with `npm run db:push`\n5. **Restart the server** if authentication fails\n\n## 🎯 Next Steps\n\nAfter successful setup:\n\n1. **Customize** the application for your needs\n2. **Upload real data** for testing\n3. **Configure production** environment variables\n4. **Deploy** to your preferred hosting platform\n\n---\n\n**🎉 Congratulations!** Your Meesho Payment Reconciliation System is now running locally!","size_bytes":6950},".local/state/replit/agent/progress_tracker.md":{"content":"[x] 1. Install the required packages\n[x] 2. Set up PostgreSQL database and push database schema  \n[x] 3. Restart the workflow to see if the project is working\n[x] 4. Verify the project is working using the feedback tool\n[x] 5. Enhanced CSV file processing to extract Payment Date and Payment Status from order data\n[x] 6. Added ZIP file processing capability to handle payment settlement files\n[x] 7. Updated database schema with paymentStatus and paymentDate columns\n[x] 8. Implemented payment data reconciliation to update orders after processing ZIP files\n[x] 9. Enhanced frontend to display payment information with proper status badges\n[x] 10. Optimized column mapping for Orders and Products pages with robust field detection\n[x] 11. Migration and enhancement completed - project is ready for development\n\n## Enhancement Summary\n✅ **Payment Data Processing**: The system now extracts payment information from both CSV and ZIP files:\n- **CSV Processing**: Extracts payment status from \"Reason for Credit Entry\" field (DELIVERED → PAID, RTO_COMPLETE → REFUNDED, etc.)\n- **ZIP Processing**: Handles payment settlement files (XLSX format) and updates orders with actual payment dates and settlement amounts\n- **Database Integration**: Orders table now includes paymentStatus and paymentDate columns for comprehensive payment tracking\n- **Frontend Enhancement**: Orders page displays enhanced payment status badges with proper color coding and status mapping\n- **Data Reconciliation**: Automatic reconciliation of payment settlement data with existing orders\n\n## Previous Known Issues\n- **Login Redirect Issue**: After successful login, users may not be automatically redirected to the dashboard. This is due to the authentication flow relying on React component re-rendering rather than explicit navigation. The authentication is working correctly (backend API calls succeed), but the frontend component state update doesn't always trigger the expected redirect from login to dashboard view.","size_bytes":1999},"client/src/components/charts/DailyVolumeChart.tsx":{"content":"import { useAuthQuery } from '@/hooks/use-auth-query';\nimport { AreaChart, Area, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, Legend } from 'recharts';\nimport type { DailyVolumeData } from '@shared/schema';\n\nexport default function DailyVolumeChart() {\n  const { data: chartData = [], isLoading } = useAuthQuery<DailyVolumeData[]>({\n    queryKey: ['/api/dashboard/daily-volume'],\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"h-64 flex items-center justify-center\">\n        <div className=\"animate-pulse text-muted-foreground\">Loading chart data...</div>\n      </div>\n    );\n  }\n\n  if (chartData.length === 0) {\n    return (\n      <div className=\"h-64 flex items-center justify-center\">\n        <div className=\"text-muted-foreground\">No data available</div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"h-64\">\n      <ResponsiveContainer width=\"100%\" height=\"100%\">\n        <AreaChart data={chartData}>\n          <CartesianGrid strokeDasharray=\"3 3\" className=\"opacity-30\" />\n          <XAxis \n            dataKey=\"date\" \n            className=\"text-xs\"\n            tick={{ fontSize: 12 }}\n            tickFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n          />\n          <YAxis \n            yAxisId=\"volume\"\n            orientation=\"left\"\n            className=\"text-xs\"\n            tick={{ fontSize: 12 }}\n            tickFormatter={(value) => `${value}`}\n          />\n          <YAxis \n            yAxisId=\"aov\"\n            orientation=\"right\"\n            className=\"text-xs\"\n            tick={{ fontSize: 12 }}\n            tickFormatter={(value) => `₹${value.toFixed(0)}`}\n          />\n          <Tooltip \n            formatter={(value: number, name: string) => [\n              name === 'orderVolume' ? `${value} orders` : `₹${value.toFixed(2)}`, \n              name === 'orderVolume' ? 'Order Volume' : 'AOV'\n            ]}\n            labelFormatter={(label) => `Date: ${new Date(label).toLocaleDateString()}`}\n          />\n          <Legend />\n          <Area \n            yAxisId=\"volume\"\n            type=\"monotone\" \n            dataKey=\"orderVolume\" \n            stroke=\"hsl(214 100% 59%)\" \n            fill=\"hsl(214 100% 59% / 0.3)\"\n            strokeWidth={2}\n            name=\"Order Volume\"\n          />\n          <Area \n            yAxisId=\"aov\"\n            type=\"monotone\" \n            dataKey=\"aov\" \n            stroke=\"hsl(147 78% 42%)\" \n            fill=\"hsl(147 78% 42% / 0.3)\"\n            strokeWidth={2}\n            name=\"AOV\"\n          />\n        </AreaChart>\n      </ResponsiveContainer>\n    </div>\n  );\n}","size_bytes":2631},"client/src/components/charts/TopProductsChart.tsx":{"content":"import { useAuthQuery } from '@/hooks/use-auth-query';\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\nimport type { TopProductsData } from '@shared/schema';\n\nexport default function TopProductsChart() {\n  const { data: chartData = [], isLoading } = useAuthQuery<TopProductsData[]>({\n    queryKey: ['/api/dashboard/top-products'],\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"h-64 flex items-center justify-center\">\n        <div className=\"animate-pulse text-muted-foreground\">Loading chart data...</div>\n      </div>\n    );\n  }\n\n  if (chartData.length === 0) {\n    return (\n      <div className=\"h-64 flex items-center justify-center\">\n        <div className=\"text-muted-foreground\">No data available</div>\n      </div>\n    );\n  }\n\n  // Format data for chart display\n  const chartFormattedData = chartData.map(item => ({\n    ...item,\n    displayName: item.name && item.name.length > 15 ? `${item.name.substring(0, 15)}...` : (item.name || 'Unknown Product')\n  }));\n\n  return (\n    <div className=\"h-64\">\n      <ResponsiveContainer width=\"100%\" height=\"100%\">\n        <BarChart data={chartFormattedData} layout=\"horizontal\">\n          <CartesianGrid strokeDasharray=\"3 3\" className=\"opacity-30\" />\n          <XAxis \n            type=\"number\"\n            className=\"text-xs\"\n            tick={{ fontSize: 12 }}\n          />\n          <YAxis \n            type=\"category\"\n            dataKey=\"displayName\"\n            className=\"text-xs\"\n            tick={{ fontSize: 10 }}\n            width={120}\n          />\n          <Tooltip \n            formatter={(value: number) => [`${value} orders`, 'Orders']}\n            labelFormatter={(label) => {\n              const item = chartFormattedData.find(d => d.displayName === label);\n              return `Product: ${item?.name || label}`;\n            }}\n          />\n          <Bar \n            dataKey=\"orders\" \n            fill=\"hsl(147 78% 42%)\"\n            radius={[0, 4, 4, 0]}\n          />\n        </BarChart>\n      </ResponsiveContainer>\n    </div>\n  );\n}","size_bytes":2072},"client/src/components/charts/TopReturnsChart.tsx":{"content":"import { useAuthQuery } from '@/hooks/use-auth-query';\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\nimport type { TopReturnsData } from '@shared/schema';\n\nexport default function TopReturnsChart() {\n  const { data: chartData = [], isLoading } = useAuthQuery<TopReturnsData[]>({\n    queryKey: ['/api/dashboard/top-returns'],\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"h-64 flex items-center justify-center\">\n        <div className=\"animate-pulse text-muted-foreground\">Loading chart data...</div>\n      </div>\n    );\n  }\n\n  if (chartData.length === 0) {\n    return (\n      <div className=\"h-64 flex items-center justify-center\">\n        <div className=\"text-muted-foreground\">No data available</div>\n      </div>\n    );\n  }\n\n  // Format data for chart display\n  const chartFormattedData = chartData.map(item => ({\n    ...item,\n    displayName: item.name.length > 15 ? `${item.name.substring(0, 15)}...` : item.name\n  }));\n\n  return (\n    <div className=\"h-64\">\n      <ResponsiveContainer width=\"100%\" height=\"100%\">\n        <BarChart data={chartFormattedData} layout=\"horizontal\">\n          <CartesianGrid strokeDasharray=\"3 3\" className=\"opacity-30\" />\n          <XAxis \n            type=\"number\"\n            className=\"text-xs\"\n            tick={{ fontSize: 12 }}\n          />\n          <YAxis \n            type=\"category\"\n            dataKey=\"displayName\"\n            className=\"text-xs\"\n            tick={{ fontSize: 10 }}\n            width={120}\n          />\n          <Tooltip \n            formatter={(value: number, name: string) => [\n              `${value}`,\n              name === 'returns' ? 'Returns' : name === 'rtoCount' ? 'RTOs' : 'Combined'\n            ]}\n            labelFormatter={(label) => {\n              const item = chartFormattedData.find(d => d.displayName === label);\n              return `Product: ${item?.name || label}`;\n            }}\n          />\n          <Bar \n            dataKey=\"returns\" \n            fill=\"hsl(0 84% 60%)\"\n            radius={[0, 2, 2, 0]}\n          />\n          <Bar \n            dataKey=\"rtoCount\" \n            fill=\"hsl(45 93% 47%)\"\n            radius={[0, 2, 2, 0]}\n          />\n        </BarChart>\n      </ResponsiveContainer>\n    </div>\n  );\n}","size_bytes":2276},"client/src/components/LiveDashboard.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useQuery, useQueryClient } from '@tanstack/react-query';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { \n  LineChart, Line, AreaChart, Area, BarChart, Bar, PieChart, Pie, Cell,\n  XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer \n} from 'recharts';\nimport { \n  TrendingUp, TrendingDown, DollarSign, Package, ShoppingCart, \n  Calculator, RotateCcw, Activity, Target, TrendingDown as LossIcon \n} from 'lucide-react';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { apiRequest } from '@/lib/queryClient';\n\ninterface LiveMetrics {\n  totalProducts: number;\n  totalOrders: number;\n  totalSales: number;\n  totalGST: number;\n  profitLoss: number;\n  trends: {\n    sales: { date: string; value: number }[];\n    gst: { date: string; value: number }[];\n    profit: { date: string; value: number }[];\n  };\n}\n\nconst formatCurrency = (amount: number) => {\n  return new Intl.NumberFormat('en-IN', {\n    style: 'currency',\n    currency: 'INR',\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 0,\n  }).format(amount);\n};\n\nconst formatNumber = (num: number) => {\n  return new Intl.NumberFormat('en-IN').format(num);\n};\n\n// Color schemes for charts\nconst COLORS = {\n  primary: '#3B82F6',\n  success: '#10B981',\n  warning: '#F59E0B',\n  danger: '#EF4444',\n  purple: '#8B5CF6',\n  teal: '#14B8A6',\n};\n\nconst CHART_COLORS = [COLORS.primary, COLORS.success, COLORS.warning, COLORS.purple, COLORS.teal];\n\nexport default function LiveDashboard() {\n  const [isRecalculating, setIsRecalculating] = useState(false);\n  const queryClient = useQueryClient();\n  const { token } = useAuth();\n\n  const { data: liveMetrics, isLoading, error, refetch } = useQuery<LiveMetrics>({\n    queryKey: ['/api/dashboard/live-metrics'],\n    queryFn: async () => {\n      const response = await apiRequest('GET', '/api/dashboard/live-metrics', undefined, token);\n      return response.json();\n    },\n    enabled: !!token,\n    refetchInterval: 30000, // Auto-refresh every 30 seconds\n    staleTime: 10000, // Consider stale after 10 seconds\n  });\n\n  const handleRecalculate = async () => {\n    setIsRecalculating(true);\n    try {\n      await apiRequest('POST', '/api/dashboard/recalculate', undefined, token);\n      await refetch();\n      queryClient.invalidateQueries(); // Refresh all related queries\n    } catch (error) {\n      console.error('Failed to recalculate metrics:', error);\n    } finally {\n      setIsRecalculating(false);\n    }\n  };\n\n  // Auto-refresh when window regains focus\n  useEffect(() => {\n    const handleFocus = () => refetch();\n    window.addEventListener('focus', handleFocus);\n    return () => window.removeEventListener('focus', handleFocus);\n  }, [refetch]);\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"flex justify-between items-center\">\n          <h1 className=\"text-3xl font-bold\">Live Dashboard</h1>\n          <div className=\"animate-pulse bg-muted h-10 w-32 rounded\"></div>\n        </div>\n        <div className=\"grid responsive-grid lg:grid-cols-5 gap-6\">\n          {[...Array(5)].map((_, i) => (\n            <Card key={i} className=\"animate-pulse\">\n              <CardContent className=\"p-6\">\n                <div className=\"h-20 bg-muted rounded\"></div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n        <div className=\"grid responsive-grid lg:grid-cols-2 gap-6\">\n          {[...Array(2)].map((_, i) => (\n            <Card key={i} className=\"animate-pulse\">\n              <CardContent className=\"p-6\">\n                <div className=\"h-64 bg-muted rounded\"></div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"flex flex-col items-center justify-center min-h-[400px] space-y-4\">\n        <div className=\"text-center\">\n          <h2 className=\"text-xl font-semibold text-destructive\">Failed to load live metrics</h2>\n          <p className=\"text-muted-foreground mt-2\">Please try refreshing or contact support if the issue persists.</p>\n        </div>\n        <Button onClick={() => refetch()} variant=\"outline\">\n          <RotateCcw className=\"w-4 h-4 mr-2\" />\n          Retry\n        </Button>\n      </div>\n    );\n  }\n\n  const metrics = liveMetrics!;\n  const isProfitable = metrics.profitLoss > 0;\n\n  // Prepare chart data\n  const combinedTrendData = metrics.trends.sales.map((sales, index) => ({\n    date: new Date(sales.date).toLocaleDateString('en-IN', { month: 'short', day: 'numeric' }),\n    sales: sales.value,\n    gst: metrics.trends.gst[index]?.value || 0,\n    profit: metrics.trends.profit[index]?.value || 0,\n  }));\n\n  const profitLossData = [\n    { name: 'Revenue', value: metrics.totalSales, color: COLORS.success },\n    { name: 'Costs', value: metrics.totalSales - metrics.profitLoss, color: COLORS.danger },\n  ];\n\n  return (\n    <div className=\"space-y-6 animate-fadeIn\">\n      {/* Header */}\n      <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4\">\n        <div>\n          <h1 className=\"text-3xl font-bold gradient-text\">Live Dashboard</h1>\n          <p className=\"text-muted-foreground mt-1\">Real-time business metrics and analytics</p>\n        </div>\n        <div className=\"flex items-center gap-3\">\n          <Badge variant=\"outline\" className=\"animate-pulse\">\n            <Activity className=\"w-3 h-3 mr-1\" />\n            Live\n          </Badge>\n          <Button \n            onClick={handleRecalculate} \n            disabled={isRecalculating}\n            variant=\"outline\"\n            size=\"sm\"\n          >\n            <RotateCcw className={`w-4 h-4 mr-2 ${isRecalculating ? 'animate-spin' : ''}`} />\n            {isRecalculating ? 'Recalculating...' : 'Refresh'}\n          </Button>\n        </div>\n      </div>\n\n      {/* Key Metrics Cards */}\n      <div className=\"grid responsive-grid lg:grid-cols-5 gap-6\">\n        <Card className=\"metric-card hover-lift\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">Total Products</p>\n                <p className=\"text-2xl font-bold mt-1\">{formatNumber(metrics.totalProducts)}</p>\n              </div>\n              <Package className=\"w-8 h-8 text-primary\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"metric-card hover-lift\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">Total Orders</p>\n                <p className=\"text-2xl font-bold mt-1\">{formatNumber(metrics.totalOrders)}</p>\n              </div>\n              <ShoppingCart className=\"w-8 h-8 text-blue-500\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"metric-card hover-lift\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">Total Sales</p>\n                <p className=\"text-2xl font-bold mt-1 text-green-600\">{formatCurrency(metrics.totalSales)}</p>\n              </div>\n              <DollarSign className=\"w-8 h-8 text-green-500\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"metric-card hover-lift\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">Total GST</p>\n                <p className=\"text-2xl font-bold mt-1 text-orange-600\">{formatCurrency(metrics.totalGST)}</p>\n              </div>\n              <Calculator className=\"w-8 h-8 text-orange-500\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className={`metric-card hover-lift ${isProfitable ? 'border-green-200' : 'border-red-200'}`}>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">Profit/Loss</p>\n                <p className={`text-2xl font-bold mt-1 ${isProfitable ? 'text-green-600' : 'text-red-600'}`}>\n                  {formatCurrency(metrics.profitLoss)}\n                </p>\n              </div>\n              {isProfitable ? (\n                <TrendingUp className=\"w-8 h-8 text-green-500\" />\n              ) : (\n                <LossIcon className=\"w-8 h-8 text-red-500\" />\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Charts Section */}\n      <div className=\"grid responsive-grid lg:grid-cols-2 gap-6\">\n        {/* Sales Trend Chart */}\n        <Card className=\"modern-card hover-lift\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <TrendingUp className=\"w-5 h-5\" />\n              Sales, GST & Profit Trends\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <ResponsiveContainer width=\"100%\" height={300}>\n              <LineChart data={combinedTrendData}>\n                <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#f0f0f0\" />\n                <XAxis \n                  dataKey=\"date\" \n                  stroke=\"#666\"\n                  fontSize={12}\n                />\n                <YAxis \n                  stroke=\"#666\"\n                  fontSize={12}\n                  tickFormatter={(value) => `₹${(value / 1000).toFixed(0)}K`}\n                />\n                <Tooltip \n                  formatter={(value, name) => [formatCurrency(Number(value)), name]}\n                  labelStyle={{ color: '#666' }}\n                />\n                <Legend />\n                <Line \n                  type=\"monotone\" \n                  dataKey=\"sales\" \n                  stroke={COLORS.success} \n                  strokeWidth={3}\n                  dot={{ fill: COLORS.success, strokeWidth: 2, r: 4 }}\n                  name=\"Sales\"\n                  animationDuration={1000}\n                />\n                <Line \n                  type=\"monotone\" \n                  dataKey=\"gst\" \n                  stroke={COLORS.warning} \n                  strokeWidth={2}\n                  dot={{ fill: COLORS.warning, strokeWidth: 2, r: 3 }}\n                  name=\"GST\"\n                  animationDuration={1200}\n                />\n                <Line \n                  type=\"monotone\" \n                  dataKey=\"profit\" \n                  stroke={COLORS.primary} \n                  strokeWidth={2}\n                  dot={{ fill: COLORS.primary, strokeWidth: 2, r: 3 }}\n                  name=\"Profit\"\n                  animationDuration={1400}\n                />\n              </LineChart>\n            </ResponsiveContainer>\n          </CardContent>\n        </Card>\n\n        {/* Profit/Loss Breakdown */}\n        <Card className=\"modern-card hover-lift\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Target className=\"w-5 h-5\" />\n              Revenue vs Costs\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <ResponsiveContainer width=\"100%\" height={300}>\n              <PieChart>\n                <Pie\n                  data={profitLossData}\n                  cx=\"50%\"\n                  cy=\"50%\"\n                  innerRadius={60}\n                  outerRadius={120}\n                  paddingAngle={5}\n                  dataKey=\"value\"\n                  animationBegin={0}\n                  animationDuration={1000}\n                >\n                  {profitLossData.map((entry, index) => (\n                    <Cell key={`cell-${index}`} fill={entry.color} />\n                  ))}\n                </Pie>\n                <Tooltip \n                  formatter={(value) => formatCurrency(Number(value))}\n                />\n                <Legend />\n              </PieChart>\n            </ResponsiveContainer>\n            <div className=\"mt-4 grid grid-cols-2 gap-4 text-center\">\n              <div className=\"p-3 bg-green-50 dark:bg-green-900/20 rounded-lg\">\n                <p className=\"text-sm text-muted-foreground\">Profit Margin</p>\n                <p className=\"text-lg font-bold text-green-600\">\n                  {((metrics.profitLoss / metrics.totalSales) * 100).toFixed(1)}%\n                </p>\n              </div>\n              <div className=\"p-3 bg-blue-50 dark:bg-blue-900/20 rounded-lg\">\n                <p className=\"text-sm text-muted-foreground\">Cost Ratio</p>\n                <p className=\"text-lg font-bold text-blue-600\">\n                  {(((metrics.totalSales - metrics.profitLoss) / metrics.totalSales) * 100).toFixed(1)}%\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Performance Indicators */}\n      <Card className=\"modern-card\">\n        <CardHeader>\n          <CardTitle>Performance Insights</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid responsive-grid lg:grid-cols-3 gap-6\">\n            <div className=\"text-center p-4 bg-gradient-to-br from-blue-50 to-blue-100 dark:from-blue-900/20 dark:to-blue-800/20 rounded-lg\">\n              <h3 className=\"font-semibold text-blue-700 dark:text-blue-300\">Average Order Value</h3>\n              <p className=\"text-2xl font-bold text-blue-600 mt-2\">\n                {formatCurrency(metrics.totalSales / (metrics.totalOrders || 1))}\n              </p>\n            </div>\n            <div className=\"text-center p-4 bg-gradient-to-br from-green-50 to-green-100 dark:from-green-900/20 dark:to-green-800/20 rounded-lg\">\n              <h3 className=\"font-semibold text-green-700 dark:text-green-300\">Revenue per Product</h3>\n              <p className=\"text-2xl font-bold text-green-600 mt-2\">\n                {formatCurrency(metrics.totalSales / (metrics.totalProducts || 1))}\n              </p>\n            </div>\n            <div className=\"text-center p-4 bg-gradient-to-br from-purple-50 to-purple-100 dark:from-purple-900/20 dark:to-purple-800/20 rounded-lg\">\n              <h3 className=\"font-semibold text-purple-700 dark:text-purple-300\">GST Rate</h3>\n              <p className=\"text-2xl font-bold text-purple-600 mt-2\">\n                {((metrics.totalGST / metrics.totalSales) * 100).toFixed(1)}%\n              </p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":14801},"client/src/components/DynamicTable.tsx":{"content":"import { useState, useMemo } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from '@/components/ui/table';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Badge } from '@/components/ui/badge';\nimport { \n  Pencil, Save, X, RefreshCw, FileText, DollarSign, Hash, \n  Calendar, Search, Filter, SortAsc, SortDesc \n} from 'lucide-react';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { apiRequest } from '@/lib/queryClient';\n\ninterface ColumnStructure {\n  name: string;\n  type: 'text' | 'number' | 'currency' | 'date' | 'percentage';\n  required: boolean;\n  description?: string;\n}\n\ninterface DynamicTableProps {\n  title: string;\n  dataType: 'products' | 'orders';\n  columns: ColumnStructure[];\n  showSearch?: boolean;\n  showFilters?: boolean;\n  editable?: boolean;\n}\n\ninterface DynamicRow {\n  id: string;\n  [key: string]: any;\n}\n\nconst getColumnIcon = (type: ColumnStructure['type']) => {\n  switch (type) {\n    case 'currency':\n      return <DollarSign className=\"w-4 h-4 text-green-500\" />;\n    case 'number':\n      return <Hash className=\"w-4 h-4 text-blue-500\" />;\n    case 'date':\n      return <Calendar className=\"w-4 h-4 text-purple-500\" />;\n    case 'percentage':\n      return <div className=\"w-4 h-4 text-orange-500 font-bold text-xs\">%</div>;\n    default:\n      return <FileText className=\"w-4 h-4 text-gray-500\" />;\n  }\n};\n\nconst formatCellValue = (value: any, type: ColumnStructure['type']) => {\n  if (value === null || value === undefined || value === '') {\n    return <span className=\"text-muted-foreground italic\">—</span>;\n  }\n\n  switch (type) {\n    case 'currency':\n      return new Intl.NumberFormat('en-IN', {\n        style: 'currency',\n        currency: 'INR',\n        minimumFractionDigits: 0,\n        maximumFractionDigits: 0,\n      }).format(Number(value) || 0);\n    \n    case 'number':\n      return new Intl.NumberFormat('en-IN').format(Number(value) || 0);\n    \n    case 'percentage':\n      return `${(Number(value) || 0).toFixed(1)}%`;\n    \n    case 'date':\n      return new Date(value).toLocaleDateString('en-IN');\n    \n    default:\n      return String(value);\n  }\n};\n\nexport default function DynamicTable({ \n  title, \n  dataType, \n  columns, \n  showSearch = true, \n  showFilters = false,\n  editable = true \n}: DynamicTableProps) {\n  const [editingCell, setEditingCell] = useState<{ rowId: string; column: string } | null>(null);\n  const [editValue, setEditValue] = useState('');\n  const [searchTerm, setSearchTerm] = useState('');\n  const [sortColumn, setSortColumn] = useState<string | null>(null);\n  const [sortDirection, setSortDirection] = useState<'asc' | 'desc'>('asc');\n  \n  const { token } = useAuth();\n  const queryClient = useQueryClient();\n\n  // Fetch dynamic data\n  const { data: rows = [], isLoading, error } = useQuery<DynamicRow[]>({\n    queryKey: [`/api/${dataType}-dynamic`],\n    queryFn: async () => {\n      const response = await apiRequest('GET', `/api/${dataType}-dynamic`, undefined, token);\n      return response.json();\n    },\n    enabled: !!token,\n  });\n\n  // Update mutation\n  const updateMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: Record<string, any> }) => {\n      const response = await apiRequest('PUT', `/api/${dataType}-dynamic/${id}`, data, token);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [`/api/${dataType}-dynamic`] });\n      queryClient.invalidateQueries({ queryKey: ['/api/dashboard/live-metrics'] });\n      setEditingCell(null);\n      setEditValue('');\n    },\n  });\n\n  // Filter and sort data\n  const processedData = useMemo(() => {\n    let filtered = rows;\n\n    // Apply search filter\n    if (searchTerm) {\n      filtered = rows.filter(row =>\n        Object.values(row).some(value =>\n          String(value).toLowerCase().includes(searchTerm.toLowerCase())\n        )\n      );\n    }\n\n    // Apply sorting\n    if (sortColumn) {\n      filtered = [...filtered].sort((a, b) => {\n        const aVal = a[sortColumn];\n        const bVal = b[sortColumn];\n        \n        // Handle different data types\n        let comparison = 0;\n        if (typeof aVal === 'number' && typeof bVal === 'number') {\n          comparison = aVal - bVal;\n        } else {\n          comparison = String(aVal).localeCompare(String(bVal));\n        }\n        \n        return sortDirection === 'asc' ? comparison : -comparison;\n      });\n    }\n\n    return filtered;\n  }, [rows, searchTerm, sortColumn, sortDirection]);\n\n  const handleSort = (columnName: string) => {\n    if (sortColumn === columnName) {\n      setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc');\n    } else {\n      setSortColumn(columnName);\n      setSortDirection('asc');\n    }\n  };\n\n  const startEditing = (rowId: string, column: string, currentValue: any) => {\n    if (!editable) return;\n    setEditingCell({ rowId, column });\n    setEditValue(String(currentValue || ''));\n  };\n\n  const saveEdit = async () => {\n    if (!editingCell) return;\n\n    const { rowId, column } = editingCell;\n    const columnDef = columns.find(col => col.name === column);\n    \n    let processedValue: any = editValue;\n    \n    // Process value based on column type\n    if (columnDef?.type === 'number' || columnDef?.type === 'currency' || columnDef?.type === 'percentage') {\n      processedValue = parseFloat(editValue) || 0;\n    }\n\n    updateMutation.mutate({\n      id: rowId,\n      data: { [column]: processedValue }\n    });\n  };\n\n  const cancelEdit = () => {\n    setEditingCell(null);\n    setEditValue('');\n  };\n\n  if (isLoading) {\n    return (\n      <Card className=\"modern-card\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <div className=\"animate-pulse bg-muted h-6 w-32 rounded\"></div>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-3\">\n            {[...Array(5)].map((_, i) => (\n              <div key={i} className=\"animate-pulse bg-muted h-12 rounded\"></div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (error) {\n    return (\n      <Card className=\"modern-card border-destructive\">\n        <CardContent className=\"p-6\">\n          <div className=\"text-center text-destructive\">\n            <p className=\"font-semibold\">Failed to load {title.toLowerCase()}</p>\n            <p className=\"text-sm mt-1\">Please try refreshing the page</p>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"modern-card hover-lift\">\n      <CardHeader>\n        <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4\">\n          <CardTitle className=\"flex items-center gap-2\">\n            {title}\n            <Badge variant=\"outline\" className=\"ml-2\">\n              {processedData.length} {processedData.length === 1 ? 'item' : 'items'}\n            </Badge>\n          </CardTitle>\n          \n          {showSearch && (\n            <div className=\"relative w-full sm:w-auto\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n              <Input\n                placeholder={`Search ${title.toLowerCase()}...`}\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-10 w-full sm:w-64\"\n              />\n            </div>\n          )}\n        </div>\n      </CardHeader>\n      \n      <CardContent>\n        {processedData.length === 0 ? (\n          <div className=\"text-center py-8\">\n            <FileText className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n            <h3 className=\"font-semibold text-muted-foreground\">No {title.toLowerCase()} found</h3>\n            <p className=\"text-sm text-muted-foreground mt-1\">\n              {searchTerm ? 'Try adjusting your search' : `Upload ${dataType} data to get started`}\n            </p>\n          </div>\n        ) : (\n          <div className=\"overflow-x-auto\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  {columns.map((column) => (\n                    <TableHead \n                      key={column.name}\n                      className=\"cursor-pointer hover:bg-muted/50 transition-colors\"\n                      onClick={() => handleSort(column.name)}\n                    >\n                      <div className=\"flex items-center gap-2\">\n                        {getColumnIcon(column.type)}\n                        <span className=\"font-semibold\">{column.name}</span>\n                        {sortColumn === column.name && (\n                          sortDirection === 'asc' ? \n                            <SortAsc className=\"w-4 h-4\" /> : \n                            <SortDesc className=\"w-4 h-4\" />\n                        )}\n                        {column.required && (\n                          <span className=\"text-red-500 text-xs\">*</span>\n                        )}\n                      </div>\n                    </TableHead>\n                  ))}\n                  {editable && <TableHead className=\"w-20\">Actions</TableHead>}\n                </TableRow>\n              </TableHeader>\n              \n              <TableBody>\n                {processedData.map((row) => (\n                  <TableRow key={row.id} className=\"hover:bg-muted/30\">\n                    {columns.map((column) => {\n                      const isEditing = editingCell?.rowId === row.id && editingCell?.column === column.name;\n                      const value = row[column.name];\n                      \n                      return (\n                        <TableCell key={`${row.id}-${column.name}`} className=\"relative\">\n                          {isEditing ? (\n                            <div className=\"flex items-center gap-2\">\n                              <Input\n                                value={editValue}\n                                onChange={(e) => setEditValue(e.target.value)}\n                                onKeyDown={(e) => {\n                                  if (e.key === 'Enter') saveEdit();\n                                  if (e.key === 'Escape') cancelEdit();\n                                }}\n                                className=\"h-8 text-sm\"\n                                autoFocus\n                                type={column.type === 'number' || column.type === 'currency' || column.type === 'percentage' ? 'number' : 'text'}\n                              />\n                              <div className=\"flex gap-1\">\n                                <Button\n                                  size=\"sm\"\n                                  variant=\"ghost\"\n                                  className=\"h-8 w-8 p-0\"\n                                  onClick={saveEdit}\n                                  disabled={updateMutation.isPending}\n                                >\n                                  <Save className=\"w-3 h-3\" />\n                                </Button>\n                                <Button\n                                  size=\"sm\"\n                                  variant=\"ghost\"\n                                  className=\"h-8 w-8 p-0\"\n                                  onClick={cancelEdit}\n                                >\n                                  <X className=\"w-3 h-3\" />\n                                </Button>\n                              </div>\n                            </div>\n                          ) : (\n                            <div \n                              className={`${editable ? 'cursor-pointer hover:bg-muted rounded px-2 py-1' : ''} transition-colors`}\n                              onClick={() => startEditing(row.id, column.name, value)}\n                            >\n                              {formatCellValue(value, column.type)}\n                            </div>\n                          )}\n                        </TableCell>\n                      );\n                    })}\n                    \n                    {editable && (\n                      <TableCell>\n                        <Button\n                          size=\"sm\"\n                          variant=\"ghost\"\n                          className=\"h-8 w-8 p-0\"\n                          onClick={() => {\n                            const firstEditableColumn = columns[0];\n                            startEditing(row.id, firstEditableColumn.name, row[firstEditableColumn.name]);\n                          }}\n                        >\n                          <Pencil className=\"w-3 h-3\" />\n                        </Button>\n                      </TableCell>\n                    )}\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":13059},"server/services/csvProcessor.ts":{"content":"import { Readable } from 'stream';\nimport csv from 'csv-parser';\nimport { InsertOrder } from '@shared/schema';\n\nexport interface CSVProcessResult {\n  orders: InsertOrder[];\n  errors: string[];\n  processedCount: number;\n  productMetadata?: Array<{ sku: string; gstPercent?: number; costPrice?: number; productName: string; }>;\n}\n\nexport class CSVProcessor {\n  static sanitizeNumericField(value: any): number {\n    if (typeof value === 'number') return value;\n    if (typeof value !== 'string') return 0;\n    \n    // Remove currency symbols, commas, and whitespace\n    const cleaned = value.replace(/[₹,\\s]/g, '').trim();\n    const parsed = parseFloat(cleaned);\n    return isNaN(parsed) ? 0 : parsed;\n  }\n\n  static parseDate(dateString: string): Date {\n    if (!dateString) return new Date();\n    \n    // Handle different date formats\n    const trimmed = dateString.trim();\n    const parsed = new Date(trimmed);\n    \n    // If invalid date, try other formats\n    if (isNaN(parsed.getTime())) {\n      // Try DD/MM/YYYY format\n      const ddmmyyyy = trimmed.match(/^(\\d{1,2})\\/(\\d{1,2})\\/(\\d{4})$/);\n      if (ddmmyyyy) {\n        return new Date(parseInt(ddmmyyyy[3]), parseInt(ddmmyyyy[2]) - 1, parseInt(ddmmyyyy[1]));\n      }\n    }\n    \n    return isNaN(parsed.getTime()) ? new Date() : parsed;\n  }\n\n  // Map order status from CSV to standard order status\n  static normalizeOrderStatus(reasonForCredit: string): string {\n    if (!reasonForCredit) return 'Unknown';\n    \n    const reason = reasonForCredit.toUpperCase().trim();\n    \n    switch (reason) {\n      case 'DELIVERED':\n        return 'Delivered';\n      case 'CANCELLED':\n      case 'CANCELED':\n        return 'Cancelled';\n      case 'RTO_COMPLETE':\n      case 'RTO_LOCKED':\n      case 'RTO_OFD':\n        return 'RTO';\n      case 'RETURN':\n      case 'RETURNED':\n        return 'Return';\n      default:\n        return 'Unknown';\n    }\n  }\n\n  // Calculate payment status based on order status and settlement amount\n  static calculatePaymentStatus(orderStatus: string, settlementAmount: number = 0): string {\n    const normalizedStatus = orderStatus.trim();\n    \n    if (normalizedStatus === 'Cancelled') {\n      return 'N/A';\n    } else if (normalizedStatus === 'Delivered') {\n      if (settlementAmount > 0) {\n        return 'Paid';\n      } else {\n        return 'N/A';\n      }\n    } else if (normalizedStatus === 'RTO') {\n      return 'Unpaid/Zero';\n    } else if (normalizedStatus === 'Return') {\n      if (settlementAmount < 0) {\n        return 'Refunded';\n      } else {\n        return 'N/A';\n      }\n    } else {\n      return 'N/A';\n    }\n  }\n\n  static mapPaymentStatus(reasonForCredit: string): string {\n    const normalizedStatus = this.normalizeOrderStatus(reasonForCredit);\n    return this.calculatePaymentStatus(normalizedStatus, 0); // Initial status without settlement data\n  }\n\n  static isPaymentCompleted(reasonForCredit: string): boolean {\n    if (!reasonForCredit) return false;\n    \n    const reason = reasonForCredit.toLowerCase().trim();\n    return reason.includes('delivery completed') || \n           reason.includes('delivered') ||\n           reason.includes('settlement');\n  }\n\n  // Enhanced field mapping for different CSV formats\n  static getFieldValue(row: any, fieldAliases: string[]): string {\n    for (const alias of fieldAliases) {\n      if (row[alias] !== undefined && row[alias] !== null) {\n        return String(row[alias]).trim();\n      }\n    }\n    return '';\n  }\n\n  static async processOrdersCSV(buffer: Buffer): Promise<CSVProcessResult> {\n    const orders: InsertOrder[] = [];\n    const errors: string[] = [];\n    let processedCount = 0;\n    let headers: string[] = [];\n    const productMetadata = new Map<string, { sku: string; gstPercent?: number; costPrice?: number; productName: string; }>();\n\n    return new Promise((resolve) => {\n      const stream = Readable.from(buffer);\n      \n      stream\n        .pipe(csv())\n        .on('headers', (headerList: string[]) => {\n          headers = headerList;\n          console.log('CSV Headers detected:', headers); // Log all headers for exact matching\n        })\n        .on('data', (row: any) => {\n          try {\n            processedCount++; // Count each data row (csv-parser already handles headers)\n            \n            // Enhanced field mapping with aliases for different CSV formats\n            const subOrderNo = this.getFieldValue(row, [\n              'Sub Order No', 'subOrderNo', 'sub_order_no', 'Sub Order ID'\n            ]);\n            \n            const orderDate = this.getFieldValue(row, [\n              'Order Date', 'orderDate', 'order_date', 'OrderDate', 'ORDER_DATE', 'Date', 'Created Date'\n            ]);\n            \n            const productName = this.getFieldValue(row, [\n              'Product Name', 'Item Name', 'Title', 'Product Title', 'Product', 'Item', 'Name'\n            ]);\n            \n            const sku = this.getFieldValue(row, [\n              'SKU', 'sku', 'Product SKU', 'Item SKU', 'Product Code', 'Item Code'\n            ]);\n            \n            const reasonForCredit = this.getFieldValue(row, [\n              'Reason for Credit Entry', 'reasonForCredit', 'reason_for_credit', 'Status', 'Order Status', 'Payment Status', 'Credit Reason'\n            ]);\n\n            // Extract additional fields for enhanced mapping (GST %, Cost Price)\n            const gstPercent = this.getFieldValue(row, [\n              'GST %', 'GST Percent', 'Product GST %', 'Tax %', 'Tax Percent',\n              'GST', 'gst_percent', 'gstPercent', 'Product Tax %'\n            ]);\n\n            const costPrice = this.getFieldValue(row, [\n              'Cost Price', 'costPrice', 'cost_price', 'Product Cost',\n              'Purchase Price', 'Base Cost', 'Manufacturing Cost', 'Item Cost'\n            ]);\n\n            // Enhanced validation with detailed error reporting\n            const missingFields: string[] = [];\n            if (!subOrderNo) missingFields.push('Sub Order No');\n            if (!productName) missingFields.push('Product Name');\n            if (!sku) missingFields.push('SKU');\n            \n            if (missingFields.length > 0) {\n              errors.push(`Row ${processedCount}: Missing required fields: ${missingFields.join(', ')}. Available columns: ${headers.slice(0, 5).join(', ')}...`);\n              return;\n            }\n\n            // Create order object with all available data\n            const order: InsertOrder = {\n              subOrderNo,\n              orderDate: this.parseDate(orderDate),\n              customerState: this.getFieldValue(row, [\n                'Customer State', 'customerState', 'customer_state', 'State', 'Buyer State', 'Delivery State'\n              ]),\n              productName,\n              sku,\n              size: this.getFieldValue(row, [\n                'Size', 'size', 'Product Size', 'Variant', 'SIZE', 'Item Size'\n              ]) || 'Free Size',\n              quantity: parseInt(this.getFieldValue(row, [\n                'Quantity', 'quantity', 'qty', 'Qty', 'QTY', 'Item Quantity', 'Order Quantity'\n              ]) || '1') || 1,\n              listedPrice: this.sanitizeNumericField(\n                this.getFieldValue(row, [\n                  'Supplier Listed Price (Incl. GST + Commission)', 'Listed Price', 'listedPrice', 'Sale Price', 'Supplier Listed Price', 'Sale Amount', 'Price', 'Listed Price (Incl. GST)', 'Original Price'\n                ])\n              ).toString(),\n              discountedPrice: this.sanitizeNumericField(\n                this.getFieldValue(row, [\n                  'Supplier Discounted Price (Incl GST and Commision)', 'Discounted Price', 'discountedPrice', 'Final Sale Amount', 'Final Price', 'Net Price', 'Selling Price', 'Discounted Sale Price', 'Final Sale Price'\n                ])\n              ).toString(),\n              packetId: this.getFieldValue(row, [\n                'Packet Id', 'packetId', 'packet_id', 'PacketID', 'PACKET_ID', 'Packet No', 'Package ID'\n              ]),\n              reasonForCredit: reasonForCredit || '',\n              \n              // Enhanced payment data extraction from CSV (initial status without settlement data)\n              paymentStatus: this.mapPaymentStatus(reasonForCredit),\n              paymentDate: this.isPaymentCompleted(reasonForCredit) ? this.parseDate(orderDate) : undefined\n            };\n\n            orders.push(order);\n\n            // Collect product metadata (GST%, Cost Price) if available\n            if (sku && productName) {\n              const metadata: { sku: string; gstPercent?: number; costPrice?: number; productName: string; } = {\n                sku,\n                productName,\n                gstPercent: 5 // Default to 5% GST based on real payment file analysis\n              };\n              \n              if (gstPercent) {\n                const gstValue = this.sanitizeNumericField(gstPercent);\n                if (gstValue > 0) {\n                  metadata.gstPercent = gstValue;\n                }\n              }\n              \n              if (costPrice) {\n                const costValue = this.sanitizeNumericField(costPrice);\n                if (costValue > 0) {\n                  metadata.costPrice = costValue;\n                }\n              }\n              \n              productMetadata.set(sku, metadata);\n            }\n            \n          } catch (error) {\n            errors.push(`Row ${processedCount}: Processing error - ${error}`);\n          }\n        })\n        .on('end', () => {\n          const productMetadataArray = Array.from(productMetadata.values());\n          console.log(`CSV Processing complete: ${orders.length} orders processed, ${productMetadataArray.length} product metadata records, ${errors.length} errors`);\n          resolve({ orders, errors, processedCount, productMetadata: productMetadataArray });\n        })\n        .on('error', (error: any) => {\n          errors.push(`CSV parsing error: ${error}`);\n          resolve({ orders, errors, processedCount });\n        });\n    });\n  }\n}\n","size_bytes":9988},"server/services/zipProcessor.ts":{"content":"import AdmZip from 'adm-zip';\nimport * as XLSX from 'xlsx';\nimport { InsertPayment } from '@shared/schema';\n\nexport interface ZIPProcessResult {\n  payments: InsertPayment[];\n  errors: string[];\n  processedCount: number;\n}\n\nexport interface ExtractedFile {\n  buffer: Buffer;\n  filename: string;\n  type: 'xlsx' | 'csv' | 'xls' | 'unknown';\n}\n\nexport class ZIPProcessor {\n  static sanitizeNumericField(value: any): number {\n    if (typeof value === 'number') return value;\n    if (typeof value !== 'string') return 0;\n    \n    const cleaned = value.replace(/[₹,\\s]/g, '').trim();\n    const parsed = parseFloat(cleaned);\n    return isNaN(parsed) ? 0 : parsed;\n  }\n\n  static parseDate(dateValue: any): Date {\n    if (!dateValue) return new Date();\n    \n    if (dateValue instanceof Date) return dateValue;\n    \n    if (typeof dateValue === 'number') {\n      // Excel date serial number\n      const excelEpoch = new Date(1900, 0, 1);\n      const days = dateValue - 2; // Excel date bug adjustment\n      return new Date(excelEpoch.getTime() + days * 24 * 60 * 60 * 1000);\n    }\n    \n    if (typeof dateValue === 'string') {\n      const trimmed = dateValue.trim();\n      \n      // Try standard date parsing first\n      let parsed = new Date(trimmed);\n      if (!isNaN(parsed.getTime())) return parsed;\n      \n      // Try DD/MM/YYYY format\n      const ddmmyyyy = trimmed.match(/^(\\d{1,2})\\/(\\d{1,2})\\/(\\d{4})$/);\n      if (ddmmyyyy) {\n        return new Date(parseInt(ddmmyyyy[3]), parseInt(ddmmyyyy[2]) - 1, parseInt(ddmmyyyy[1]));\n      }\n      \n      // Try MM/DD/YYYY format\n      const mmddyyyy = trimmed.match(/^(\\d{1,2})\\/(\\d{1,2})\\/(\\d{4})$/);\n      if (mmddyyyy) {\n        return new Date(parseInt(mmddyyyy[3]), parseInt(mmddyyyy[1]) - 1, parseInt(mmddyyyy[2]));\n      }\n    }\n    \n    return new Date();\n  }\n\n  static async extractFilesFromZip(buffer: Buffer): Promise<ExtractedFile[]> {\n    try {\n      const zip = new AdmZip(buffer);\n      const zipEntries = zip.getEntries();\n      const files: ExtractedFile[] = [];\n\n      zipEntries.forEach((entry: any) => {\n        if (!entry.isDirectory) {\n          const filename = entry.entryName.toLowerCase();\n          let type: ExtractedFile['type'] = 'unknown';\n          \n          if (filename.endsWith('.xlsx')) {\n            type = 'xlsx';\n          } else if (filename.endsWith('.csv')) {\n            type = 'csv';\n          } else if (filename.endsWith('.xls')) {\n            type = 'xls';\n          }\n\n          if (type !== 'unknown') {\n            files.push({\n              buffer: entry.getData(),\n              filename: entry.entryName,\n              type\n            });\n          }\n        }\n      });\n\n      return files;\n    } catch (error) {\n      console.error('Error extracting files from ZIP:', error);\n      return [];\n    }\n  }\n\n  static async processPaymentXLSX(buffer: Buffer, filename: string): Promise<ZIPProcessResult & { \n    productGstData?: Array<{ sku: string; gstPercent: number; productName: string; }>;\n    orderStatusData?: Array<{ subOrderNo: string; orderStatus: string; }>;\n  }> {\n    const payments: InsertPayment[] = [];\n    const errors: string[] = [];\n    let processedCount = 0;\n    const productGstData: Array<{ sku: string; gstPercent: number; productName: string; }> = [];\n    const orderStatusData: Array<{ subOrderNo: string; orderStatus: string; }> = [];\n\n    try {\n      const workbook = XLSX.read(buffer, { type: 'buffer', cellDates: true });\n      \n      // Look for \"Order Payments\" sheet first, fallback to first sheet (more robust)\n      let targetSheet = 'Order Payments';\n      if (!workbook.Sheets[targetSheet]) {\n        targetSheet = workbook.SheetNames[0];\n        console.log(`Order Payments sheet not found in ${filename}, using: ${targetSheet}`);\n      } else {\n        console.log(`Processing Order Payments sheet in ${filename}`);\n      }\n      \n      const worksheet = workbook.Sheets[targetSheet];\n      \n      // For Meesho files, read as array of arrays to handle header row properly\n      const rawData = XLSX.utils.sheet_to_json(worksheet, { header: 1 }) as any[][];\n      \n      if (rawData.length < 2) {\n        errors.push(`${filename}: No data found in Excel file`);\n        return { payments, errors, processedCount };\n      }\n\n      // Find the header row (search first 5 rows, more robust)\n      let headerRowIndex = -1;\n      let headers: string[] = [];\n      \n      for (let i = 0; i < Math.min(5, rawData.length); i++) {\n        const row = rawData[i] as any[];\n        if (row && row.length > 5 && \n            (row.some((cell: any) => cell && cell.toString().toLowerCase().includes('sub order')) ||\n             row[0] === 'Sub Order No')) {\n          headerRowIndex = i;\n          headers = row.map(h => h ? h.toString() : '');\n          break;\n        }\n      }\n      \n      if (headerRowIndex === -1 || headers.length === 0) {\n        errors.push(`${filename}: Could not find header row with Sub Order No`);\n        return { payments, errors, processedCount };\n      }\n      \n      console.log(`Found headers at row ${headerRowIndex} in ${filename}:`, headers.slice(0, 10));\n\n      // EXACT column detection based on real XLSX file analysis (42 columns)\n      // Column mapping from actual file: 2918427_SP_ORDER_ADS_REFERRAL_PAYMENT_FILE_PREVIOUS_PAYMENT_2025-08-01_2025-08-31.xlsx\n      const subOrderIndex = headers.findIndex(h => h === 'Sub Order No'); // Column 1\n      const settlementIndex = headers.findIndex(h => h === 'Final Settlement Amount'); // Column 12\n      const dateIndex = headers.findIndex(h => h === 'Payment Date'); // Column 11\n      const gstIndex = headers.findIndex(h => h === 'Product GST %'); // Column 7\n      const productNameIndex = headers.findIndex(h => h === 'Product Name'); // Column 4\n      const skuIndex = headers.findIndex(h => h === 'Supplier SKU'); // Column 5\n      const orderStatusIndex = headers.findIndex(h => h === 'Live Order Status'); // Column 6\n      const orderDateIndex = headers.findIndex(h => h === 'Order Date'); // Column 2\n      const totalSaleIndex = headers.findIndex(h => h === 'Total Sale Amount (Incl. Shipping & GST)'); // Column 14\n\n      if (subOrderIndex === -1) {\n        errors.push(`${filename}: Could not find Sub Order No column. Available headers: ${headers.slice(0, 10).join(', ')}`);\n        return { payments, errors, processedCount };\n      }\n\n      // Log detected columns for debugging\n      console.log(`Column detection for ${filename}:`);\n      console.log(`- Sub Order No: \"${headers[subOrderIndex]}\" (index ${subOrderIndex})`);\n      console.log(`- Settlement Amount: ${settlementIndex >= 0 ? `\"${headers[settlementIndex]}\" (index ${settlementIndex})` : 'NOT FOUND'}`);\n      console.log(`- Date: ${dateIndex >= 0 ? `\"${headers[dateIndex]}\" (index ${dateIndex})` : 'NOT FOUND'}`);\n      console.log(`- GST %: ${gstIndex >= 0 ? `\"${headers[gstIndex]}\" (index ${gstIndex})` : 'NOT FOUND'}`);\n      console.log(`- Product Name: ${productNameIndex >= 0 ? `\"${headers[productNameIndex]}\" (index ${productNameIndex})` : 'NOT FOUND'}`);\n      console.log(`- SKU: ${skuIndex >= 0 ? `\"${headers[skuIndex]}\" (index ${skuIndex})` : 'NOT FOUND'}`);\n      console.log(`- Order Status: ${orderStatusIndex >= 0 ? `\"${headers[orderStatusIndex]}\" (index ${orderStatusIndex})` : 'NOT FOUND'}`);\n      console.log(`- Order Date: ${orderDateIndex >= 0 ? `\"${headers[orderDateIndex]}\" (index ${orderDateIndex})` : 'NOT FOUND'}`);\n      console.log(`- Total Sale Amount: ${totalSaleIndex >= 0 ? `\"${headers[totalSaleIndex]}\" (index ${totalSaleIndex})` : 'NOT FOUND'}`);\n      \n      if (settlementIndex === -1) {\n        console.warn(`${filename}: Settlement amount column not found. Payment amounts will be set to 0.`);\n      }\n      if (dateIndex === -1) {\n        console.warn(`${filename}: Date column not found. Using current date as fallback.`);\n      }\n\n      // Process data rows (starting after header row)\n      for (let i = headerRowIndex + 1; i < rawData.length; i++) {\n        try {\n          const row = rawData[i] as any[];\n          if (!row || row.length === 0) continue;\n          \n          processedCount++;\n          \n          const subOrderNo = row[subOrderIndex]?.toString().trim();\n          if (!subOrderNo) {\n            continue; // Skip empty rows\n          }\n\n          const settlementAmount = settlementIndex !== -1 ? \n            this.sanitizeNumericField(row[settlementIndex]) : 0;\n          \n          const settlementDate = dateIndex !== -1 ? \n            this.parseDate(row[dateIndex]) : new Date();\n\n          // Extract GST percentage and product data\n          if (gstIndex !== -1 && skuIndex !== -1) {\n            const gstValue = row[gstIndex];\n            const skuValue = row[skuIndex]?.toString().trim();\n            const productNameValue = productNameIndex !== -1 ? row[productNameIndex]?.toString().trim() : '';\n            \n            if (skuValue && gstValue !== undefined && gstValue !== null) {\n              const gstPercent = this.sanitizeNumericField(gstValue);\n              if (gstPercent > 0) {\n                productGstData.push({\n                  sku: skuValue,\n                  gstPercent: gstPercent,\n                  productName: productNameValue || ''\n                });\n              }\n            }\n          }\n\n          // Extract order status data\n          if (orderStatusIndex !== -1) {\n            const orderStatusValue = row[orderStatusIndex]?.toString().trim();\n            if (orderStatusValue) {\n              orderStatusData.push({\n                subOrderNo: subOrderNo,\n                orderStatus: orderStatusValue\n              });\n            }\n          }\n\n          // Enhanced payment object with more financial data\n          const payment: InsertPayment = {\n            subOrderNo,\n            settlementAmount: settlementAmount.toString(),\n            settlementDate,\n            orderValue: totalSaleIndex !== -1 ? this.sanitizeNumericField(row[totalSaleIndex]).toString() : '0',\n            commissionFee: '0', // Default to 0 instead of empty string\n            fixedFee: '0', // Default to 0 instead of empty string\n            paymentGatewayFee: '0', // Default to 0 instead of empty string\n            adsFee: '0' // Default to 0 instead of empty string\n          };\n\n          payments.push(payment);\n\n        } catch (error) {\n          errors.push(`${filename} Row ${i + 1}: Processing error - ${error}`);\n        }\n      }\n\n    } catch (error) {\n      errors.push(`${filename}: XLSX processing error - ${error}`);\n    }\n\n    console.log(`${filename}: Processed ${payments.length} payments, ${productGstData.length} product GST records, ${orderStatusData.length} order status records, ${errors.length} errors`);\n    return { payments, errors, processedCount, productGstData, orderStatusData };\n  }\n\n  static async processPaymentZIP(buffer: Buffer): Promise<ZIPProcessResult & { \n    productGstData?: Array<{ sku: string; gstPercent: number; productName: string; }>;\n    orderStatusData?: Array<{ subOrderNo: string; orderStatus: string; }>;\n  }> {\n    const allPayments: InsertPayment[] = [];\n    const allErrors: string[] = [];\n    let totalProcessed = 0;\n    const allProductGstData: Array<{ sku: string; gstPercent: number; productName: string; }> = [];\n    const allOrderStatusData: Array<{ subOrderNo: string; orderStatus: string; }> = [];\n\n    try {\n      const files = await this.extractFilesFromZip(buffer);\n      \n      if (files.length === 0) {\n        return { \n          payments: [], \n          errors: ['No supported files found in ZIP archive'], \n          processedCount: 0 \n        };\n      }\n\n      console.log(`Found ${files.length} files in ZIP:`, files.map(f => f.filename));\n\n      // Process all extracted files\n      for (const file of files) {\n        try {\n          if (file.type === 'xlsx' || file.type === 'xls') {\n            console.log(`Processing XLSX file: ${file.filename}`);\n            const result = await this.processPaymentXLSX(file.buffer, file.filename);\n            allPayments.push(...result.payments);\n            allErrors.push(...result.errors);\n            totalProcessed += result.processedCount;\n            \n            // Collect additional data\n            if (result.productGstData) {\n              allProductGstData.push(...result.productGstData);\n            }\n            if (result.orderStatusData) {\n              allOrderStatusData.push(...result.orderStatusData);\n            }\n          } \n          else if (file.type === 'csv') {\n            console.log(`Processing CSV file: ${file.filename}`);\n            // Handle payment CSVs that might be in the ZIP\n            allErrors.push(`${file.filename}: CSV payment processing not implemented - only XLSX supported`);\n          }\n        } catch (fileError) {\n          allErrors.push(`Error processing file ${file.filename}: ${fileError}`);\n        }\n      }\n\n    } catch (error) {\n      allErrors.push(`ZIP processing error: ${error}`);\n    }\n\n    console.log(`ZIP processing complete: ${allPayments.length} payments processed, ${allErrors.length} errors`);\n    console.log(`Additional data extracted: ${allProductGstData.length} product GST records, ${allOrderStatusData.length} order status records`);\n    \n    return { \n      payments: allPayments, \n      errors: allErrors, \n      processedCount: totalProcessed,\n      productGstData: allProductGstData,\n      orderStatusData: allOrderStatusData\n    };\n  }\n}","size_bytes":13435},"FILE_PROCESSING_GUIDE.md":{"content":"# ReconMe File Processing Guide\n## Comprehensive Documentation for CSV & ZIP File Processing\n\n### Overview\nReconMe processes two main file types for payment reconciliation:\n1. **Order CSV Files** - Contains order details, customer information, and initial payment status\n2. **Payment ZIP Files** - Contains XLSX files with settlement data, final payment amounts, and reconciliation details\n\n---\n\n## 📊 ORDER CSV FILE STRUCTURE (ACTUAL SAMPLE: orders_august_1758081248885.csv)\n\n**File Details:**\n- **Total Records**: 149 orders (150 lines including header)\n- **Date Range**: August 2025 (5th - 31st)\n- **Business Type**: Saree/Apparel orders from Meesho platform\n- **File Size**: ~45KB\n\n### Exact Column Structure (11 Columns)\n| # | Column Name | Data Type | Description | Sample Values |\n|---|-------------|-----------|-------------|---------------|\n| 1 | **Reason for Credit Entry** | String | Order status/payment reason | `DELIVERED`, `RTO_COMPLETE`, `CANCELLED`, `RTO_LOCKED`, `RTO_OFD` |\n| 2 | **Sub Order No** | String | Unique order identifier | `184337885113119297_1`, `193792086759207936_1` |\n| 3 | **Order Date** | Date | Order placement date | `2025-08-05`, `2025-08-31` |\n| 4 | **Customer State** | String | Delivery location | `Bihar`, `Uttar Pradesh`, `Gujarat`, `Maharashtra` |\n| 5 | **Product Name** | String | Full product description | `Soft Pure COTTON Hand Batik Block Printed Saree with Pure Cotton Printed Unstiched Blouse...` |\n| 6 | **SKU** | String | Product identifier | `ctn-pink-black`, `green-sadi`, `purple-sadi`, `SADI-Pink-12` |\n| 7 | **Size** | String | Product size | `Free Size` (all products) |\n| 8 | **Quantity** | Integer | Items ordered | `1` (all orders) |\n| 9 | **Supplier Listed Price (Incl. GST + Commission)** | Decimal | Original price | `488.0`, `494.0`, `499.0`, `484.0` |\n| 10 | **Supplier Discounted Price (Incl GST and Commision)** | Decimal | Final selling price | `488.0`, `475.0`, `480.0`, `499.0` |\n| 11 | **Packet Id** | String | Shipping reference | `TP0LGEU05439769`, `TP0DGEU06109240` (some empty) |\n\n### Secondary Columns (Optional but Important)\n| Column Name | Aliases | Data Type | Description | Example |\n|-------------|---------|-----------|-------------|---------|\n| **Order Date** | `orderDate`, `order_date`, `OrderDate`, `ORDER_DATE`, `Date`, `Created Date` | Date | When the order was placed | `2025-08-05` |\n| **Customer State** | `customerState`, `customer_state`, `State`, `Buyer State`, `Delivery State` | String | Customer's delivery state | `Bihar` |\n| **Size** | `size`, `Product Size`, `Variant`, `SIZE`, `Item Size` | String | Product size/variant | `Free Size` |\n| **Quantity** | `quantity`, `qty`, `Qty`, `QTY`, `Item Quantity`, `Order Quantity` | Integer | Number of items ordered | `1` |\n| **Packet Id** | `packetId`, `packet_id`, `PacketID`, `PACKET_ID`, `Packet No`, `Package ID` | String | Shipping packet identifier | `TP0LGEU05439769` |\n| **Reason for Credit Entry** | `reasonForCredit`, `reason_for_credit`, `Status`, `Order Status`, `Payment Status`, `Credit Reason` | String | Current order status | `DELIVERED`, `RTO_COMPLETE` |\n\n### Price Columns\n| Column Name | Aliases | Data Type | Description |\n|-------------|---------|-----------|-------------|\n| **Listed Price** | `Supplier Listed Price (Incl. GST + Commission)`, `Listed Price`, `listedPrice`, `Sale Price`, `Supplier Listed Price`, `Sale Amount`, `Price`, `Listed Price (Incl. GST)`, `Original Price` | Decimal | Original product price |\n| **Discounted Price** | `Supplier Discounted Price (Incl GST and Commision)`, `Discounted Price`, `discountedPrice`, `Final Sale Amount`, `Final Price`, `Net Price`, `Selling Price`, `Discounted Sale Price`, `Final Sale Price` | Decimal | Final selling price |\n\n### Product Metadata Columns (Enhanced Processing)\n| Column Name | Aliases | Data Type | Description |\n|-------------|---------|-----------|-------------|\n| **GST Percent** | `GST %`, `GST Percent`, `Product GST %`, `Tax %`, `Tax Percent`, `GST`, `gst_percent`, `gstPercent`, `Product Tax %` | Decimal | GST percentage for product |\n| **Cost Price** | `Cost Price`, `costPrice`, `cost_price`, `Product Cost`, `Purchase Price`, `Base Cost`, `Manufacturing Cost`, `Item Cost` | Decimal | Product cost price |\n\n### Actual CSV Sample (First 5 Rows)\n```csv\n\"Reason for Credit Entry\",\"Sub Order No\",\"Order Date\",\"Customer State\",\"Product Name\",\"SKU\",\"Size\",\"Quantity\",\"Supplier Listed Price (Incl. GST + Commission)\",\"Supplier Discounted Price (Incl GST and Commision)\",\"Packet Id\"\n\"DELIVERED\",\"184337885113119297_1\",\"2025-08-05\",\"Bihar\",\"Soft Pure COTTON Hand Batik Block Printed Saree with Pure Cotton Printed Unstiched Blouse , pure cotton saree, mulmul cotton , Printed Daily Wear Pure Cotton Saree , Black & pink cotton saree\",\"ctn-pink-black\",\"Free Size\",\"1\",\"488.0\",\"488.0\",\"TP0LGEU05439769\"\n\"DELIVERED\",\"184543431358648576_1\",\"2025-08-06\",\"Uttar Pradesh\",\"Soft Pure COTTON Hand Batik Block Printed Saree with Pure Cotton Printed Unstiched Blouse , pure cotton saree, mulmul cotton , Printed Daily Wear Pure Cotton Saree , Black & pink cotton saree\",\"ctn-pink-black\",\"Free Size\",\"1\",\"488.0\",\"488.0\",\"TP0LGEU05439768\"\n\"RTO_COMPLETE\",\"184633211778789952_1\",\"2025-08-06\",\"Telangana\",\"Soft Pure COTTON Hand Batik Block Printed Saree with Pure Cotton Printed Unstiched Blouse , pure cotton saree, mulmul cotton , Printed Daily Wear Pure Cotton Saree , Black & pink cotton saree\",\"ctn-pink-black\",\"Free Size\",\"1\",\"488.0\",\"488.0\",\"TP0LGEU05439748\"\n\"RTO_COMPLETE\",\"184933570153611968_1\",\"2025-08-07\",\"Odisha\",\"Soft Pure COTTON Hand Batik Block Printed Saree with Pure Cotton Printed Unstiched Blouse , pure cotton saree, mulmul cotton , Printed Daily Wear Pure Cotton Saree , Black & pink cotton saree\",\"ctn-pink-black\",\"Free Size\",\"1\",\"488.0\",\"488.0\",\"TP0LGEU05439747\"\n```\n\n### Order Status Distribution (Sample Analysis)\n| Status | Count | Percentage | Payment Mapping |\n|--------|-------|------------|-----------------|\n| `DELIVERED` | ~60% | Majority | → `PAID` |\n| `RTO_COMPLETE` | ~25% | Return completed | → `REFUNDED` |\n| `CANCELLED` | ~10% | Order cancelled | → `CANCELLED` |\n| `RTO_LOCKED` | ~3% | Return in process | → `PROCESSING` |\n| `RTO_OFD` | ~2% | Return out for delivery | → `PROCESSING` |\n\n### Order Status Mapping\n| CSV Status | Mapped Payment Status | Description |\n|------------|----------------------|-------------|\n| `DELIVERED` | `PAID` | Order successfully delivered |\n| `RTO_COMPLETE` | `REFUNDED` | Return to origin completed |\n| `CANCELLED` / `CANCELED` | `CANCELLED` | Order cancelled |\n| `RTO_LOCKED` | `PROCESSING` | Return in process |\n| `SHIPPED` / `OUT_FOR_DELIVERY` | `PROCESSING` | Order in transit |\n| `LOST` | `LOST` | Order lost in transit |\n| *Default* | `PENDING` | Status unknown/pending |\n\n---\n\n## 📦 PAYMENT ZIP FILE STRUCTURE (ACTUAL SAMPLE: meesho_PREVIOUS_PAYMENT_aug_1758257467221.zip)\n\n**ZIP Contents:**\n- **File Name**: `2918427_SP_ORDER_ADS_REFERRAL_PAYMENT_FILE_PREVIOUS_PAYMENT_2025-08-01_2025-08-31.xlsx`\n- **File Size**: ~17KB compressed\n- **Date Range**: August 1-31, 2025\n\n### XLSX File Sheet Structure\n| Sheet Name | Content | Purpose |\n|------------|---------|---------|\n| **Disclaimer** | Legal/usage information | Terms and conditions |\n| **Order Payments** | Main payment data (42 columns) | Core reconciliation data |\n| **Ads Cost** | Advertising charges | Marketing expense breakdown |\n| **Referral Payments** | Referral commissions | Affiliate/referral earnings |\n| **Compensation and Recovery** | Claims/recovery details | Dispute resolution data |\n\n### Order Payments Sheet - Complete Column Structure (42 Columns)\n\n#### Section 1: Order Related Details (Columns 1-9)\n| # | Column Name | Data Type | Description | Sample Value |\n|---|-------------|-----------|-------------|--------------|\n| 1 | **Sub Order No** | String | Order identifier | `187110529767075968_1` |\n| 2 | **Order Date** | DateTime | Order timestamp | `2025-08-13 13:20:27` |\n| 3 | **Dispatch Date** | Date | Shipping date | `2025-08-16` |\n| 4 | **Product Name** | String | Product description | `Striped Bandhani Georgette Saree` |\n| 5 | **Supplier SKU** | String | Product SKU | `pink-sadi`, `blue-sadi` |\n| 6 | **Live Order Status** | String | Current status | `RTO`, `DELIVERED` |\n| 7 | **Product GST %** | Integer | GST percentage | `5` |\n| 8 | **Listing Price (Incl. taxes)** | Decimal | Product price | `499.0` |\n| 9 | **Quantity** | Integer | Order quantity | `1` |\n\n#### Section 2: Payment Details (Columns 10-12)\n| # | Column Name | Data Type | Description | Sample Value |\n|---|-------------|-----------|-------------|--------------|\n| 10 | **Transaction ID** | String | Payment reference | `AXISCN1058984549` |\n| 11 | **Payment Date** | Date | Settlement date | `2025-08-22` |\n| 12 | **Final Settlement Amount** | Decimal | Net payout | `0.0` (for RTO), `450.50` (for delivered) |\n\n#### Section 3: Revenue Details (Columns 13-15)\n| # | Column Name | Data Type | Description | Sample Value |\n|---|-------------|-----------|-------------|--------------|\n| 13 | **Price Type** | String | Pricing category | `PREMIUM_RETURN`, `STANDARD` |\n| 14 | **Total Sale Amount (Incl. Shipping & GST)** | Decimal | Gross sale value | `594.0`, `578.0` |\n| 15 | **Total Sale Return Amount (Incl. Shipping & GST)** | Decimal | Return amount | `-594.0` (negative for returns) |\n\n#### Section 4: Deductions (Columns 16-28)\n| # | Column Name | Data Type | Description |\n|---|-------------|-----------|-------------|\n| 16 | **Fixed Fee (Incl. GST)** | Decimal | Platform fixed fees |\n| 17 | **Warehousing fee (inc Gst)** | Decimal | Storage charges |\n| 18 | **Return premium (incl GST)** | Decimal | Return handling fee |\n| 19 | **Return premium (incl GST) of Return** | Decimal | Return premium for returns |\n| 20 | **Meesho Commission Percentage** | Decimal | Commission rate |\n| 21 | **Meesho Commission (Incl. GST)** | Decimal | Platform commission |\n| 22 | **Meesho gold platform fee (Incl. GST)** | Decimal | Gold tier fees |\n| 23 | **Meesho mall platform fee (Incl. GST)** | Decimal | Mall tier fees |\n| 24 | **Fixed Fee (Incl. GST).1** | Decimal | Additional fixed fees |\n| 25 | **Warehousing fee (Incl. GST)** | Decimal | Warehouse charges |\n| 26 | **Return Shipping Charge (Incl. GST)** | Decimal | Return logistics cost |\n| 27 | **GST Compensation (PRP Shipping)** | Decimal | GST adjustments |\n| 28 | **Shipping Charge (Incl. GST)** | Decimal | Forward shipping cost |\n\n#### Section 5: Other Charges (Columns 29-32)\n| # | Column Name | Data Type | Description |\n|---|-------------|-----------|-------------|\n| 29 | **Other Support Service Charges (Excl. GST)** | Decimal | Additional service fees |\n| 30 | **Waivers (Excl. GST)** | Decimal | Fee waivers |\n| 31 | **Net Other Support Service Charges (Excl. GST)** | Decimal | Net additional charges |\n| 32 | **GST on Net Other Support Service Charges** | Decimal | GST on additional charges |\n\n#### Section 6: TCS & TDS (Columns 33-35)\n| # | Column Name | Data Type | Description |\n|---|-------------|-----------|-------------|\n| 33 | **TCS** | Decimal | Tax Collected at Source |\n| 34 | **TDS Rate %** | Decimal | Tax Deducted at Source rate |\n| 35 | **TDS** | Decimal | TDS amount |\n\n#### Section 7: Recovery, Claims and Compensation (Columns 36-42)\n| # | Column Name | Data Type | Description |\n|---|-------------|-----------|-------------|\n| 36 | **Compensation** | Decimal | Compensation amount |\n| 37 | **Claims** | Decimal | Claim amounts |\n| 38 | **Recovery** | Decimal | Recovery charges |\n| 39 | **Compensation Reason** | String | Compensation details |\n| 40 | **Claims Reason** | String | Claim justification |\n| 41 | **Recovery Reason** | String | Recovery explanation |\n\n#### Date Columns\n| Column Name | Aliases | Data Type | Description |\n|-------------|---------|-----------|-------------|\n| **Payment Date** | `Settlement Date`, `Payout Date`, `Transaction Date`, `Date`, `Settled Date`, `Payment Settlement Date`, `Processing Date`, `Order Date` | Date | When payment was processed |\n\n#### Product Information Columns\n| Column Name | Aliases | Data Type | Description |\n|-------------|---------|-----------|-------------|\n| **Product Name** | `Item Name`, `Title`, `Product Title`, `Product`, `Item`, `Name` | String | Product name for reference |\n| **Supplier SKU** | `SKU`, `Product SKU`, `Item SKU`, `Product Code`, `Item Code`, `sku` | String | Product SKU for matching |\n| **Product GST %** | `GST %`, `GST Percent`, `GST`, `Tax %`, `Tax Percent`, `Product Tax %`, `Gst %` | Decimal | Product GST percentage |\n\n#### Order Status Columns\n| Column Name | Aliases | Data Type | Description |\n|-------------|---------|-----------|-------------|\n| **Live Order Status** | `Order Status`, `Status`, `Current Status`, `Order State`, `Delivery Status`, `Live Status` | String | Current order status |\n\n#### Financial Breakdown Columns\n| Column Name | Description |\n|-------------|-------------|\n| **Total Sale Amount (Incl. Shipping & GST)** | Total order value |\n| **Meesho Commission (Incl. GST)** | Platform commission |\n| **Fixed Fee** | Fixed processing fees |\n| **Payment Gateway Fee** | Transaction fees |\n| **Ads Fee** | Advertising costs |\n\n### Actual XLSX Sample Data (Key Columns)\n```\nSub Order No              | Order Date          | Product Name                    | Supplier SKU | Live Order Status | Product GST % | Final Settlement Amount | Payment Date | Total Sale Amount\n187110529767075968_1      | 2025-08-13 13:20:27 | Striped Bandhani Georgette Saree| pink-sadi    | RTO              | 5            | 0.0                     | 2025-08-22   | 594.0\n187079952046256704_1      | 2025-08-13 11:18:56 | Striped Bandhani Georgette Saree| blue-sadi    | RTO              | 5            | 0.0                     | 2025-08-22   | 578.0\n187078147295121664_1      | 2025-08-13 11:11:46 | Striped Bandhani Georgette Saree| pink-sadi    | RTO              | 5            | 0.0                     | 2025-08-22   | 579.0\n```\n\n### Payment Formula References (Row 0 - Technical)\nThe XLSX contains formula references in row 0:\n- **Column 7 (GST %)**: Reference \"A\"\n- **Column 12 (Final Settlement)**: Complex formula \"(B + C + G + H + I + L + Q + R + S + T + U + V + W + Y + AA + AD + AF + AX)\"\n- **Column 14 (Total Sale)**: Reference \"B\"\n- **Column 15 (Return Amount)**: Reference \"C\"\n\nThese formulas show how the final settlement amount is calculated from various fee components.\n\n---\n\n## 🔄 STEP-BY-STEP FILE PROCESSING WORKFLOW\n\n### Phase 1: CSV Processing (Order Data)\n\n#### Step 1.1: File Upload & Validation\n1. **Upload CSV File** (Example: `orders_august_1758081248885.csv`)\n2. **Basic Validation**:\n   - Check file extension (.csv)\n   - Validate file size (max 50MB)\n   - Verify UTF-8 encoding\n3. **Initial Parse**: Read first few lines to detect structure\n\n#### Step 1.2: Header Detection & Mapping\n1. **Extract Headers**: Read line 1 to get column names\n   ```\n   [\"Reason for Credit Entry\",\"Sub Order No\",\"Order Date\",...,\"Packet Id\"]\n   ```\n2. **Column Mapping**: Map each column to system fields\n   - Column 1: `Reason for Credit Entry` → `reasonForCredit`\n   - Column 2: `Sub Order No` → `subOrderNo` \n   - Column 3: `Order Date` → `orderDate`\n   - And so on...\n\n#### Step 1.3: Data Processing (149 orders)\n1. **Row-by-Row Processing**:\n   ```javascript\n   For each row (2 to 150):\n     - Extract subOrderNo: \"184337885113119297_1\"\n     - Parse orderDate: \"2025-08-05\" → Date object\n     - Clean prices: \"488.0\" → 488.0\n     - Map status: \"DELIVERED\" → \"PAID\"\n   ```\n\n2. **Status Mapping Logic**:\n   ```\n   DELIVERED → PAID (60% of orders)\n   RTO_COMPLETE → REFUNDED (25% of orders)  \n   CANCELLED → CANCELLED (10% of orders)\n   RTO_LOCKED → PROCESSING (3% of orders)\n   RTO_OFD → PROCESSING (2% of orders)\n   ```\n\n3. **Product Metadata Extraction**:\n   - Extract unique SKUs: `ctn-pink-black`, `green-sadi`, `purple-sadi`\n   - Default GST: 5% (inferred from payment data)\n   - Price ranges: ₹484-₹499\n\n#### Step 1.4: Database Storage\n1. **Insert Orders**: 149 order records\n2. **Update Products**: Create/update product master data\n3. **Generate Upload Record**: Track processing metadata\n\n### Phase 2: ZIP Processing (Payment Data)\n\n#### Step 2.1: ZIP Extraction\n1. **Extract ZIP** (`meesho_PREVIOUS_PAYMENT_aug_1758257467221.zip`)\n2. **List Contents**: Find XLSX files\n   ```\n   Found: 2918427_SP_ORDER_ADS_REFERRAL_PAYMENT_FILE_PREVIOUS_PAYMENT_2025-08-01_2025-08-31.xlsx\n   ```\n\n#### Step 2.2: XLSX Analysis\n1. **Sheet Detection**: \n   ```\n   Available sheets: ['Disclaimer', 'Order Payments', 'Ads Cost', 'Referral Payments', 'Compensation and Recovery']\n   Target sheet: 'Order Payments'\n   ```\n\n2. **Header Row Location**:\n   ```\n   Row 0: Formula references (A, B, C, etc.)\n   Row 1: Actual column headers (42 columns)\n   Row 2+: Data rows (10 payment records)\n   ```\n\n#### Step 2.3: Column Mapping (42 columns)\n1. **Core Columns**:\n   - Column 1: `Sub Order No` → Primary key for matching\n   - Column 12: `Final Settlement Amount` → Payment amount\n   - Column 11: `Payment Date` → Settlement date\n   - Column 6: `Live Order Status` → Current status\n\n2. **Financial Breakdown**:\n   - Column 14: `Total Sale Amount` → Gross revenue\n   - Column 21: `Meesho Commission` → Platform fees\n   - Column 16: `Fixed Fee` → Processing fees\n   - Columns 33-35: TCS/TDS tax components\n\n#### Step 2.4: Data Processing (10 payments)\n1. **Payment Record Extraction**:\n   ```javascript\n   For each row (2 to 11):\n     - subOrderNo: \"187110529767075968_1\"\n     - settlementAmount: 0.0 (for RTO orders)\n     - paymentDate: \"2025-08-22\"\n     - orderStatus: \"RTO\"\n   ```\n\n2. **GST Data Collection**:\n   - All products: 5% GST rate\n   - Price ranges: ₹578-₹594 (gross amounts)\n\n#### Step 2.5: Database Updates\n1. **Insert Payments**: 10 payment records\n2. **Update Order Statuses**: Sync with live status\n3. **Update Product GST**: Apply 5% GST to all products\n\n### Phase 3: Reconciliation Process\n\n#### Step 3.1: Order-Payment Matching\n1. **Match by Sub Order No**:\n   ```\n   CSV Orders: 149 records\n   Payment Data: 10 records\n   Matched: 10 orders\n   Unmatched: 139 orders (awaiting payment data)\n   ```\n\n2. **Status Reconciliation**:\n   - Update payment status based on settlement amounts\n   - Zero settlement = RTO/Cancelled\n   - Positive settlement = Paid\n\n#### Step 3.2: Financial Calculations\n1. **Profit/Loss Calculation**:\n   ```\n   For each matched order:\n     Revenue = Final Settlement Amount\n     Costs = Product Cost + Shipping + Fees\n     Profit = Revenue - Costs\n   ```\n\n2. **Commission Tracking**:\n   - Platform commission: Variable % of sale amount\n   - Fixed fees: Standard processing charges\n   - Tax components: TCS/TDS as applicable\n\n#### Step 3.3: Discrepancy Detection\n1. **Missing Payments**: 139 orders without payment data\n2. **Status Mismatches**: Compare CSV status vs XLSX status\n3. **Amount Variances**: Check price consistency between files\n\n---\n\n## 📋 DATA VALIDATION RULES\n\n### Required Field Validation\n| Field | Validation Rule | Error Message |\n|-------|-----------------|---------------|\n| Sub Order No | Must be present and non-empty | \"Missing required field: Sub Order No\" |\n| Product Name | Must be present and non-empty | \"Missing required field: Product Name\" |\n| SKU | Must be present and non-empty | \"Missing required field: SKU\" |\n\n### Data Type Validation\n| Field Type | Validation Rule | Default Value |\n|------------|-----------------|---------------|\n| **Numeric Fields** | Remove currency symbols (₹,$,€,£), commas | `0` |\n| **Date Fields** | Support multiple formats (DD/MM/YYYY, MM/DD/YYYY, ISO) | Current date |\n| **GST Percentage** | Must be 0-100% | `5%` |\n\n### Data Cleaning Rules\n1. **Currency Cleaning**: Removes ₹, $, €, £, commas from numeric fields\n2. **Text Trimming**: Removes leading/trailing whitespace\n3. **Empty Value Handling**: Converts empty strings to appropriate defaults\n4. **Date Parsing**: Handles multiple date formats including Excel serial numbers\n\n---\n\n## 🎯 COLUMN MATCHING ALGORITHM\n\n### Fuzzy Matching Process\n1. **Exact Match**: First attempts exact column name match\n2. **Case Insensitive**: Tries lowercase matching\n3. **Alias Matching**: Checks against predefined aliases list\n4. **Substring Matching**: Uses contains() for partial matches\n5. **Normalized Matching**: Removes special characters and spaces\n\n### Priority Order\n1. **Primary Names**: Standard column names (e.g., \"Sub Order No\")\n2. **Common Aliases**: Frequently used variations\n3. **System Variations**: Technical variations (camelCase, snake_case)\n4. **Legacy Names**: Older format support\n\n---\n\n## 🔧 ERROR HANDLING\n\n### Common Error Types\n| Error Type | Cause | Resolution |\n|------------|-------|------------|\n| **Missing Headers** | Required columns not found | Check column name aliases |\n| **Invalid Data Format** | Incorrect data types | Apply data cleaning rules |\n| **Empty Required Fields** | Missing critical data | Skip row with error log |\n| **File Corruption** | Damaged file | Re-upload file |\n| **Encoding Issues** | Character encoding problems | Convert to UTF-8 |\n\n### Error Reporting\n- **Row-Level Errors**: Specific row and field issues\n- **File-Level Errors**: Overall file processing problems\n- **Summary Reports**: Count of successful vs failed records\n\n---\n\n## 📈 PERFORMANCE CONSIDERATIONS\n\n### Batch Processing\n- **CSV Files**: Process in chunks for large files\n- **XLSX Files**: Read with optimized memory usage\n- **Database Operations**: Use bulk insert/update operations\n\n### Memory Management\n- **Stream Processing**: Use streaming for large CSV files\n- **Buffer Management**: Efficient buffer handling for ZIP extraction\n- **Garbage Collection**: Clean up temporary files and objects\n\n---\n\n## 🔍 DEBUGGING GUIDE (Based on Actual Files)\n\n### Expected Processing Results\n| File Type | Records | Processing Time | Success Rate |\n|-----------|---------|----------------|--------------|\n| **CSV (149 orders)** | 149 orders processed | ~2-3 seconds | 100% |\n| **ZIP (10 payments)** | 10 payments + 5 GST updates | ~1-2 seconds | 100% |\n| **Reconciliation** | 10 matches found | <1 second | 6.7% match rate |\n\n### Common Processing Patterns\n1. **CSV Processing Output**:\n   ```\n   CSV Headers detected: ['Reason for Credit Entry', 'Sub Order No', ...]\n   CSV Processing complete: 149 orders processed, 5 product metadata records, 0 errors\n   ```\n\n2. **ZIP Processing Output**:\n   ```\n   Found 1 files in ZIP: ['2918427_SP_ORDER_ADS_REFERRAL_PAYMENT_FILE...xlsx']\n   Found headers at row 1 in filename: ['Sub Order No', 'Order Date', ...]\n   Column detection: Sub Order No: \"Sub Order No\" (index 0)\n   Settlement Amount: \"Final Settlement Amount\" (index 11)\n   filename: Processed 10 payments, 5 product GST records, 0 errors\n   ```\n\n### Troubleshooting Real Issues\n\n#### Issue 1: Low Match Rate (6.7%)\n**Problem**: Only 10 out of 149 orders have payment data\n**Cause**: Payment file covers different date range or subset of orders\n**Solution**: \n- Check date ranges (CSV: Aug 5-31, Payment: Aug 13-22)\n- Verify if multiple payment files needed\n- Normal for partial month reconciliation\n\n#### Issue 2: Zero Settlement Amounts\n**Problem**: All payments show `0.0` settlement amount  \n**Cause**: Sample contains only RTO (return) orders\n**Expected**: RTO orders have zero payout, delivered orders have positive amounts\n**Solution**: This is correct behavior for return transactions\n\n#### Issue 3: Missing Packet IDs\n**Problem**: Some CSV rows have empty Packet Id\n**Symptoms**: Last column shows blank values\n**Cause**: Orders not yet shipped or cancelled orders\n**Solution**: Normal for unshipped/cancelled orders\n\n#### Issue 4: Complex XLSX Structure\n**Problem**: Formula references in header row\n**Symptoms**: Row 0 contains \"A\", \"B\", formulas instead of data\n**Cause**: Meesho uses Excel formulas for calculations\n**Solution**: System correctly starts reading from row 1 (actual headers)\n\n### Debug Commands\n```bash\n# Check CSV structure\nhead -5 \"orders_august_1758081248885.csv\"\nwc -l \"orders_august_1758081248885.csv\"\n\n# Examine ZIP contents  \nunzip -l \"meesho_PREVIOUS_PAYMENT_aug_1758257467221.zip\"\n\n# Extract and analyze XLSX\nunzip -p \"meesho_PREVIOUS_PAYMENT_aug_1758257467221.zip\" > payment_file.xlsx\npython3 -c \"import pandas as pd; df=pd.read_excel('payment_file.xlsx', sheet_name='Order Payments', header=1); print(f'Rows: {len(df)}, Cols: {len(df.columns)}')\"\n```\n\n### Performance Benchmarks\n```\nFile Sizes:\n- CSV: ~45KB (149 orders)\n- ZIP: ~17KB (10 payments)  \n- XLSX: ~35KB uncompressed\n\nProcessing Times:\n- CSV parsing: 0.5 seconds\n- ZIP extraction: 0.2 seconds\n- XLSX processing: 1.0 seconds\n- Database operations: 0.8 seconds\n- Total: ~2.5 seconds\n```\n\n---\n\n## 🚀 PRACTICAL USAGE EXAMPLES\n\n### Example 1: Complete Processing Workflow\n```typescript\n// Step 1: Process Order CSV\nconst csvBuffer = fs.readFileSync('orders_august_1758081248885.csv');\nconst csvResult = await CSVProcessor.processOrdersCSV(csvBuffer);\n\nconsole.log(`Processed ${csvResult.orders.length} orders`);\n// Output: Processed 149 orders\n\n// Step 2: Process Payment ZIP\nconst zipBuffer = fs.readFileSync('meesho_PREVIOUS_PAYMENT_aug_1758257467221.zip');\nconst zipResult = await ZIPProcessor.processPaymentZIP(zipBuffer);\n\nconsole.log(`Processed ${zipResult.payments.length} payments`);\n// Output: Processed 10 payments\n\n// Step 3: Reconciliation\nconst reconciled = await ReconciliationService.reconcilePayments(\n  csvResult.orders, \n  zipResult.payments\n);\nconsole.log(`Matched ${reconciled.matched} out of ${csvResult.orders.length} orders`);\n// Output: Matched 10 out of 149 orders\n```\n\n### Example 2: Frontend Upload Interface\n```javascript\n// CSV Upload\nconst handleCSVUpload = async (file) => {\n  const formData = new FormData();\n  formData.append('file', file); // orders_august_1758081248885.csv\n  formData.append('type', 'orders');\n  \n  const response = await fetch('/api/upload', {\n    method: 'POST',\n    body: formData\n  });\n  \n  const result = await response.json();\n  // Expected result: { ordersProcessed: 149, errors: [] }\n};\n\n// ZIP Upload  \nconst handleZIPUpload = async (file) => {\n  const formData = new FormData();\n  formData.append('file', file); // meesho_PREVIOUS_PAYMENT_aug_1758257467221.zip\n  formData.append('type', 'payments');\n  \n  const response = await fetch('/api/upload', {\n    method: 'POST',\n    body: formData\n  });\n  \n  const result = await response.json();\n  // Expected result: { paymentsProcessed: 10, productGstUpdated: 5 }\n};\n```\n\n### Example 3: Data Transformation Examples\n```typescript\n// CSV Row Processing\nconst rawCSVRow = {\n  \"Reason for Credit Entry\": \"DELIVERED\",\n  \"Sub Order No\": \"184337885113119297_1\", \n  \"Order Date\": \"2025-08-05\",\n  \"Customer State\": \"Bihar\",\n  \"Product Name\": \"Soft Pure COTTON Hand Batik Block Printed Saree...\",\n  \"SKU\": \"ctn-pink-black\",\n  \"Size\": \"Free Size\",\n  \"Quantity\": \"1\",\n  \"Supplier Listed Price (Incl. GST + Commission)\": \"488.0\",\n  \"Supplier Discounted Price (Incl GST and Commision)\": \"488.0\",\n  \"Packet Id\": \"TP0LGEU05439769\"\n};\n\n// Transformed Order Object\nconst processedOrder = {\n  subOrderNo: \"184337885113119297_1\",\n  orderDate: new Date(\"2025-08-05\"),\n  customerState: \"Bihar\", \n  productName: \"Soft Pure COTTON Hand Batik Block Printed Saree...\",\n  sku: \"ctn-pink-black\",\n  size: \"Free Size\",\n  quantity: 1,\n  listedPrice: \"488.0\",\n  discountedPrice: \"488.0\", \n  packetId: \"TP0LGEU05439769\",\n  reasonForCredit: \"DELIVERED\",\n  paymentStatus: \"PAID\", // Mapped from DELIVERED\n  paymentDate: new Date(\"2025-08-05\") // Set for completed orders\n};\n\n// XLSX Row Processing  \nconst rawXLSXRow = {\n  \"Sub Order No\": \"187110529767075968_1\",\n  \"Order Date\": \"2025-08-13 13:20:27\",\n  \"Product Name\": \"Striped Bandhani Georgette Saree\",\n  \"Supplier SKU\": \"pink-sadi\",\n  \"Live Order Status\": \"RTO\",\n  \"Product GST %\": 5,\n  \"Final Settlement Amount\": 0.0,\n  \"Payment Date\": \"2025-08-22\",\n  \"Total Sale Amount (Incl. Shipping & GST)\": 594.0\n};\n\n// Transformed Payment Object\nconst processedPayment = {\n  subOrderNo: \"187110529767075968_1\",\n  settlementAmount: \"0.0\",\n  settlementDate: new Date(\"2025-08-22\"),\n  orderValue: \"594.0\",\n  commissionFee: \"0.0\", // Extracted from commission columns\n  fixedFee: \"0.0\",\n  paymentGatewayFee: \"0.0\",\n  adsFee: \"0.0\"\n};\n```\n\n---\n\n## 📚 TECHNICAL SPECIFICATIONS\n\n### Supported File Formats\n- **CSV**: UTF-8 encoded, comma-separated values\n- **ZIP**: Standard ZIP archives containing XLSX files\n- **XLSX**: Excel 2007+ format with proper worksheet structure\n\n### File Size Limits\n- **CSV Files**: Up to 50MB\n- **ZIP Files**: Up to 100MB\n- **Individual XLSX**: Up to 50MB\n\n### Processing Capacity\n- **Records per File**: Up to 100,000 orders/payments\n- **Concurrent Uploads**: 5 files per user\n- **Processing Time**: ~1-3 seconds per 1,000 records\n\n---\n\n## 🔐 SECURITY CONSIDERATIONS\n\n### File Validation\n- **File Type Verification**: Validates actual file format vs extension\n- **Content Scanning**: Basic malware detection\n- **Size Limits**: Prevents oversized file uploads\n\n### Data Security\n- **Temporary Files**: Automatically cleaned after processing\n- **Database Security**: Parameterized queries prevent injection\n- **Access Control**: User-based file access restrictions\n\n---\n\n## 🆕 FUTURE ENHANCEMENTS\n\n### Planned Features\n1. **Advanced Column Detection**: AI-powered column mapping\n2. **Custom Field Mapping**: User-defined column aliases\n3. **Bulk Processing**: Multi-file upload support\n4. **Real-time Validation**: Live error detection during upload\n5. **Template Generation**: Auto-generate CSV templates\n\n### API Extensions\n- **Webhook Integration**: Real-time processing notifications\n- **Batch API**: Programmatic bulk uploads\n- **Export Functions**: Custom report generation\n\n---\n\n## 📞 SUPPORT & TROUBLESHOOTING\n\n### Getting Help\n1. **Error Logs**: Check server logs for detailed error information\n2. **Sample Files**: Use provided sample files for testing\n3. **Column Mapping**: Verify column names match expected aliases\n4. **Data Format**: Ensure data follows expected format guidelines\n\n### Contact Information\n- **Technical Issues**: Check application logs and error messages\n- **Data Questions**: Review this guide and sample file structures\n- **Feature Requests**: Document requirements and use cases\n\n---\n\n*Last Updated: September 2025*\n*Version: 1.0*","size_bytes":30409},"pyproject.toml":{"content":"[project]\nname = \"repl-nix-workspace\"\nversion = \"0.1.0\"\ndescription = \"Add your description here\"\nrequires-python = \">=3.11\"\ndependencies = [\n    \"openpyxl>=3.1.5\",\n    \"pandas>=2.3.2\",\n]\n","size_bytes":188},"server/db.ts":{"content":"import { Pool } from 'pg';\nimport { drizzle } from 'drizzle-orm/node-postgres';\nimport * as schema from \"@shared/schema\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":387},"DASHBOARD_CALCULATION_GUIDE.md":{"content":"# Dashboard Calculation Guide\n\n## Overview\nThis guide explains the step-by-step calculation logic for all sections of the ReconMe Meesho Payment Reconciliation Dashboard. The dashboard processes data from uploaded CSV (orders) and ZIP (payment settlements) files to provide comprehensive financial analytics.\n\n## Data Sources\n\n### Primary Data Sources:\n1. **Orders CSV** - Contains order information with fields like:\n   - `Sub Order No`: Unique identifier for each order\n   - `Order Date`: Date when order was placed\n   - `Supplier Discounted Price (Incl GST and Commision)`: Final order amount\n   - `Product Name`: Name of the product\n   - `SKU`: Stock Keeping Unit identifier\n   - `Quantity`: Number of items ordered\n   - `Reason for Credit Entry`: Order status (DELIVERED, CANCELLED, RTO_COMPLETE, etc.)\n\n2. **Payment ZIP** - Contains settlement information with fields like:\n   - `subOrderNo`: Links to orders\n   - `settlementAmount`: Amount settled by Meesho\n   - `commissionFee`: Platform commission\n   - `paymentGatewayFee`: Payment processing fees\n   - `adsFee`: Marketing/advertisement fees\n   - `fixedFee`: Fixed operational fees\n   - `settlementDate`: Date of settlement\n\n## Section 1: Overall Financial Summary\n\n### Calculations:\n\n#### Total Sales (Invoice)\n```sql\nSUM(orders_dynamic.dynamic_data->>'Supplier Discounted Price (Incl GST and Commision)')\nFROM orders_dynamic\nWHERE upload_id IN (SELECT id FROM uploads WHERE is_current_version = true)\n```\n**Logic**: Sum of all order values from the uploaded CSV file\n\n#### Settlement Amount\n```sql\nSUM(payments.settlement_amount)\nFROM payments\nWHERE sub_order_no IN (current upload orders)\n```\n**Logic**: Total amount received from Meesho as settlements\n\n#### Total Purchase Cost\n```sql\nSUM(\n  CAST(orders_dynamic.dynamic_data->>'Quantity' AS INTEGER) * \n  CAST(products_dynamic.dynamic_data->>'costPrice' AS DECIMAL)\n)\n```\n**Logic**: Quantity × Cost Price for all products\n\n#### Total Packaging Cost\n```sql\nSUM(\n  CAST(orders_dynamic.dynamic_data->>'Quantity' AS INTEGER) * \n  CAST(products_dynamic.dynamic_data->>'packagingCost' AS DECIMAL)\n)\n```\n**Logic**: Quantity × Packaging Cost for all products\n\n#### Shipping Cost\n```sql\ntotalOrders * 49\n```\n**Logic**: Standard shipping rate of ₹49 per order\n\n#### Total TDS (Tax Deducted at Source)\n```sql\nsettlementAmount * 0.01\n```\n**Logic**: 1% TDS on settlement amount\n\n#### Net Profit\n```sql\nsettlementAmount - (totalPurchaseCost + totalPackagingCost + shippingCost + totalTds + totalFees)\n```\n**Logic**: Revenue minus all costs and fees\n\n## Section 2: Orders Overview\n\n### Order Status Calculations:\n\n#### Total Orders\n```sql\nCOUNT(orders_dynamic.id)\nFROM orders_dynamic\nWHERE upload_id IN (current version uploads)\n```\n\n#### Delivered Orders\n```sql\nCOUNT(CASE WHEN UPPER(dynamic_data->>'Reason for Credit Entry') = 'DELIVERED' THEN 1 END)\n```\n\n#### Shipped Orders\n```sql\nCOUNT(CASE WHEN UPPER(dynamic_data->>'Reason for Credit Entry') IN ('SHIPPED', 'READY_TO_SHIP') THEN 1 END)\n```\n\n#### Cancelled Orders\n```sql\nCOUNT(CASE WHEN UPPER(dynamic_data->>'Reason for Credit Entry') IN ('CANCELLED', 'CANCELED') THEN 1 END)\n```\n\n#### Returns/RTO\n```sql\nCOUNT(CASE WHEN UPPER(dynamic_data->>'Reason for Credit Entry') IN ('RETURN', 'RETURNED', 'REFUND', 'RTO', 'RTO_COMPLETE') THEN 1 END)\n```\n\n#### Average Order Value\n```sql\nAVG(CAST(dynamic_data->>'Supplier Discounted Price (Incl GST and Commision)' AS DECIMAL))\n```\n\n#### Return Rate\n```sql\n(returns / totalOrders) * 100\n```\n\n#### Orders Awaiting Payment Record\n```sql\nCOUNT(orders_dynamic.id)\nFROM orders_dynamic\nLEFT JOIN payments ON orders_dynamic.dynamic_data->>'Sub Order No' = payments.sub_order_no\nWHERE payments.id IS NULL\n```\n**Logic**: Orders without corresponding payment records\n\n## Section 3: Settlement Components Breakdown\n\n### Components:\n\n1. **Sale Amount**: `SUM(payments.order_value)`\n2. **Sale Return Amount**: `SUM(CASE WHEN payments.order_value < 0 THEN payments.order_value ELSE 0 END)`\n3. **Shipping Charges**: `COUNT(*) * 49`\n4. **Return Charges**: `SUM(CASE WHEN payments.order_value < 0 THEN 49 ELSE 0 END)`\n5. **Platform Fees**: `SUM(payments.commission_fee)`\n6. **Payment Gateway Fees**: `SUM(payments.payment_gateway_fee)`\n7. **Fixed Fees**: `SUM(payments.fixed_fee)`\n8. **Ads Fees**: `SUM(payments.ads_fee)`\n9. **TCS (Tax Collected at Source)**: `SUM(payments.order_value * 0.01)`\n10. **TDS (Tax Deducted at Source)**: `SUM(payments.settlement_amount * 0.01)`\n11. **Final Settlement**: `SUM(payments.settlement_amount)`\n\n## Section 4: Earnings Overview\n\n### Components:\n1. **Final Settlement**: Total amount received\n2. **Marketing Cost**: `-SUM(payments.ads_fee)`\n3. **Product Cost**: `-SUM(cost_price * quantity)`\n4. **Packaging Cost**: `-SUM(packaging_cost * quantity)`\n5. **Commission Fees**: `-SUM(payments.commission_fee)`\n6. **Payment Gateway Fees**: `-SUM(payments.payment_gateway_fee)`\n7. **Fixed Fees**: `-SUM(payments.fixed_fee)`\n8. **Net Profit**: Final Settlement - Total Costs\n\n## Section 5: Charts and Analytics\n\n### Revenue Trend Chart\n- **X-axis**: Months (last 12 months)\n- **Y-axis**: Revenue and Profit\n- **Data**: Monthly aggregation of orders by Order Date\n- **Profit Calculation**: Monthly settlements - monthly fees\n\n### Daily Volume Chart\n- **X-axis**: Days (last 30 days)\n- **Y-axis**: Order volume and AOV\n- **AOV Calculation**: Total daily revenue / Daily order count\n\n### Top Products Chart\n- **Ranking**: By total sales value\n- **Calculation**: `SUM(discounted_price * quantity)` per SKU\n- **Limit**: Top 10 products\n\n### Top Returns Chart\n- **Ranking**: By combined returns and RTO count\n- **Data Source**: Orders with return/RTO status\n- **Calculation**: Count of return reasons per SKU\n\n### Order Status Distribution\n- **Type**: Pie chart\n- **Data**: Count of orders by status\n- **Categories**: Delivered, Shipped, Cancelled, Returns, etc.\n\n## Section 6: Operational Costs\n\n### Cost Types:\n1. **Affiliate Fees**: `SUM(payments.ads_fee)`\n2. **Fixed Fee**: `SUM(payments.fixed_fee)`\n3. **Meesho Commission**: `SUM(payments.ads_fee) * 0.15` (15% of ads fee)\n4. **Warehousing Fee**: `SUM(payments.fixed_fee) * 0.5` (50% of fixed fee)\n5. **Total Claims**: `SUM(CASE WHEN payments.fixed_fee > 0 THEN payments.fixed_fee ELSE 0 END)`\n\n## Data Flow Summary\n\n1. **File Upload**: User uploads Orders CSV and Payment ZIP files\n2. **Data Processing**: Files are parsed and stored in `orders_dynamic` and `payments` tables\n3. **Current Version Tracking**: Only the latest upload for each file type is marked as current\n4. **Real-time Calculation**: All metrics are calculated from current version data\n5. **Dashboard Display**: Frontend displays formatted calculations with proper currency and percentage formatting\n\n## Key Formulas Reference\n\n| Metric | Formula |\n|--------|---------|\n| Net Profit | Settlement - (Purchase Cost + Packaging + Shipping + TDS + Fees) |\n| Return Rate | (Returns ÷ Total Orders) × 100 |\n| AOV | Total Revenue ÷ Total Orders |\n| Profit Margin | (Net Profit ÷ Total Sales) × 100 |\n| Settlement Rate | (Orders with Settlement ÷ Total Orders) × 100 |\n\n## Currency Formatting\n\nAll monetary values are displayed in Indian Rupees (₹) using:\n```javascript\nnew Intl.NumberFormat('en-IN', {\n  style: 'currency',\n  currency: 'INR',\n  maximumFractionDigits: 2\n}).format(amount)\n```\n\n## Update Mechanism\n\n- **Automatic Recalculation**: Triggered when new files are uploaded\n- **Manual Refresh**: Users can click \"Refresh Data\" button\n- **Cache Invalidation**: All dashboard queries are invalidated when data changes\n- **Real-time Updates**: Frontend automatically refetches data every 30 seconds\n\n## Error Handling\n\n- **Missing Data**: Default values (0) are used for missing calculations\n- **Invalid Dates**: Date parsing errors result in exclusion from time-based charts\n- **Null Values**: Handled gracefully with COALESCE in SQL queries\n- **Division by Zero**: Prevented with conditional checks (e.g., `totalOrders > 0`)\n\nThis guide serves as the complete reference for understanding how every number on the dashboard is calculated and where the data originates from.","size_bytes":8109}},"version":1}
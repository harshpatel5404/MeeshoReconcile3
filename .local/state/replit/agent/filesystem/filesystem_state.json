{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# ReconMe - Payment Reconciliation Platform\n\n## Overview\n\nReconMe is a comprehensive payment reconciliation web application designed for e-commerce businesses, particularly those selling through platforms like Meesho. The system automates the complex process of matching orders with payment settlements, providing detailed financial analytics and discrepancy detection.\n\nThe application processes uploaded CSV/Excel files containing order and payment data, automatically reconciles transactions, and generates comprehensive reports with profit/loss calculations, commission tracking, and settlement analysis.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript for type safety and modern development patterns\n- **Styling**: Tailwind CSS with shadcn/ui component library for consistent, responsive design\n- **State Management**: React Query (TanStack Query) for server state management and caching\n- **Routing**: Wouter for lightweight client-side routing\n- **Forms**: React Hook Form with Zod validation for robust form handling\n- **Charts**: Recharts for data visualization and analytics dashboards\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript for full-stack type safety\n- **Database ORM**: Drizzle ORM with PostgreSQL for type-safe database operations\n- **File Processing**: Multer for multipart file uploads, with support for CSV and Excel parsing\n- **API Design**: RESTful API endpoints with proper HTTP status codes and error handling\n\n### Authentication & Authorization\n- **Primary Auth**: Firebase Authentication for user management\n- **Token Verification**: Firebase Admin SDK for server-side token validation\n- **Session Management**: JWT tokens with automatic refresh capabilities\n- **Authorization**: Role-based access control through Firebase user claims\n\n### Database Design\n- **Primary Database**: PostgreSQL with Neon serverless hosting\n- **Schema Management**: Drizzle migrations for version-controlled database changes\n- **Core Entities**:\n  - Users (Firebase UID mapping, user profiles)\n  - Products (SKU management, cost tracking, GST calculations)\n  - Orders (transaction details, customer information, pricing)\n  - Payments (settlement tracking, fee calculations)\n  - Reconciliations (matched transactions, discrepancy detection)\n  - Uploads (file processing history, batch tracking)\n\n### File Processing Pipeline\n- **Upload Handling**: Multipart form data processing with file type validation\n- **Format Support**: CSV and Excel file parsing with automatic column mapping\n- **Data Transformation**: Order and payment data normalization with validation\n- **Batch Processing**: Idempotent processing to prevent duplicate data insertion\n- **Error Handling**: Comprehensive error logging and user feedback for processing issues\n\n### Reconciliation Engine\n- **Matching Algorithm**: Sub-order number based transaction matching\n- **Financial Calculations**: \n  - Profit/loss computation with product costs and fees\n  - Commission and gateway fee tracking\n  - GST calculations and tax reporting\n- **Discrepancy Detection**: Automated identification of mismatched settlements\n- **Status Tracking**: Order lifecycle management (delivered, RTO, cancelled)\n\n### UI/UX Architecture\n- **Design System**: Consistent component library with shadcn/ui\n- **Responsive Design**: Mobile-first approach with adaptive layouts\n- **Dark Mode**: CSS custom properties for theme switching\n- **Accessibility**: ARIA compliance and keyboard navigation support\n- **Loading States**: Skeleton loading and progressive enhancement\n\n## External Dependencies\n\n### Cloud Services\n- **Firebase**: Authentication service and user management\n- **Neon Database**: Serverless PostgreSQL hosting\n- **Replit**: Development and deployment platform\n\n### Core Libraries\n- **@neondatabase/serverless**: PostgreSQL driver for serverless environments\n- **drizzle-orm**: Type-safe ORM with query builder\n- **@tanstack/react-query**: Server state management and caching\n- **firebase-admin**: Server-side Firebase SDK for token verification\n- **multer**: File upload middleware for Express\n\n### UI Components\n- **@radix-ui**: Headless component primitives for accessibility\n- **recharts**: Chart library for data visualization\n- **react-hook-form**: Form validation and state management\n- **@hookform/resolvers**: Zod integration for form validation\n- **tailwindcss**: Utility-first CSS framework\n\n### Development Tools\n- **Vite**: Build tool with hot module replacement\n- **TypeScript**: Static type checking across the stack\n- **ESBuild**: Fast JavaScript bundler for production builds\n- **tsx**: TypeScript execution for development server\n\n### File Processing\n- **csv-parser**: CSV file parsing and transformation\n- **xlsx**: Excel file reading and data extraction\n- **date-fns**: Date manipulation and formatting utilities\n\nThe architecture emphasizes type safety, scalability, and maintainability while providing a smooth user experience for complex financial data processing workflows.","size_bytes":5140},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2766},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express, Request, Response } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport multer from \"multer\";\nimport { storage } from \"./storage\";\nimport { verifyFirebaseToken } from \"./services/firebase\";\nimport { FileProcessor } from \"./services/fileProcessor\";\nimport { insertUserSchema, insertProductSchema } from \"@shared/schema\";\n\n// Multer configuration for file uploads\nconst upload = multer({\n  storage: multer.memoryStorage(),\n  limits: {\n    fileSize: 50 * 1024 * 1024, // 50MB limit\n  },\n});\n\n// Auth middleware\nasync function authenticateUser(req: Request, res: Response, next: any) {\n  try {\n    const token = req.headers.authorization?.split(' ')[1];\n    if (!token) {\n      return res.status(401).json({ message: 'No token provided' });\n    }\n\n    const decodedToken = await verifyFirebaseToken(token);\n    \n    // Get the database user record\n    const user = await storage.getUserByFirebaseUid(decodedToken.uid);\n    if (!user) {\n      return res.status(401).json({ message: 'User not found in database' });\n    }\n\n    req.user = {\n      ...decodedToken,\n      dbId: user.id // Add database ID to user object\n    };\n    next();\n  } catch (error) {\n    res.status(401).json({ message: 'Invalid token' });\n  }\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Auth routes\n  app.post('/api/auth/verify', async (req: Request, res: Response) => {\n    try {\n      const { idToken } = req.body;\n      \n      if (!idToken) {\n        return res.status(400).json({ message: 'ID token is required' });\n      }\n      \n      const decodedToken = await verifyFirebaseToken(idToken);\n      \n      // Get or create user\n      let user = await storage.getUserByFirebaseUid(decodedToken.uid);\n      if (!user) {\n        user = await storage.createUser({\n          firebaseUid: decodedToken.uid,\n          email: decodedToken.email || '',\n          displayName: decodedToken.name,\n          photoURL: decodedToken.picture,\n        });\n      }\n\n      res.json({ user, token: idToken });\n    } catch (error) {\n      console.error('Auth verification error:', error);\n      res.status(401).json({ message: 'Authentication failed' });\n    }\n  });\n\n  // Dashboard routes\n  app.get('/api/dashboard/summary', authenticateUser, async (req: Request, res: Response) => {\n    try {\n      const summary = await storage.getDashboardSummary();\n      res.json(summary);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to fetch dashboard summary' });\n    }\n  });\n\n  app.get('/api/dashboard/revenue-trend', authenticateUser, async (req: Request, res: Response) => {\n    try {\n      const revenueTrend = await storage.getRevenueTrend();\n      res.json(revenueTrend);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to fetch revenue trend' });\n    }\n  });\n\n  app.get('/api/dashboard/order-status', authenticateUser, async (req: Request, res: Response) => {\n    try {\n      const orderStatus = await storage.getOrderStatusDistribution();\n      res.json(orderStatus);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to fetch order status' });\n    }\n  });\n\n  // Upload routes\n  app.post('/api/upload', authenticateUser, upload.single('file'), async (req: Request, res: Response) => {\n    try {\n      if (!req.file) {\n        return res.status(400).json({ message: 'No file uploaded' });\n      }\n\n      const { fileType, sourceMonth, label } = req.body;\n      \n      // Create upload record\n      const uploadRecord = await storage.createUpload({\n        filename: req.file.filename || req.file.originalname,\n        originalName: req.file.originalname,\n        fileType,\n        status: 'processing',\n        sourceMonth,\n        label,\n        uploadedBy: req.user?.dbId || '',\n      });\n\n      // Process file asynchronously\n      processFileAsync(uploadRecord.id, req.file.buffer, fileType);\n\n      res.json({ uploadId: uploadRecord.id, status: 'processing' });\n    } catch (error) {\n      console.error('Upload error:', error);\n      res.status(500).json({ message: 'Upload failed' });\n    }\n  });\n\n  app.get('/api/uploads', authenticateUser, async (req: Request, res: Response) => {\n    try {\n      const uploads = await storage.getAllUploads();\n      res.json(uploads);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to fetch uploads' });\n    }\n  });\n\n  // Orders routes\n  app.get('/api/orders', authenticateUser, async (req: Request, res: Response) => {\n    try {\n      const filters = {\n        subOrderNo: req.query.subOrderNo as string,\n        status: req.query.status as string,\n        paymentStatus: req.query.paymentStatus as string,\n        dateFrom: req.query.dateFrom ? new Date(req.query.dateFrom as string) : undefined,\n        dateTo: req.query.dateTo ? new Date(req.query.dateTo as string) : undefined,\n      };\n\n      const orders = await storage.getAllOrders(filters);\n      res.json(orders);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to fetch orders' });\n    }\n  });\n\n  // Products routes\n  app.get('/api/products', authenticateUser, async (req: Request, res: Response) => {\n    try {\n      const products = await storage.getAllProducts();\n      res.json(products);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to fetch products' });\n    }\n  });\n\n  app.put('/api/products/:sku', authenticateUser, async (req: Request, res: Response) => {\n    try {\n      const { sku } = req.params;\n      const updateData = insertProductSchema.partial().parse(req.body);\n      \n      const product = await storage.updateProduct(sku, updateData);\n      if (!product) {\n        return res.status(404).json({ message: 'Product not found' });\n      }\n\n      res.json(product);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to update product' });\n    }\n  });\n\n  app.post('/api/products/bulk-update', authenticateUser, async (req: Request, res: Response) => {\n    try {\n      const { field, value } = req.body;\n      \n      if (!['packagingCost', 'gstPercent'].includes(field)) {\n        return res.status(400).json({ message: 'Invalid field' });\n      }\n\n      const products = await storage.getAllProducts();\n      const updates = products.map(product => \n        storage.updateProduct(product.sku, { [field]: value.toString() })\n      );\n      \n      await Promise.all(updates);\n      res.json({ message: 'Bulk update completed' });\n    } catch (error) {\n      res.status(500).json({ message: 'Bulk update failed' });\n    }\n  });\n\n\n  // Export routes\n  app.get('/api/export/:type', authenticateUser, async (req: Request, res: Response) => {\n    try {\n      const { type } = req.params;\n      let data: any[] = [];\n      let filename = '';\n\n      switch (type) {\n        case 'orders':\n          data = await storage.getAllOrders();\n          filename = 'orders_export.csv';\n          break;\n        case 'payments':\n          data = await storage.getAllPayments();\n          filename = 'payments_export.csv';\n          break;\n        default:\n          return res.status(400).json({ message: 'Invalid export type' });\n      }\n\n      // Convert to CSV\n      const csv = convertToCSV(data);\n      \n      res.setHeader('Content-Type', 'text/csv');\n      res.setHeader('Content-Disposition', `attachment; filename=\"${filename}\"`);\n      res.send(csv);\n    } catch (error) {\n      res.status(500).json({ message: 'Export failed' });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n\n// Async file processing\nasync function processFileAsync(uploadId: string, buffer: Buffer, fileType: string) {\n  try {\n    let result;\n    \n    if (fileType === 'orders_csv') {\n      result = await FileProcessor.processOrdersCSV(buffer);\n      if (result.orders) {\n        await storage.bulkCreateOrders(result.orders);\n        await FileProcessor.extractProductsFromOrders(result.orders);\n        await storage.updateUploadStatus(uploadId, 'processed', result.orders.length, result.errors);\n      }\n    } else if (fileType === 'payment_zip') {\n      result = await FileProcessor.processPaymentsXLSX(buffer);\n      if (result.payments) {\n        await storage.bulkCreatePayments(result.payments);\n        await storage.updateUploadStatus(uploadId, 'processed', result.payments.length, result.errors);\n      }\n    }\n  } catch (error) {\n    await storage.updateUploadStatus(uploadId, 'failed', 0, [String(error)]);\n  }\n}\n\n// CSV conversion helper\nfunction convertToCSV(data: any[]): string {\n  if (data.length === 0) return '';\n  \n  const headers = Object.keys(data[0]);\n  const csvRows = [headers.join(',')];\n  \n  for (const row of data) {\n    const values = headers.map(header => {\n      const val = row[header];\n      return typeof val === 'string' ? `\"${val.replace(/\"/g, '\"\"')}\"` : val;\n    });\n    csvRows.push(values.join(','));\n  }\n  \n  return csvRows.join('\\n');\n}\n\n// Extend Express Request type\ndeclare global {\n  namespace Express {\n    interface Request {\n      user?: {\n        uid: string;\n        email?: string;\n        name?: string;\n        picture?: string;\n        dbId?: string; // Add database ID\n      };\n    }\n  }\n}\n","size_bytes":9133},"server/storage.ts":{"content":"import postgres from \"postgres\";\nimport { drizzle } from \"drizzle-orm/postgres-js\";\nimport { eq, desc, asc, sql, count, sum, and, or, like, gte, lte } from \"drizzle-orm\";\nimport { \n  users, products, orders, payments, reconciliations, uploads,\n  type User, type InsertUser,\n  type Product, type InsertProduct,\n  type Order, type InsertOrder,\n  type Payment, type InsertPayment,\n  type Reconciliation, type InsertReconciliation,\n  type Upload, type InsertUpload\n} from \"@shared/schema\";\n\n// Embedded Database Configuration for Meesho Payment Reconciliation\n// This credential is embedded directly for easy future usage and development\nconst DATABASE_URL = process.env.DATABASE_URL || \"postgresql://postgres:$Harsh98@db.tepwrjnmaosalngjffvy.supabase.co:5432/postgres\";\n\nconst client = postgres(DATABASE_URL, { prepare: false });\nconst db = drizzle(client);\n\nexport interface IStorage {\n  // Users\n  getUserByFirebaseUid(firebaseUid: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, user: Partial<InsertUser>): Promise<User | undefined>;\n\n  // Products\n  getAllProducts(): Promise<Product[]>;\n  getProductBySku(sku: string): Promise<Product | undefined>;\n  createProduct(product: InsertProduct): Promise<Product>;\n  updateProduct(sku: string, product: Partial<InsertProduct>): Promise<Product | undefined>;\n  bulkCreateProducts(products: InsertProduct[]): Promise<Product[]>;\n\n  // Orders\n  getAllOrders(filters?: OrderFilters): Promise<Order[]>;\n  getOrderBySubOrderNo(subOrderNo: string): Promise<Order | undefined>;\n  createOrder(order: InsertOrder): Promise<Order>;\n  bulkCreateOrders(orders: InsertOrder[]): Promise<Order[]>;\n\n  // Payments\n  getAllPayments(): Promise<Payment[]>;\n  getPaymentsBySubOrderNo(subOrderNo: string): Promise<Payment[]>;\n  createPayment(payment: InsertPayment): Promise<Payment>;\n  bulkCreatePayments(payments: InsertPayment[]): Promise<Payment[]>;\n\n  // Reconciliations\n  getAllReconciliations(status?: string): Promise<Reconciliation[]>;\n  getReconciliationBySubOrderNo(subOrderNo: string): Promise<Reconciliation | undefined>;\n  createReconciliation(reconciliation: InsertReconciliation): Promise<Reconciliation>;\n  bulkCreateReconciliations(reconciliations: InsertReconciliation[]): Promise<Reconciliation[]>;\n  getReconciliationSummary(): Promise<ReconciliationSummary>;\n\n  // Uploads\n  getAllUploads(): Promise<Upload[]>;\n  createUpload(upload: InsertUpload): Promise<Upload>;\n  updateUploadStatus(id: string, status: string, recordsProcessed?: number, errors?: any): Promise<Upload | undefined>;\n\n  // Analytics\n  getDashboardSummary(): Promise<DashboardSummary>;\n  getRevenueTrend(): Promise<RevenueTrendData[]>;\n  getOrderStatusDistribution(): Promise<OrderStatusData[]>;\n}\n\nexport interface OrderFilters {\n  subOrderNo?: string;\n  status?: string;\n  paymentStatus?: string;\n  dateFrom?: Date;\n  dateTo?: Date;\n}\n\nexport interface ReconciliationSummary {\n  reconciled: number;\n  mismatch: number;\n  unreconciled: number;\n  successRate: number;\n}\n\nexport interface DashboardSummary {\n  totalRevenue: number;\n  netProfit: number;\n  totalOrders: number;\n  successRate: number;\n  revenueGrowth: number;\n  profitGrowth: number;\n  ordersGrowth: number;\n  successRateGrowth: number;\n}\n\nexport interface RevenueTrendData {\n  month: string;\n  revenue: number;\n  profit: number;\n}\n\nexport interface OrderStatusData {\n  name: string;\n  value: number;\n  color: string;\n}\n\nexport class DatabaseStorage implements IStorage {\n  async getUserByFirebaseUid(firebaseUid: string): Promise<User | undefined> {\n    const result = await db.select().from(users).where(eq(users.firebaseUid, firebaseUid)).limit(1);\n    return result[0];\n  }\n\n  async createUser(user: InsertUser): Promise<User> {\n    const result = await db.insert(users).values(user).returning();\n    return result[0];\n  }\n\n  async updateUser(id: string, user: Partial<InsertUser>): Promise<User | undefined> {\n    const result = await db.update(users).set(user).where(eq(users.id, id)).returning();\n    return result[0];\n  }\n\n  async getAllProducts(): Promise<Product[]> {\n    return db.select().from(products).orderBy(asc(products.sku));\n  }\n\n  async getProductBySku(sku: string): Promise<Product | undefined> {\n    const result = await db.select().from(products).where(eq(products.sku, sku)).limit(1);\n    return result[0];\n  }\n\n  async createProduct(product: InsertProduct): Promise<Product> {\n    const result = await db.insert(products).values(product).returning();\n    return result[0];\n  }\n\n  async updateProduct(sku: string, product: Partial<InsertProduct>): Promise<Product | undefined> {\n    const result = await db.update(products).set({\n      ...product,\n      updatedAt: new Date()\n    }).where(eq(products.sku, sku)).returning();\n    return result[0];\n  }\n\n  async bulkCreateProducts(productList: InsertProduct[]): Promise<Product[]> {\n    if (productList.length === 0) return [];\n    return db.insert(products).values(productList).returning();\n  }\n\n  async getAllOrders(filters: OrderFilters = {}): Promise<Order[]> {\n    let query = db.select().from(orders);\n    const conditions = [];\n\n    if (filters.subOrderNo) {\n      conditions.push(like(orders.subOrderNo, `%${filters.subOrderNo}%`));\n    }\n    if (filters.status) {\n      conditions.push(eq(orders.reasonForCredit, filters.status));\n    }\n    if (filters.dateFrom) {\n      conditions.push(gte(orders.orderDate, filters.dateFrom));\n    }\n    if (filters.dateTo) {\n      conditions.push(lte(orders.orderDate, filters.dateTo));\n    }\n\n    if (conditions.length > 0) {\n      query = query.where(and(...conditions)) as any;\n    }\n\n    return (query as any).orderBy(desc(orders.orderDate));\n  }\n\n  async getOrderBySubOrderNo(subOrderNo: string): Promise<Order | undefined> {\n    const result = await db.select().from(orders).where(eq(orders.subOrderNo, subOrderNo)).limit(1);\n    return result[0];\n  }\n\n  async createOrder(order: InsertOrder): Promise<Order> {\n    const result = await db.insert(orders).values(order).returning();\n    return result[0];\n  }\n\n  async bulkCreateOrders(orderList: InsertOrder[]): Promise<Order[]> {\n    if (orderList.length === 0) return [];\n    return db.insert(orders).values(orderList).returning();\n  }\n\n  async getAllPayments(): Promise<Payment[]> {\n    return db.select().from(payments).orderBy(desc(payments.createdAt));\n  }\n\n  async getPaymentsBySubOrderNo(subOrderNo: string): Promise<Payment[]> {\n    return db.select().from(payments).where(eq(payments.subOrderNo, subOrderNo));\n  }\n\n  async createPayment(payment: InsertPayment): Promise<Payment> {\n    const result = await db.insert(payments).values(payment).returning();\n    return result[0];\n  }\n\n  async bulkCreatePayments(paymentList: InsertPayment[]): Promise<Payment[]> {\n    if (paymentList.length === 0) return [];\n    return db.insert(payments).values(paymentList).returning();\n  }\n\n  async getAllReconciliations(status?: string): Promise<Reconciliation[]> {\n    let query = db.select().from(reconciliations);\n    if (status) {\n      query = query.where(eq(reconciliations.status, status)) as any;\n    }\n    return (query as any).orderBy(desc(reconciliations.createdAt));\n  }\n\n  async getReconciliationBySubOrderNo(subOrderNo: string): Promise<Reconciliation | undefined> {\n    const result = await db.select().from(reconciliations).where(eq(reconciliations.subOrderNo, subOrderNo)).limit(1);\n    return result[0];\n  }\n\n  async createReconciliation(reconciliation: InsertReconciliation): Promise<Reconciliation> {\n    const result = await db.insert(reconciliations).values(reconciliation).returning();\n    return result[0];\n  }\n\n  async bulkCreateReconciliations(reconciliationList: InsertReconciliation[]): Promise<Reconciliation[]> {\n    if (reconciliationList.length === 0) return [];\n    return db.insert(reconciliations).values(reconciliationList).returning();\n  }\n\n  async getReconciliationSummary(): Promise<ReconciliationSummary> {\n    const results = await db\n      .select({\n        status: reconciliations.status,\n        count: count(),\n      })\n      .from(reconciliations)\n      .groupBy(reconciliations.status);\n\n    const summary = {\n      reconciled: 0,\n      mismatch: 0,\n      unreconciled: 0,\n      successRate: 0\n    };\n\n    results.forEach(result => {\n      switch (result.status) {\n        case 'reconciled':\n          summary.reconciled = result.count;\n          break;\n        case 'mismatch':\n          summary.mismatch = result.count;\n          break;\n        case 'unreconciled':\n          summary.unreconciled = result.count;\n          break;\n      }\n    });\n\n    const total = summary.reconciled + summary.mismatch + summary.unreconciled;\n    summary.successRate = total > 0 ? (summary.reconciled / total) * 100 : 0;\n\n    return summary;\n  }\n\n  async getAllUploads(): Promise<Upload[]> {\n    return db.select().from(uploads).orderBy(desc(uploads.createdAt));\n  }\n\n  async createUpload(upload: InsertUpload): Promise<Upload> {\n    const result = await db.insert(uploads).values(upload).returning();\n    return result[0];\n  }\n\n  async updateUploadStatus(id: string, status: string, recordsProcessed?: number, errors?: any): Promise<Upload | undefined> {\n    const result = await db.update(uploads).set({\n      status,\n      recordsProcessed,\n      errors\n    }).where(eq(uploads.id, id)).returning();\n    return result[0];\n  }\n\n  async getDashboardSummary(): Promise<DashboardSummary> {\n    // Get order analytics\n    const [orderStats] = await db\n      .select({\n        totalOrders: count(orders.id),\n        totalRevenue: sum(orders.discountedPrice),\n        avgOrderValue: sql<number>`avg(${orders.discountedPrice})`,\n      })\n      .from(orders);\n\n    // Get payment analytics\n    const [paymentStats] = await db\n      .select({\n        totalSettlements: count(payments.id),\n        totalSettlementAmount: sum(payments.settlementAmount),\n        totalCommissionFees: sum(payments.commissionFee),\n        totalGatewayFees: sum(payments.paymentGatewayFee),\n      })\n      .from(payments);\n\n    // Calculate metrics\n    const totalOrders = orderStats?.totalOrders || 0;\n    const totalRevenue = Number(orderStats?.totalRevenue || 0);\n    const totalSettlements = paymentStats?.totalSettlements || 0;\n    const totalSettlementAmount = Number(paymentStats?.totalSettlementAmount || 0);\n    const totalFees = Number(paymentStats?.totalCommissionFees || 0) + Number(paymentStats?.totalGatewayFees || 0);\n    \n    // Calculate net profit (settlements - fees)\n    const netProfit = totalSettlementAmount - totalFees;\n    \n    // Calculate success rate (orders with settlements)\n    const successRate = totalOrders > 0 ? (totalSettlements / totalOrders) * 100 : 0;\n\n    // Calculate growth rates (compare with data from 30 days ago)\n    const thirtyDaysAgo = new Date();\n    thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\n\n    const [oldOrderStats] = await db\n      .select({\n        oldTotalOrders: count(orders.id),\n        oldTotalRevenue: sum(orders.discountedPrice),\n      })\n      .from(orders)\n      .where(lte(orders.orderDate, thirtyDaysAgo));\n\n    const oldTotalOrders = oldOrderStats?.oldTotalOrders || 0;\n    const oldTotalRevenue = Number(oldOrderStats?.oldTotalRevenue || 0);\n\n    const revenueGrowth = oldTotalRevenue > 0 ? ((totalRevenue - oldTotalRevenue) / oldTotalRevenue) * 100 : 0;\n    const ordersGrowth = oldTotalOrders > 0 ? ((totalOrders - oldTotalOrders) / oldTotalOrders) * 100 : 0;\n\n    return {\n      totalRevenue,\n      netProfit,\n      totalOrders,\n      successRate,\n      revenueGrowth,\n      profitGrowth: revenueGrowth * 0.7, // Estimate profit growth as 70% of revenue growth\n      ordersGrowth,\n      successRateGrowth: Math.max(-10, Math.min(10, ordersGrowth * 0.1)), // Conservative success rate growth\n    };\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":11840},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, decimal, integer, timestamp, boolean, json } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  firebaseUid: text(\"firebase_uid\").notNull().unique(),\n  email: text(\"email\").notNull(),\n  displayName: text(\"display_name\"),\n  photoURL: text(\"photo_url\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const products = pgTable(\"products\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  sku: text(\"sku\").notNull().unique(),\n  title: text(\"title\").notNull(),\n  costPrice: decimal(\"cost_price\", { precision: 10, scale: 2 }).default(\"0\"),\n  packagingCost: decimal(\"packaging_cost\", { precision: 10, scale: 2 }).default(\"0\"),\n  gstPercent: decimal(\"gst_percent\", { precision: 5, scale: 2 }).default(\"18\"),\n  totalOrders: integer(\"total_orders\").default(0),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\nexport const orders = pgTable(\"orders\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  subOrderNo: text(\"sub_order_no\").notNull().unique(),\n  orderDate: timestamp(\"order_date\").notNull(),\n  customerState: text(\"customer_state\"),\n  productName: text(\"product_name\").notNull(),\n  sku: text(\"sku\").notNull(),\n  size: text(\"size\"),\n  quantity: integer(\"quantity\").notNull(),\n  listedPrice: decimal(\"listed_price\", { precision: 10, scale: 2 }).notNull(),\n  discountedPrice: decimal(\"discounted_price\", { precision: 10, scale: 2 }).notNull(),\n  packetId: text(\"packet_id\"),\n  reasonForCredit: text(\"reason_for_credit\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const payments = pgTable(\"payments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  subOrderNo: text(\"sub_order_no\").notNull(),\n  settlementDate: timestamp(\"settlement_date\"),\n  settlementAmount: decimal(\"settlement_amount\", { precision: 10, scale: 2 }),\n  orderValue: decimal(\"order_value\", { precision: 10, scale: 2 }),\n  commissionFee: decimal(\"commission_fee\", { precision: 10, scale: 2 }),\n  fixedFee: decimal(\"fixed_fee\", { precision: 10, scale: 2 }),\n  paymentGatewayFee: decimal(\"payment_gateway_fee\", { precision: 10, scale: 2 }),\n  adsFee: decimal(\"ads_fee\", { precision: 10, scale: 2 }).default(\"0\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const reconciliations = pgTable(\"reconciliations\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  subOrderNo: text(\"sub_order_no\").notNull().unique(),\n  orderId: varchar(\"order_id\").references(() => orders.id),\n  paymentId: varchar(\"payment_id\").references(() => payments.id),\n  productId: varchar(\"product_id\").references(() => products.id),\n  status: text(\"status\").notNull(), // 'reconciled', 'mismatch', 'unreconciled'\n  orderValue: decimal(\"order_value\", { precision: 10, scale: 2 }),\n  settlementAmount: decimal(\"settlement_amount\", { precision: 10, scale: 2 }),\n  productCost: decimal(\"product_cost\", { precision: 10, scale: 2 }),\n  packagingCost: decimal(\"packaging_cost\", { precision: 10, scale: 2 }),\n  adsCost: decimal(\"ads_cost\", { precision: 10, scale: 2 }),\n  grossProfit: decimal(\"gross_profit\", { precision: 10, scale: 2 }),\n  netProfit: decimal(\"net_profit\", { precision: 10, scale: 2 }),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\nexport const uploads = pgTable(\"uploads\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  filename: text(\"filename\").notNull(),\n  originalName: text(\"original_name\").notNull(),\n  fileType: text(\"file_type\").notNull(), // 'payment_zip', 'orders_csv'\n  status: text(\"status\").notNull(), // 'processing', 'processed', 'failed'\n  recordsProcessed: integer(\"records_processed\").default(0),\n  errors: json(\"errors\"),\n  sourceMonth: text(\"source_month\"),\n  label: text(\"label\"),\n  uploadedBy: varchar(\"uploaded_by\").references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertProductSchema = createInsertSchema(products).omit({\n  id: true,\n  updatedAt: true,\n});\n\nexport const insertOrderSchema = createInsertSchema(orders).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertPaymentSchema = createInsertSchema(payments).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertReconciliationSchema = createInsertSchema(reconciliations).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertUploadSchema = createInsertSchema(uploads).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\n\nexport type Product = typeof products.$inferSelect;\nexport type InsertProduct = z.infer<typeof insertProductSchema>;\n\nexport type Order = typeof orders.$inferSelect;\nexport type InsertOrder = z.infer<typeof insertOrderSchema>;\n\nexport type Payment = typeof payments.$inferSelect;\nexport type InsertPayment = z.infer<typeof insertPaymentSchema>;\n\nexport type Reconciliation = typeof reconciliations.$inferSelect;\nexport type InsertReconciliation = z.infer<typeof insertReconciliationSchema>;\n\nexport type Upload = typeof uploads.$inferSelect;\nexport type InsertUpload = z.infer<typeof insertUploadSchema>;\n","size_bytes":5603},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { AuthProvider } from \"@/contexts/AuthContext\";\nimport ProtectedRoute from \"@/components/ProtectedRoute\";\nimport Dashboard from \"@/pages/Dashboard\";\nimport Upload from \"@/pages/Upload\";\nimport Orders from \"@/pages/Orders\";\nimport Products from \"@/pages/Products\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction AppLayout({ children }: { children: React.ReactNode }) {\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {children}\n    </div>\n  );\n}\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Dashboard} />\n      <Route path=\"/upload\" component={Upload} />\n      <Route path=\"/orders\" component={Orders} />\n      <Route path=\"/products\" component={Products} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <AuthProvider>\n          <ProtectedRoute>\n            <AppLayout>\n              <Router />\n            </AppLayout>\n          </ProtectedRoute>\n          <Toaster />\n        </AuthProvider>\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1417},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(210, 40%, 98%);\n  --foreground: hsl(210, 40%, 2%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(210, 40%, 2%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(210, 40%, 2%);\n  --primary: hsl(214, 100%, 59%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(210, 40%, 96%);\n  --secondary-foreground: hsl(210, 40%, 2%);\n  --muted: hsl(210, 40%, 96%);\n  --muted-foreground: hsl(210, 40%, 45%);\n  --accent: hsl(210, 40%, 96%);\n  --accent-foreground: hsl(210, 40%, 2%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(210, 40%, 88%);\n  --input: hsl(210, 40%, 88%);\n  --ring: hsl(214, 100%, 59%);\n  --chart-1: hsl(214, 100%, 59%);\n  --chart-2: hsl(159, 78%, 36%);\n  --chart-3: hsl(42, 93%, 56%);\n  --chart-4: hsl(147, 78%, 42%);\n  --chart-5: hsl(341, 75%, 51%);\n  --sidebar: hsl(0, 0%, 100%);\n  --sidebar-foreground: hsl(210, 40%, 2%);\n  --sidebar-primary: hsl(214, 100%, 59%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(210, 40%, 96%);\n  --sidebar-accent-foreground: hsl(210, 40%, 2%);\n  --sidebar-border: hsl(210, 40%, 88%);\n  --sidebar-ring: hsl(214, 100%, 59%);\n  --font-sans: Inter, \"Open Sans\", sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.5rem;\n  --shadow-2xs: 0px 1px 2px 0px hsl(214, 100%, 59%, 0.05);\n  --shadow-xs: 0px 1px 2px 0px hsl(214, 100%, 59%, 0.05);\n  --shadow-sm: 0px 1px 3px 0px hsl(214, 100%, 59%, 0.1), 0px 1px 2px -1px hsl(214, 100%, 59%, 0.1);\n  --shadow: 0px 1px 3px 0px hsl(214, 100%, 59%, 0.1), 0px 1px 2px -1px hsl(214, 100%, 59%, 0.1);\n  --shadow-md: 0px 4px 6px -1px hsl(214, 100%, 59%, 0.1), 0px 2px 4px -2px hsl(214, 100%, 59%, 0.1);\n  --shadow-lg: 0px 10px 15px -3px hsl(214, 100%, 59%, 0.1), 0px 4px 6px -4px hsl(214, 100%, 59%, 0.1);\n  --shadow-xl: 0px 20px 25px -5px hsl(214, 100%, 59%, 0.1), 0px 8px 10px -6px hsl(214, 100%, 59%, 0.1);\n  --shadow-2xl: 0px 25px 50px -12px hsl(214, 100%, 59%, 0.25);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(0, 0%, 0%);\n  --foreground: hsl(200, 7%, 91%);\n  --card: hsl(228, 10%, 10%);\n  --card-foreground: hsl(0, 0%, 85%);\n  --popover: hsl(0, 0%, 0%);\n  --popover-foreground: hsl(200, 7%, 91%);\n  --primary: hsl(214, 88%, 53%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(195, 15%, 95%);\n  --secondary-foreground: hsl(210, 40%, 8%);\n  --muted: hsl(0, 0%, 9%);\n  --muted-foreground: hsl(210, 3%, 46%);\n  --accent: hsl(206, 70%, 8%);\n  --accent-foreground: hsl(214, 88%, 53%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(210, 5%, 15%);\n  --input: hsl(208, 28%, 18%);\n  --ring: hsl(214, 100%, 59%);\n  --chart-1: hsl(214, 100%, 59%);\n  --chart-2: hsl(159, 78%, 36%);\n  --chart-3: hsl(42, 93%, 56%);\n  --chart-4: hsl(147, 78%, 42%);\n  --chart-5: hsl(341, 75%, 51%);\n  --sidebar: hsl(228, 10%, 10%);\n  --sidebar-foreground: hsl(0, 0%, 85%);\n  --sidebar-primary: hsl(214, 100%, 59%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(206, 70%, 8%);\n  --sidebar-accent-foreground: hsl(214, 88%, 53%);\n  --sidebar-border: hsl(206, 16%, 26%);\n  --sidebar-ring: hsl(214, 100%, 59%);\n  --font-sans: Inter, \"Open Sans\", sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.5rem;\n  --shadow-2xs: 0px 1px 2px 0px hsl(214, 100%, 59%, 0.05);\n  --shadow-xs: 0px 1px 2px 0px hsl(214, 100%, 59%, 0.05);\n  --shadow-sm: 0px 1px 3px 0px hsl(214, 100%, 59%, 0.1), 0px 1px 2px -1px hsl(214, 100%, 59%, 0.1);\n  --shadow: 0px 1px 3px 0px hsl(214, 100%, 59%, 0.1), 0px 1px 2px -1px hsl(214, 100%, 59%, 0.1);\n  --shadow-md: 0px 4px 6px -1px hsl(214, 100%, 59%, 0.1), 0px 2px 4px -2px hsl(214, 100%, 59%, 0.1);\n  --shadow-lg: 0px 10px 15px -3px hsl(214, 100%, 59%, 0.1), 0px 4px 6px -4px hsl(214, 100%, 59%, 0.1);\n  --shadow-xl: 0px 20px 25px -5px hsl(214, 100%, 59%, 0.1), 0px 8px 10px -6px hsl(214, 100%, 59%, 0.1);\n  --shadow-2xl: 0px 25px 50px -12px hsl(214, 100%, 59%, 0.25);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n\n  /* Custom scrollbar styles */\n  ::-webkit-scrollbar {\n    width: 8px;\n    height: 8px;\n  }\n\n  ::-webkit-scrollbar-track {\n    @apply bg-muted;\n  }\n\n  ::-webkit-scrollbar-thumb {\n    @apply bg-border rounded-md;\n  }\n\n  ::-webkit-scrollbar-thumb:hover {\n    @apply bg-muted-foreground;\n  }\n\n  /* Table styles */\n  table {\n    @apply w-full border-collapse;\n  }\n\n  th {\n    @apply text-left font-medium;\n  }\n\n  td {\n    @apply text-left;\n  }\n\n  /* Form styles */\n  input[type=\"number\"]::-webkit-outer-spin-button,\n  input[type=\"number\"]::-webkit-inner-spin-button {\n    -webkit-appearance: none;\n    margin: 0;\n  }\n\n  input[type=\"number\"] {\n    -moz-appearance: textfield;\n  }\n\n  /* Badge styles for status indicators */\n  .status-delivered {\n    @apply bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200;\n  }\n\n  .status-rto {\n    @apply bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200;\n  }\n\n  .status-cancelled {\n    @apply bg-gray-100 text-gray-800 dark:bg-gray-800 dark:text-gray-200;\n  }\n\n  .status-processing {\n    @apply bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200;\n  }\n\n  .status-reconciled {\n    @apply bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200;\n  }\n\n  /* Loading skeleton animation */\n  @keyframes skeleton {\n    0% {\n      opacity: 1;\n    }\n    50% {\n      opacity: 0.5;\n    }\n    100% {\n      opacity: 1;\n    }\n  }\n\n  .animate-skeleton {\n    animation: skeleton 2s ease-in-out infinite;\n  }\n}\n","size_bytes":5736},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/services/fileProcessor.ts":{"content":"import csv from 'csv-parser';\nimport * as xlsx from 'xlsx';\nimport { Readable } from 'stream';\nimport { storage } from '../storage';\nimport { type InsertOrder, type InsertPayment } from '@shared/schema';\n\nexport interface ProcessedFile {\n  orders?: InsertOrder[];\n  payments?: InsertPayment[];\n  errors: string[];\n}\n\nexport class FileProcessor {\n  static async processOrdersCSV(buffer: Buffer): Promise<ProcessedFile> {\n    const orders: InsertOrder[] = [];\n    const errors: string[] = [];\n\n    return new Promise((resolve) => {\n      const stream = Readable.from(buffer);\n      stream\n        .pipe(csv())\n        .on('data', (row: any) => {\n          try {\n            const order: InsertOrder = {\n              subOrderNo: row['Sub Order No']?.trim(),\n              orderDate: new Date(row['Order Date']?.trim()),\n              customerState: row['Customer State']?.trim(),\n              productName: row['Product Name']?.trim(),\n              sku: row['SKU']?.trim(),\n              size: row['Size']?.trim() || 'Free Size',\n              quantity: parseInt(row['Quantity']) || 1,\n              listedPrice: row['Supplier Listed Price (Incl. GST + Commission)']?.replace('₹', '') || '0',\n              discountedPrice: row['Supplier Discounted Price (Incl GST and Commision)']?.replace('₹', '') || '0',\n              packetId: row['Packet Id']?.trim(),\n              reasonForCredit: row['Reason for Credit Entry']?.trim(),\n            };\n\n            // Validation\n            if (!order.subOrderNo || !order.productName || !order.sku) {\n              errors.push(`Invalid order data at row: ${JSON.stringify(row)}`);\n              return;\n            }\n\n            orders.push(order);\n          } catch (error) {\n            errors.push(`Error processing row: ${error}`);\n          }\n        })\n        .on('end', () => {\n          resolve({ orders, errors });\n        })\n        .on('error', (error: any) => {\n          errors.push(`CSV parsing error: ${error}`);\n          resolve({ orders, errors });\n        });\n    });\n  }\n\n  static async processPaymentsXLSX(buffer: Buffer): Promise<ProcessedFile> {\n    const payments: InsertPayment[] = [];\n    const errors: string[] = [];\n\n    try {\n      const workbook = xlsx.read(buffer, { type: 'buffer' });\n      const sheetName = workbook.SheetNames[0];\n      const worksheet = workbook.Sheets[sheetName];\n      const jsonData = xlsx.utils.sheet_to_json(worksheet);\n\n      jsonData.forEach((row: any, index: number) => {\n        try {\n          const payment: InsertPayment = {\n            subOrderNo: row['Sub Order No'] || row['Order ID'] || row['sub_order_no'],\n            settlementDate: row['Settlement Date'] ? new Date(row['Settlement Date']) : null,\n            settlementAmount: row['Settlement Amount'] || row['Net Amount'] || '0',\n            orderValue: row['Order Value'] || row['GMV'] || '0',\n            commissionFee: row['Commission Fee'] || row['Commission'] || '0',\n            fixedFee: row['Fixed Fee'] || row['Collection Fee'] || '0',\n            paymentGatewayFee: row['Payment Gateway Fee'] || row['PG Fee'] || '0',\n            adsFee: row['Ads Fee'] || row['Marketing Fee'] || '0',\n          };\n\n          // Validation\n          if (!payment.subOrderNo) {\n            errors.push(`Missing sub order number at row ${index + 1}`);\n            return;\n          }\n\n          payments.push(payment);\n        } catch (error) {\n          errors.push(`Error processing payment row ${index + 1}: ${error}`);\n        }\n      });\n    } catch (error) {\n      errors.push(`XLSX parsing error: ${error}`);\n    }\n\n    return { payments, errors };\n  }\n\n  static async extractProductsFromOrders(orders: InsertOrder[]): Promise<void> {\n    const uniqueProducts = new Map<string, any>();\n\n    orders.forEach(order => {\n      if (!uniqueProducts.has(order.sku)) {\n        uniqueProducts.set(order.sku, {\n          sku: order.sku,\n          title: order.productName,\n          costPrice: '0',\n          packagingCost: '15',\n          gstPercent: '18',\n          totalOrders: 0,\n        });\n      }\n      uniqueProducts.get(order.sku)!.totalOrders += 1;\n    });\n\n    // Bulk create products that don't exist\n    const productList = Array.from(uniqueProducts.values());\n    const existingProducts = await storage.getAllProducts();\n    const existingSkus = new Set(existingProducts.map(p => p.sku));\n\n    const newProducts = productList.filter(p => !existingSkus.has(p.sku));\n    if (newProducts.length > 0) {\n      await storage.bulkCreateProducts(newProducts);\n    }\n\n    // Update order counts for existing products\n    for (const product of productList) {\n      if (existingSkus.has(product.sku)) {\n        const existing = existingProducts.find(p => p.sku === product.sku);\n        if (existing) {\n          await storage.updateProduct(product.sku, {\n            totalOrders: (Number(existing.totalOrders) || 0) + product.totalOrders\n          });\n        }\n      }\n    }\n  }\n}\n","size_bytes":4946},"server/services/firebase.ts":{"content":"import { initializeApp, cert, getApps } from 'firebase-admin/app';\nimport { getAuth } from 'firebase-admin/auth';\n\n// Embedded Firebase Admin Configuration for Meesho Payment Reconciliation\n// This credential is embedded directly for easy future usage and development  \nconst firebaseConfig = {\n  projectId: \"reconme-fbee1\",\n};\n\nif (getApps().length === 0) {\n  initializeApp(firebaseConfig);\n}\n\nexport const auth = getAuth();\n\nexport async function verifyFirebaseToken(idToken: string) {\n  try {\n    const decodedToken = await auth.verifyIdToken(idToken);\n    return {\n      uid: decodedToken.uid,\n      email: decodedToken.email,\n      name: decodedToken.name,\n      picture: decodedToken.picture,\n    };\n  } catch (error) {\n    console.error('Firebase token verification failed:', error);\n    throw new Error('Invalid Firebase token');\n  }\n}\n","size_bytes":844},"server/services/reconciliation.ts":{"content":"import { storage } from '../storage';\nimport { type InsertReconciliation } from '@shared/schema';\n\nexport class ReconciliationEngine {\n  static async runReconciliation(): Promise<{\n    processed: number;\n    reconciled: number;\n    mismatched: number;\n    unreconciled: number;\n  }> {\n    const orders = await storage.getAllOrders();\n    const payments = await storage.getAllPayments();\n    const products = await storage.getAllProducts();\n\n    // Create maps for quick lookup\n    const paymentMap = new Map();\n    payments.forEach(payment => {\n      if (!paymentMap.has(payment.subOrderNo)) {\n        paymentMap.set(payment.subOrderNo, []);\n      }\n      paymentMap.get(payment.subOrderNo).push(payment);\n    });\n\n    const productMap = new Map();\n    products.forEach(product => {\n      productMap.set(product.sku, product);\n    });\n\n    const reconciliations: InsertReconciliation[] = [];\n    let reconciledCount = 0;\n    let mismatchedCount = 0;\n    let unreconciledCount = 0;\n\n    for (const order of orders) {\n      const orderPayments = paymentMap.get(order.subOrderNo) || [];\n      const product = productMap.get(order.sku);\n\n      if (!product) {\n        console.warn(`Product not found for SKU: ${order.sku}`);\n        continue;\n      }\n\n      const orderValue = Number(order.discountedPrice) || 0;\n      const productCost = Number(product.costPrice) || 0;\n      const packagingCost = Number(product.packagingCost) || 0;\n\n      let status: string;\n      let settlementAmount = 0;\n      let adsCost = 0;\n\n      if (orderPayments.length > 0) {\n        const payment = orderPayments[0]; // Take first payment\n        settlementAmount = Number(payment.settlementAmount) || 0;\n        adsCost = Number(payment.adsFee) || 0;\n\n        // Determine status based on settlement\n        if (settlementAmount > 0) {\n          // Check for discrepancies (simple tolerance check)\n          const expectedSettlement = orderValue * 0.87; // Rough estimate after fees\n          const tolerance = 5.0; // ₹5 tolerance\n          \n          if (Math.abs(settlementAmount - expectedSettlement) <= tolerance) {\n            status = 'reconciled';\n            reconciledCount++;\n          } else {\n            status = 'mismatch';\n            mismatchedCount++;\n          }\n        } else {\n          status = 'unreconciled';\n          unreconciledCount++;\n        }\n      } else {\n        // No payment found\n        status = 'unreconciled';\n        unreconciledCount++;\n      }\n\n      const totalCost = productCost + packagingCost;\n      const grossProfit = settlementAmount - totalCost;\n      const netProfit = grossProfit - adsCost;\n\n      const reconciliation: InsertReconciliation = {\n        subOrderNo: order.subOrderNo,\n        orderId: order.id,\n        paymentId: orderPayments[0]?.id || null,\n        productId: product.id,\n        status,\n        orderValue: orderValue.toString(),\n        settlementAmount: settlementAmount.toString(),\n        productCost: productCost.toString(),\n        packagingCost: packagingCost.toString(),\n        adsCost: adsCost.toString(),\n        grossProfit: grossProfit.toString(),\n        netProfit: netProfit.toString(),\n      };\n\n      reconciliations.push(reconciliation);\n    }\n\n    // Clear existing reconciliations and create new ones\n    if (reconciliations.length > 0) {\n      await storage.bulkCreateReconciliations(reconciliations);\n    }\n\n    return {\n      processed: reconciliations.length,\n      reconciled: reconciledCount,\n      mismatched: mismatchedCount,\n      unreconciled: unreconciledCount,\n    };\n  }\n\n  static async calculateProfitLoss(subOrderNo: string): Promise<{\n    grossProfit: number;\n    netProfit: number;\n    profitMargin: number;\n  }> {\n    const reconciliation = await storage.getReconciliationBySubOrderNo(subOrderNo);\n    \n    if (!reconciliation) {\n      return { grossProfit: 0, netProfit: 0, profitMargin: 0 };\n    }\n\n    const grossProfit = Number(reconciliation.grossProfit) || 0;\n    const netProfit = Number(reconciliation.netProfit) || 0;\n    const orderValue = Number(reconciliation.orderValue) || 0;\n    const profitMargin = orderValue > 0 ? (netProfit / orderValue) * 100 : 0;\n\n    return {\n      grossProfit,\n      netProfit,\n      profitMargin,\n    };\n  }\n}\n","size_bytes":4242},"client/src/components/Header.tsx":{"content":"import { Link, useLocation } from 'wouter';\nimport { Button } from '@/components/ui/button';\nimport { MoreHorizontal, LayoutDashboard, Upload, FileText, Package, LogOut } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { logOut } from '@/lib/firebase';\n\nconst navigation = [\n  { name: 'Dashboard', href: '/', icon: LayoutDashboard },\n  { name: 'Orders', href: '/orders', icon: FileText },\n  { name: 'Products', href: '/products', icon: Package },\n  { name: 'Upload Files', href: '/upload', icon: Upload },\n];\n\ninterface HeaderProps {\n  title: string;\n  subtitle: string;\n}\n\nexport default function Header({ title, subtitle }: HeaderProps) {\n  const [location] = useLocation();\n  const { toast } = useToast();\n  const { user } = useAuth();\n\n\n  const handleLogout = async () => {\n    try {\n      await logOut();\n      toast({\n        title: \"Signed out successfully\",\n        description: \"You have been logged out of your account.\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Error signing out\",\n        description: \"There was a problem signing out. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const getInitials = (name?: string, email?: string) => {\n    if (name) {\n      return name.split(' ').map(n => n[0]).join('').toUpperCase();\n    }\n    if (email) {\n      return email.slice(0, 2).toUpperCase();\n    }\n    return 'U';\n  };\n\n  return (\n    <>\n      {/* Top Navigation Header */}\n      <nav className=\"bg-card border-b border-border px-6 py-3\" data-testid=\"top-nav\">\n        <div className=\"flex items-center justify-between\">\n          {/* Logo and Navigation */}\n          <div className=\"flex items-center gap-8\">\n            <div className=\"flex items-center gap-3\">\n              <div className=\"w-8 h-8 bg-primary rounded-md flex items-center justify-center\">\n                <span className=\"text-primary-foreground font-bold text-sm\">RM</span>\n              </div>\n              <h1 className=\"font-bold text-lg\">ReconMe</h1>\n            </div>\n            \n            {/* Navigation Links */}\n            <div className=\"flex items-center gap-6\">\n              {navigation.map((item) => {\n                const isActive = location === item.href || (item.href !== '/' && location.startsWith(item.href));\n                return (\n                  <Link key={item.name} href={item.href}>\n                    <div \n                      className={`flex items-center gap-2 px-3 py-2 rounded-md transition-colors text-sm font-medium cursor-pointer ${\n                        isActive \n                          ? 'bg-primary text-primary-foreground' \n                          : 'hover:bg-accent text-foreground'\n                      }`}\n                      data-testid={`nav-${item.name.toLowerCase().replace(' ', '-')}`}\n                    >\n                      <item.icon className=\"w-4 h-4\" />\n                      {item.name}\n                    </div>\n                  </Link>\n                );\n              })}\n            </div>\n          </div>\n\n          {/* User Profile */}\n          <div className=\"flex items-center\">\n            <button \n              onClick={handleLogout}\n              className=\"text-sm text-muted-foreground hover:text-foreground transition-colors flex items-center gap-3 px-3 py-2 rounded-md hover:bg-accent\"\n              data-testid=\"button-logout\"\n            >\n              <div className=\"w-8 h-8 bg-secondary rounded-full flex items-center justify-center\">\n                <span className=\"text-sm font-medium\" data-testid=\"user-initials\">\n                  {getInitials(user?.displayName, user?.email)}\n                </span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <span className=\"text-sm font-medium\" data-testid=\"user-name\">\n                  {user?.displayName || user?.email?.split('@')[0] || 'User'}\n                </span>\n                <LogOut className=\"w-4 h-4\" />\n              </div>\n            </button>\n          </div>\n        </div>\n      </nav>\n\n      {/* Page Header */}\n      <header className=\"bg-card border-b border-border px-6 py-4\" data-testid=\"header\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-2xl font-bold\" data-testid=\"page-title\">{title}</h1>\n            <p className=\"text-muted-foreground\" data-testid=\"page-subtitle\">{subtitle}</p>\n          </div>\n          <div className=\"flex items-center gap-4\">\n            <Button variant=\"ghost\" size=\"icon\" data-testid=\"button-menu\">\n              <MoreHorizontal className=\"w-5 h-5\" />\n            </Button>\n          </div>\n        </div>\n      </header>\n    </>\n  );\n}\n","size_bytes":4766},"client/src/components/ProtectedRoute.tsx":{"content":"import { useAuth } from '@/contexts/AuthContext';\nimport Login from '@/pages/Login';\n\ninterface ProtectedRouteProps {\n  children: React.ReactNode;\n}\n\nexport default function ProtectedRoute({ children }: ProtectedRouteProps) {\n  const { user, loading } = useAuth();\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  if (!user) {\n    return <Login />;\n  }\n\n  return <>{children}</>;\n}\n","size_bytes":555},"client/src/components/Sidebar.tsx":{"content":"import { Link, useLocation } from 'wouter';\nimport { \n  LayoutDashboard, \n  Upload, \n  FileText, \n  Package, \n  Calculator,\n  LogOut\n} from 'lucide-react';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { logOut } from '@/lib/firebase';\nimport { useToast } from '@/hooks/use-toast';\n\nconst navigation = [\n  { name: 'Dashboard', href: '/', icon: LayoutDashboard },\n  { name: 'Upload Files', href: '/upload', icon: Upload },\n  { name: 'Orders', href: '/orders', icon: FileText },\n  { name: 'Products', href: '/products', icon: Package },\n  { name: 'Reconciliation', href: '/reconciliation', icon: Calculator },\n];\n\nexport default function Sidebar() {\n  const [location] = useLocation();\n  const { user } = useAuth();\n  const { toast } = useToast();\n\n  const handleLogout = async () => {\n    try {\n      await logOut();\n      toast({\n        title: \"Signed out successfully\",\n        description: \"You have been logged out of your account.\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Error signing out\",\n        description: \"There was a problem signing out. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const getInitials = (name?: string, email?: string) => {\n    if (name) {\n      return name.split(' ').map(n => n[0]).join('').toUpperCase();\n    }\n    if (email) {\n      return email.slice(0, 2).toUpperCase();\n    }\n    return 'U';\n  };\n\n  return (\n    <div className=\"w-64 bg-card border-r border-border flex flex-col h-full\" data-testid=\"sidebar\">\n      {/* Logo */}\n      <div className=\"p-6 border-b border-border\">\n        <div className=\"flex items-center gap-3\">\n          <div className=\"w-8 h-8 bg-primary rounded-md flex items-center justify-center\">\n            <span className=\"text-primary-foreground font-bold text-sm\">RM</span>\n          </div>\n          <h1 className=\"font-bold text-lg\">ReconMe</h1>\n        </div>\n      </div>\n      \n      {/* Navigation */}\n      <nav className=\"flex-1 p-4\">\n        <ul className=\"space-y-2\">\n          {navigation.map((item) => {\n            const isActive = location === item.href || (item.href !== '/' && location.startsWith(item.href));\n            return (\n              <li key={item.name}>\n                <Link href={item.href}>\n                  <div \n                    className={`flex items-center gap-3 px-3 py-2 rounded-md transition-colors text-sm font-medium cursor-pointer ${\n                      isActive \n                        ? 'bg-primary text-primary-foreground' \n                        : 'hover:bg-accent text-foreground'\n                    }`}\n                    data-testid={`nav-${item.name.toLowerCase().replace(' ', '-')}`}\n                  >\n                    <item.icon className=\"w-5 h-5\" />\n                    {item.name}\n                  </div>\n                </Link>\n              </li>\n            );\n          })}\n        </ul>\n      </nav>\n      \n      {/* User Profile */}\n      <div className=\"p-4 border-t border-border\">\n        <div className=\"flex items-center gap-3 mb-3\">\n          <div className=\"w-8 h-8 bg-secondary rounded-full flex items-center justify-center\">\n            <span className=\"text-sm font-medium\" data-testid=\"user-initials\">\n              {getInitials(user?.displayName, user?.email)}\n            </span>\n          </div>\n          <div className=\"flex-1 min-w-0\">\n            <p className=\"text-sm font-medium truncate\" data-testid=\"user-name\">\n              {user?.displayName || user?.email?.split('@')[0] || 'User'}\n            </p>\n            <p className=\"text-xs text-muted-foreground truncate\" data-testid=\"user-email\">\n              {user?.email}\n            </p>\n          </div>\n        </div>\n        <button \n          onClick={handleLogout}\n          className=\"w-full text-left text-sm text-muted-foreground hover:text-foreground transition-colors flex items-center gap-2\"\n          data-testid=\"button-logout\"\n        >\n          <LogOut className=\"w-4 h-4\" />\n          Sign out\n        </button>\n      </div>\n    </div>\n  );\n}\n","size_bytes":4041},"client/src/contexts/AuthContext.tsx":{"content":"import React, { createContext, useContext, useEffect, useState } from 'react';\nimport { onAuthStateChanged, User as FirebaseUser } from 'firebase/auth';\nimport { auth } from '@/lib/firebase';\nimport { apiRequest } from '@/lib/queryClient';\n\ninterface User {\n  id: string;\n  firebaseUid: string;\n  email: string;\n  displayName?: string;\n  photoURL?: string;\n}\n\ninterface AuthContextType {\n  user: User | null;\n  firebaseUser: FirebaseUser | null;\n  loading: boolean;\n  token: string | null;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport function AuthProvider({ children }: { children: React.ReactNode }) {\n  const [user, setUser] = useState<User | null>(null);\n  const [firebaseUser, setFirebaseUser] = useState<FirebaseUser | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [token, setToken] = useState<string | null>(null);\n\n  useEffect(() => {\n    const unsubscribe = onAuthStateChanged(auth, async (firebaseUser) => {\n      if (firebaseUser) {\n        try {\n          const idToken = await firebaseUser.getIdToken();\n          setToken(idToken);\n          \n          // Verify token with backend and get/create user\n          const response = await apiRequest('POST', '/api/auth/verify', { idToken });\n          const data = await response.json();\n          \n          setUser(data.user);\n          setFirebaseUser(firebaseUser);\n        } catch (error) {\n          console.error('Auth verification failed:', error);\n          setUser(null);\n          setFirebaseUser(null);\n          setToken(null);\n        }\n      } else {\n        setUser(null);\n        setFirebaseUser(null);\n        setToken(null);\n      }\n      setLoading(false);\n    });\n\n    return () => unsubscribe();\n  }, []);\n\n  return (\n    <AuthContext.Provider value={{ user, firebaseUser, loading, token }}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n}\n","size_bytes":2085},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/firebase.ts":{"content":"import { initializeApp, getApps } from \"firebase/app\";\nimport { getAuth, signInWithRedirect, GoogleAuthProvider, getRedirectResult, signInWithEmailAndPassword, createUserWithEmailAndPassword, signOut } from \"firebase/auth\";\n\n// Embedded Firebase Configuration for Meesho Payment Reconciliation\n// These credentials are embedded directly for easy future usage and development\nconst firebaseConfig = {\n  apiKey: \"AIzaSyCLtVv-8X3mBfKeCkS_Q0nqk-7DoPfDo4c\",\n  authDomain: \"reconme-fbee1.firebaseapp.com\",\n  databaseURL: \"https://reconme-fbee1-default-rtdb.firebaseio.com\",\n  projectId: \"reconme-fbee1\",\n  storageBucket: \"reconme-fbee1.firebasestorage.app\",\n  messagingSenderId: \"511599323860\",\n  appId: \"1:511599323860:web:38ac9cf5e061ff350e2941\",\n};\n\n// Initialize Firebase only if no apps exist\nconst app = getApps().length === 0 ? initializeApp(firebaseConfig) : getApps()[0];\nexport const auth = getAuth(app);\n\n// Google Auth Provider\nconst googleProvider = new GoogleAuthProvider();\n\nexport const signInWithGoogle = () => {\n  return signInWithRedirect(auth, googleProvider);\n};\n\nexport const handleRedirectResult = () => {\n  return getRedirectResult(auth);\n};\n\nexport const signInWithEmail = (email: string, password: string) => {\n  return signInWithEmailAndPassword(auth, email, password);\n};\n\nexport const signUpWithEmail = (email: string, password: string) => {\n  return createUserWithEmailAndPassword(auth, email, password);\n};\n\nexport const logOut = () => {\n  return signOut(auth);\n};\n\nexport { auth as default };\n","size_bytes":1519},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n  token?: string | null,\n): Promise<Response> {\n  const headers: Record<string, string> = {};\n  \n  if (data) {\n    headers[\"Content-Type\"] = \"application/json\";\n  }\n  \n  if (token) {\n    headers[\"Authorization\"] = `Bearer ${token}`;\n  }\n\n  const res = await fetch(url, {\n    method,\n    headers,\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n  token?: string | null;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior, token }) =>\n  async ({ queryKey }) => {\n    const headers: Record<string, string> = {};\n    \n    if (token) {\n      headers[\"Authorization\"] = `Bearer ${token}`;\n    }\n\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      headers,\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1722},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/Dashboard.tsx":{"content":"import { useAuthQuery } from '@/hooks/use-auth-query';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport Header from '@/components/Header';\nimport RevenueChart from '@/components/charts/RevenueChart';\nimport OrderStatusChart from '@/components/charts/OrderStatusChart';\nimport { \n  DollarSign, \n  TrendingUp, \n  ShoppingBag, \n  CheckCircle,\n  Clock,\n  FileText,\n  Package\n} from 'lucide-react';\n\nexport default function Dashboard() {\n  const { data: summary, isLoading } = useAuthQuery<{\n    totalRevenue: number;\n    netProfit: number;\n    totalOrders: number;\n    successRate: number;\n    revenueGrowth: number;\n    profitGrowth: number;\n    ordersGrowth: number;\n    successRateGrowth: number;\n  }>({\n    queryKey: ['/api/dashboard/summary'],\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex flex-col\">\n        <Header title=\"Dashboard\" subtitle=\"Overview of your payment and order analytics\" />\n        <div className=\"flex-1 p-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n            {[...Array(4)].map((_, i) => (\n              <Card key={i} className=\"animate-pulse\">\n                <CardContent className=\"p-6\">\n                  <div className=\"h-4 bg-muted rounded mb-2\"></div>\n                  <div className=\"h-8 bg-muted rounded mb-2\"></div>\n                  <div className=\"h-3 bg-muted rounded w-3/4\"></div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  const summaryData = summary || {\n    totalRevenue: 0,\n    netProfit: 0,\n    totalOrders: 0,\n    successRate: 0,\n    revenueGrowth: 0,\n    profitGrowth: 0,\n    ordersGrowth: 0,\n    successRateGrowth: 0,\n  };\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-IN', {\n      style: 'currency',\n      currency: 'INR',\n      maximumFractionDigits: 0,\n    }).format(amount);\n  };\n\n  const formatGrowth = (growth: number) => {\n    return growth > 0 ? `+${growth.toFixed(1)}%` : `${growth.toFixed(1)}%`;\n  };\n\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <Header title=\"Dashboard\" subtitle=\"Overview of your payment and order analytics\" />\n      \n      <div className=\"flex-1 p-6\">\n        {/* Summary Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n          <Card className=\"shadow-sm\" data-testid=\"card-revenue\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-muted-foreground text-sm\">Total Revenue</p>\n                  <p className=\"text-2xl font-bold text-foreground\" data-testid=\"text-total-revenue\">\n                    {formatCurrency(summaryData.totalRevenue)}\n                  </p>\n                </div>\n                <div className=\"w-10 h-10 bg-green-100 rounded-full flex items-center justify-center\">\n                  <DollarSign className=\"w-5 h-5 text-green-600\" />\n                </div>\n              </div>\n              <div className=\"flex items-center mt-2\">\n                <span className={`text-sm ${summaryData.revenueGrowth >= 0 ? 'text-green-600' : 'text-red-600'}`}>\n                  {formatGrowth(summaryData.revenueGrowth)}\n                </span>\n                <span className=\"text-muted-foreground text-sm ml-1\">from last month</span>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"shadow-sm\" data-testid=\"card-profit\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-muted-foreground text-sm\">Net Profit</p>\n                  <p className=\"text-2xl font-bold text-foreground\" data-testid=\"text-net-profit\">\n                    {formatCurrency(summaryData.netProfit)}\n                  </p>\n                </div>\n                <div className=\"w-10 h-10 bg-blue-100 rounded-full flex items-center justify-center\">\n                  <TrendingUp className=\"w-5 h-5 text-blue-600\" />\n                </div>\n              </div>\n              <div className=\"flex items-center mt-2\">\n                <span className={`text-sm ${summaryData.profitGrowth >= 0 ? 'text-green-600' : 'text-red-600'}`}>\n                  {formatGrowth(summaryData.profitGrowth)}\n                </span>\n                <span className=\"text-muted-foreground text-sm ml-1\">from last month</span>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"shadow-sm\" data-testid=\"card-orders\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-muted-foreground text-sm\">Total Orders</p>\n                  <p className=\"text-2xl font-bold text-foreground\" data-testid=\"text-total-orders\">\n                    {summaryData.totalOrders.toLocaleString()}\n                  </p>\n                </div>\n                <div className=\"w-10 h-10 bg-purple-100 rounded-full flex items-center justify-center\">\n                  <ShoppingBag className=\"w-5 h-5 text-purple-600\" />\n                </div>\n              </div>\n              <div className=\"flex items-center mt-2\">\n                <span className={`text-sm ${summaryData.ordersGrowth >= 0 ? 'text-green-600' : 'text-red-600'}`}>\n                  {formatGrowth(summaryData.ordersGrowth)}\n                </span>\n                <span className=\"text-muted-foreground text-sm ml-1\">from last month</span>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"shadow-sm\" data-testid=\"card-success-rate\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-muted-foreground text-sm\">Success Rate</p>\n                  <p className=\"text-2xl font-bold text-foreground\" data-testid=\"text-success-rate\">\n                    {summaryData.successRate.toFixed(1)}%\n                  </p>\n                </div>\n                <div className=\"w-10 h-10 bg-orange-100 rounded-full flex items-center justify-center\">\n                  <CheckCircle className=\"w-5 h-5 text-orange-600\" />\n                </div>\n              </div>\n              <div className=\"flex items-center mt-2\">\n                <span className={`text-sm ${summaryData.successRateGrowth >= 0 ? 'text-green-600' : 'text-red-600'}`}>\n                  {formatGrowth(summaryData.successRateGrowth)}\n                </span>\n                <span className=\"text-muted-foreground text-sm ml-1\">from last month</span>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Charts Section */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8\">\n          <Card className=\"shadow-sm\">\n            <CardContent className=\"p-6\">\n              <h3 className=\"text-lg font-semibold mb-4\">Revenue Trend</h3>\n              <RevenueChart />\n            </CardContent>\n          </Card>\n\n          <Card className=\"shadow-sm\">\n            <CardContent className=\"p-6\">\n              <h3 className=\"text-lg font-semibold mb-4\">Order Status Distribution</h3>\n              <OrderStatusChart />\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Recent Activity */}\n        <Card className=\"shadow-sm\" data-testid=\"card-recent-activity\">\n          <CardContent className=\"p-6\">\n            <h3 className=\"text-lg font-semibold mb-4\">Recent Activity</h3>\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between py-3 border-b border-border last:border-0\">\n                <div className=\"flex items-center gap-3\">\n                  <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n                  <div>\n                    <p className=\"font-medium\">August payments processed</p>\n                    <p className=\"text-sm text-muted-foreground\">151 orders reconciled successfully</p>\n                  </div>\n                </div>\n                <span className=\"text-sm text-muted-foreground\">2 hours ago</span>\n              </div>\n              <div className=\"flex items-center justify-between py-3 border-b border-border last:border-0\">\n                <div className=\"flex items-center gap-3\">\n                  <div className=\"w-2 h-2 bg-blue-500 rounded-full\"></div>\n                  <div>\n                    <p className=\"font-medium\">Product costs updated</p>\n                    <p className=\"text-sm text-muted-foreground\">45 SKU cost prices modified</p>\n                  </div>\n                </div>\n                <span className=\"text-sm text-muted-foreground\">5 hours ago</span>\n              </div>\n              <div className=\"flex items-center justify-between py-3 border-b border-border last:border-0\">\n                <div className=\"flex items-center gap-3\">\n                  <div className=\"w-2 h-2 bg-yellow-500 rounded-full\"></div>\n                  <div>\n                    <p className=\"font-medium\">Payment file uploaded</p>\n                    <p className=\"text-sm text-muted-foreground\">meesho_PREVIOUS_PAYMENT_aug.xlsx</p>\n                  </div>\n                </div>\n                <span className=\"text-sm text-muted-foreground\">1 day ago</span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":9633},"client/src/pages/Login.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\nimport { signInWithEmail, signInWithGoogle, handleRedirectResult } from '@/lib/firebase';\nimport { useToast } from '@/hooks/use-toast';\n\nconst loginSchema = z.object({\n  email: z.string().email('Please enter a valid email address'),\n  password: z.string().min(6, 'Password must be at least 6 characters'),\n});\n\ntype LoginForm = z.infer<typeof loginSchema>;\n\nexport default function Login() {\n  const [isLoading, setIsLoading] = useState(false);\n  const { toast } = useToast();\n\n  const form = useForm<LoginForm>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      email: '',\n      password: '',\n    },\n  });\n\n  // Handle redirect result on component mount\n  useEffect(() => {\n    handleRedirectResult()\n      .then((result) => {\n        if (result?.user) {\n          toast({\n            title: \"Welcome back!\",\n            description: \"You have been signed in successfully.\",\n          });\n        }\n      })\n      .catch((error) => {\n        toast({\n          title: \"Sign in failed\",\n          description: error.message,\n          variant: \"destructive\",\n        });\n      });\n  }, [toast]);\n\n  const onSubmit = async (data: LoginForm) => {\n    setIsLoading(true);\n    try {\n      await signInWithEmail(data.email, data.password);\n      toast({\n        title: \"Welcome back!\",\n        description: \"You have been signed in successfully.\",\n      });\n    } catch (error: any) {\n      toast({\n        title: \"Sign in failed\",\n        description: error.message || \"Please check your credentials and try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleGoogleSignIn = async () => {\n    try {\n      await signInWithGoogle();\n      // Redirect will be handled by useEffect above\n    } catch (error: any) {\n      toast({\n        title: \"Sign in failed\", \n        description: error.message || \"Google sign in failed. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-primary/10 to-accent/20 flex items-center justify-center p-4\">\n      <div className=\"w-full max-w-md\">\n        <div className=\"text-center mb-8\">\n          <h1 className=\"text-3xl font-bold text-primary mb-2\">ReconMe</h1>\n          <p className=\"text-muted-foreground\">Payment Reconciliation Platform</p>\n        </div>\n        \n        <Card className=\"shadow-lg\">\n          <CardContent className=\"p-8\">\n            <h2 className=\"text-2xl font-semibold text-center mb-6\">Welcome Back</h2>\n            \n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"email\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Email</FormLabel>\n                      <FormControl>\n                        <Input \n                          type=\"email\" \n                          placeholder=\"Enter your email\" \n                          {...field}\n                          data-testid=\"input-email\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={form.control}\n                  name=\"password\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Password</FormLabel>\n                      <FormControl>\n                        <Input \n                          type=\"password\" \n                          placeholder=\"Enter your password\" \n                          {...field}\n                          data-testid=\"input-password\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <Button \n                  type=\"submit\" \n                  className=\"w-full\" \n                  disabled={isLoading}\n                  data-testid=\"button-signin\"\n                >\n                  {isLoading ? 'Signing in...' : 'Sign In'}\n                </Button>\n              </form>\n            </Form>\n            \n            <div className=\"mt-6\">\n              <div className=\"relative\">\n                <div className=\"absolute inset-0 flex items-center\">\n                  <div className=\"w-full border-t border-border\"></div>\n                </div>\n                <div className=\"relative flex justify-center text-sm\">\n                  <span className=\"px-2 bg-card text-muted-foreground\">Or continue with</span>\n                </div>\n              </div>\n              \n              <Button \n                variant=\"outline\" \n                className=\"w-full mt-4\" \n                onClick={handleGoogleSignIn}\n                data-testid=\"button-google-signin\"\n              >\n                <svg className=\"w-5 h-5 mr-2\" viewBox=\"0 0 24 24\">\n                  <path fill=\"currentColor\" d=\"M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z\"/>\n                  <path fill=\"currentColor\" d=\"M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z\"/>\n                  <path fill=\"currentColor\" d=\"M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z\"/>\n                  <path fill=\"currentColor\" d=\"M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z\"/>\n                </svg>\n                Sign in with Google\n              </Button>\n            </div>\n            \n            <p className=\"text-center text-sm text-muted-foreground mt-6\">\n              Don't have an account? <a href=\"#\" className=\"text-primary hover:underline\">Sign up</a>\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":6615},"client/src/pages/Orders.tsx":{"content":"import { useState } from 'react';\nimport { useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Badge } from '@/components/ui/badge';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport Header from '@/components/Header';\nimport { Search, Filter, Download } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\nimport { useAuthQuery, useAuthApiRequest } from '@/hooks/use-auth-query';\nimport { useAuth } from '@/contexts/AuthContext';\n\ninterface OrderFilters {\n  subOrderNo: string;\n  status: string;\n  paymentStatus: string;\n  dateFrom: string;\n  dateTo: string;\n}\n\nexport default function Orders() {\n  const [filters, setFilters] = useState<OrderFilters>({\n    subOrderNo: '',\n    status: '',\n    paymentStatus: '',\n    dateFrom: '',\n    dateTo: '',\n  });\n  const [handleDuplicates, setHandleDuplicates] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: orders, isLoading } = useAuthQuery<any[]>({\n    queryKey: ['/api/orders', Object.keys(filters).length > 0 ? `?${new URLSearchParams(filters as any).toString()}` : ''],\n  });\n\n  const apiRequest = useAuthApiRequest();\n  \n\n  const handleApplyFilters = () => {\n    queryClient.invalidateQueries({ queryKey: ['/api/orders'] });\n  };\n\n  const handleClearFilters = () => {\n    setFilters({\n      subOrderNo: '',\n      status: '',\n      paymentStatus: '',\n      dateFrom: '',\n      dateTo: '',\n    });\n    queryClient.invalidateQueries({ queryKey: ['/api/orders'] });\n  };\n\n  const handleExportOrders = () => {\n    const params = new URLSearchParams(filters);\n    window.open(`/api/export/orders?${params}`, '_blank');\n  };\n\n  const getStatusBadge = (status: string) => {\n    switch (status.toUpperCase()) {\n      case 'DELIVERED':\n        return <Badge className=\"bg-green-100 text-green-800\">DELIVERED</Badge>;\n      case 'RTO_COMPLETE':\n        return <Badge variant=\"destructive\">RTO_COMPLETE</Badge>;\n      case 'CANCELLED':\n        return <Badge className=\"bg-gray-100 text-gray-800\">CANCELLED</Badge>;\n      case 'RTO_LOCKED':\n        return <Badge className=\"bg-yellow-100 text-yellow-800\">RTO_LOCKED</Badge>;\n      default:\n        return <Badge variant=\"secondary\">{status}</Badge>;\n    }\n  };\n\n  const getPaymentStatusBadge = (hasPayment: boolean) => {\n    return hasPayment \n      ? <Badge className=\"bg-blue-100 text-blue-800\">Paid</Badge>\n      : <Badge variant=\"secondary\">Pending</Badge>;\n  };\n\n  const formatCurrency = (amount: string | number) => {\n    return new Intl.NumberFormat('en-IN', {\n      style: 'currency',\n      currency: 'INR',\n    }).format(Number(amount));\n  };\n\n  const calculateProfit = (settlement: number, cost: number) => {\n    const profit = settlement - cost;\n    return {\n      amount: profit,\n      isProfit: profit >= 0,\n      formatted: formatCurrency(profit),\n    };\n  };\n\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <Header title=\"Orders Management\" subtitle=\"View and manage your orders data\" />\n      \n      <div className=\"flex-1 p-6\">\n        {/* Filters Section */}\n        <Card className=\"shadow-sm mb-6\">\n          <CardContent className=\"p-6\">\n            <h3 className=\"text-lg font-semibold mb-4 flex items-center gap-2\">\n              <Filter className=\"w-5 h-5\" />\n              Filters\n            </h3>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n              <div>\n                <Label htmlFor=\"sub-order-id\">Sub Order ID</Label>\n                <Input\n                  id=\"sub-order-id\"\n                  placeholder=\"Search sub order ID...\"\n                  value={filters.subOrderNo}\n                  onChange={(e) => setFilters({ ...filters, subOrderNo: e.target.value })}\n                  data-testid=\"input-sub-order-id\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"order-status\">Order Status</Label>\n                <Select value={filters.status} onValueChange={(value) => setFilters({ ...filters, status: value })}>\n                  <SelectTrigger data-testid=\"select-order-status\">\n                    <SelectValue placeholder=\"All Statuses\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Statuses</SelectItem>\n                    <SelectItem value=\"DELIVERED\">DELIVERED</SelectItem>\n                    <SelectItem value=\"RTO_COMPLETE\">RTO_COMPLETE</SelectItem>\n                    <SelectItem value=\"CANCELLED\">CANCELLED</SelectItem>\n                    <SelectItem value=\"RTO_LOCKED\">RTO_LOCKED</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              <div>\n                <Label htmlFor=\"payment-status\">Payment Status</Label>\n                <Select value={filters.paymentStatus} onValueChange={(value) => setFilters({ ...filters, paymentStatus: value })}>\n                  <SelectTrigger data-testid=\"select-payment-status\">\n                    <SelectValue placeholder=\"All Payments\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Payments</SelectItem>\n                    <SelectItem value=\"paid\">Paid</SelectItem>\n                    <SelectItem value=\"pending\">Pending</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              <div>\n                <Label htmlFor=\"date-range\">Date Range</Label>\n                <Input\n                  id=\"date-range\"\n                  type=\"date\"\n                  value={filters.dateFrom}\n                  onChange={(e) => setFilters({ ...filters, dateFrom: e.target.value })}\n                  data-testid=\"input-date-range\"\n                />\n              </div>\n            </div>\n            <div className=\"flex justify-between items-center mt-4\">\n              <div className=\"flex gap-2\">\n                <Button onClick={handleApplyFilters} data-testid=\"button-apply-filters\">\n                  Apply Filters\n                </Button>\n                <Button variant=\"secondary\" onClick={handleClearFilters} data-testid=\"button-clear-filters\">\n                  Clear\n                </Button>\n              </div>\n              <div className=\"flex items-center gap-4\">\n                <label className=\"flex items-center gap-2\">\n                  <Checkbox \n                    checked={handleDuplicates}\n                    onCheckedChange={setHandleDuplicates}\n                    data-testid=\"checkbox-handle-duplicates\"\n                  />\n                  <span className=\"text-sm\">Handle Duplicates</span>\n                </label>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Orders Table */}\n        <Card className=\"shadow-sm\">\n          <CardContent className=\"p-0\">\n            <div className=\"p-6 border-b border-border\">\n              <div className=\"flex justify-between items-center\">\n                <h3 className=\"text-lg font-semibold\">\n                  Orders ({orders ? orders.length : 0} total)\n                </h3>\n                <div className=\"flex items-center gap-2\">\n                  <Button \n                    variant=\"secondary\" \n                    size=\"sm\" \n                    onClick={handleExportOrders}\n                    data-testid=\"button-export-orders\"\n                  >\n                    <Download className=\"w-4 h-4 mr-2\" />\n                    Export\n                  </Button>\n                </div>\n              </div>\n            </div>\n            <div className=\"overflow-x-auto\">\n              <table className=\"w-full\">\n                <thead className=\"bg-muted/50\">\n                  <tr>\n                    <th className=\"px-4 py-3 text-left text-sm font-medium text-muted-foreground\">S.No</th>\n                    <th className=\"px-4 py-3 text-left text-sm font-medium text-muted-foreground\">SKU</th>\n                    <th className=\"px-4 py-3 text-left text-sm font-medium text-muted-foreground\">Sub Order ID</th>\n                    <th className=\"px-4 py-3 text-left text-sm font-medium text-muted-foreground\">Qty</th>\n                    <th className=\"px-4 py-3 text-left text-sm font-medium text-muted-foreground\">Order Date</th>\n                    <th className=\"px-4 py-3 text-left text-sm font-medium text-muted-foreground\">Listed Price</th>\n                    <th className=\"px-4 py-3 text-left text-sm font-medium text-muted-foreground\">Settlement</th>\n                    <th className=\"px-4 py-3 text-left text-sm font-medium text-muted-foreground\">Order Status</th>\n                    <th className=\"px-4 py-3 text-left text-sm font-medium text-muted-foreground\">Payment Status</th>\n                  </tr>\n                </thead>\n                <tbody className=\"divide-y divide-border\">\n                  {isLoading ? (\n                    <tr>\n                      <td colSpan={9} className=\"px-4 py-8 text-center text-muted-foreground\">\n                        Loading orders...\n                      </td>\n                    </tr>\n                  ) : orders && orders.length > 0 ? (\n                    orders.map((order: any, index: number) => (\n                      <tr key={order.id} className=\"hover:bg-muted/50\" data-testid={`row-order-${order.subOrderNo}`}>\n                        <td className=\"px-4 py-3 text-sm\">{index + 1}</td>\n                        <td className=\"px-4 py-3 text-sm font-mono\">{order.sku}</td>\n                        <td className=\"px-4 py-3 text-sm font-mono\">{order.subOrderNo}</td>\n                        <td className=\"px-4 py-3 text-sm\">{order.quantity}</td>\n                        <td className=\"px-4 py-3 text-sm\">\n                          {new Date(order.orderDate).toLocaleDateString()}\n                        </td>\n                        <td className=\"px-4 py-3 text-sm\">{formatCurrency(order.listedPrice)}</td>\n                        <td className=\"px-4 py-3 text-sm font-medium\">\n                          {formatCurrency(order.discountedPrice)}\n                        </td>\n                        <td className=\"px-4 py-3\">\n                          {getStatusBadge(order.reasonForCredit)}\n                        </td>\n                        <td className=\"px-4 py-3\">\n                          {getPaymentStatusBadge(false)} {/* Will be updated based on reconciliation */}\n                        </td>\n                      </tr>\n                    ))\n                  ) : (\n                    <tr>\n                      <td colSpan={9} className=\"px-4 py-8 text-center text-muted-foreground\">\n                        No orders found. Upload order files to get started.\n                      </td>\n                    </tr>\n                  )}\n                </tbody>\n              </table>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":11239},"client/src/pages/Products.tsx":{"content":"import { useState } from 'react';\nimport { useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport Header from '@/components/Header';\nimport { Package, Upload, Search } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\nimport { useAuthQuery, useAuthApiRequest } from '@/hooks/use-auth-query';\nimport { useAuth } from '@/contexts/AuthContext';\n\nexport default function Products() {\n  const [bulkPackagingCost, setBulkPackagingCost] = useState('');\n  const [bulkGstPercent, setBulkGstPercent] = useState('');\n  const [searchQuery, setSearchQuery] = useState('');\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const apiRequest = useAuthApiRequest();\n\n  const { data: products, isLoading } = useAuthQuery({\n    queryKey: ['/api/products'],\n  });\n\n  const updateProductMutation = useMutation({\n    mutationFn: async ({ sku, data }: { sku: string; data: any }) => {\n      return apiRequest('PUT', `/api/products/${sku}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/products'] });\n      toast({\n        title: \"Product updated\",\n        description: \"Product has been updated successfully.\",\n      });\n    },\n  });\n\n  const bulkUpdateMutation = useMutation({\n    mutationFn: async ({ field, value }: { field: string; value: string }) => {\n      return apiRequest('POST', '/api/products/bulk-update', { field, value });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/products'] });\n      toast({\n        title: \"Bulk update completed\",\n        description: \"All products have been updated successfully.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Bulk update failed\",\n        description: \"There was an error updating the products.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleProductUpdate = (sku: string, field: string, value: string) => {\n    updateProductMutation.mutate({\n      sku,\n      data: { [field]: value }\n    });\n  };\n\n  const handleBulkSetPackaging = () => {\n    if (!bulkPackagingCost) {\n      toast({\n        title: \"Missing value\",\n        description: \"Please enter a packaging cost value.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    bulkUpdateMutation.mutate({\n      field: 'packagingCost',\n      value: bulkPackagingCost\n    });\n  };\n\n  const handleBulkSetGST = () => {\n    if (!bulkGstPercent) {\n      toast({\n        title: \"Missing value\", \n        description: \"Please enter a GST percentage value.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    bulkUpdateMutation.mutate({\n      field: 'gstPercent',\n      value: bulkGstPercent\n    });\n  };\n\n  const filteredProducts = products?.filter((product: any) =>\n    product.sku.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    product.title.toLowerCase().includes(searchQuery.toLowerCase())\n  ) || [];\n\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <Header title=\"Products\" subtitle=\"Manage product costs and configurations\" />\n      \n      <div className=\"flex-1 p-6\">\n        {/* Product Management Header */}\n        <Card className=\"shadow-sm mb-6\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex justify-between items-center mb-4\">\n              <h3 className=\"text-lg font-semibold flex items-center gap-2\">\n                <Package className=\"w-5 h-5\" />\n                Product Cost Management\n              </h3>\n              <div className=\"flex items-center gap-4\">\n                <Button variant=\"secondary\" data-testid=\"button-import-products\">\n                  <Upload className=\"w-4 h-4 mr-2\" />\n                  Import Products\n                </Button>\n                <Button data-testid=\"button-update-all-products\">\n                  Update All Product Costs\n                </Button>\n              </div>\n            </div>\n            \n            {/* Bulk Actions */}\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <div>\n                <Label htmlFor=\"bulk-packaging\">Bulk Set Packaging Cost</Label>\n                <div className=\"flex gap-2\">\n                  <Input\n                    id=\"bulk-packaging\"\n                    type=\"number\"\n                    step=\"0.01\"\n                    placeholder=\"₹ Amount\"\n                    value={bulkPackagingCost}\n                    onChange={(e) => setBulkPackagingCost(e.target.value)}\n                    data-testid=\"input-bulk-packaging-cost\"\n                  />\n                  <Button \n                    variant=\"outline\" \n                    onClick={handleBulkSetPackaging}\n                    disabled={bulkUpdateMutation.isPending}\n                    data-testid=\"button-bulk-set-packaging\"\n                  >\n                    Apply to All\n                  </Button>\n                </div>\n              </div>\n              <div>\n                <Label htmlFor=\"bulk-gst\">Bulk Set GST %</Label>\n                <div className=\"flex gap-2\">\n                  <Input\n                    id=\"bulk-gst\"\n                    type=\"number\"\n                    step=\"0.1\"\n                    placeholder=\"% Rate\"\n                    value={bulkGstPercent}\n                    onChange={(e) => setBulkGstPercent(e.target.value)}\n                    data-testid=\"input-bulk-gst-percent\"\n                  />\n                  <Button \n                    variant=\"outline\" \n                    onClick={handleBulkSetGST}\n                    disabled={bulkUpdateMutation.isPending}\n                    data-testid=\"button-bulk-set-gst\"\n                  >\n                    Apply to All\n                  </Button>\n                </div>\n              </div>\n              <div>\n                <Label htmlFor=\"search\">Search Products</Label>\n                <div className=\"relative\">\n                  <Search className=\"w-4 h-4 absolute left-3 top-3 text-muted-foreground\" />\n                  <Input\n                    id=\"search\"\n                    placeholder=\"Search by SKU or title...\"\n                    value={searchQuery}\n                    onChange={(e) => setSearchQuery(e.target.value)}\n                    className=\"pl-9\"\n                    data-testid=\"input-search-products\"\n                  />\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Products Table */}\n        <Card className=\"shadow-sm\">\n          <CardContent className=\"p-0\">\n            <div className=\"p-6 border-b border-border\">\n              <h3 className=\"text-lg font-semibold\">\n                Products ({filteredProducts.length} total)\n              </h3>\n            </div>\n            <div className=\"overflow-x-auto\">\n              <table className=\"w-full\">\n                <thead className=\"bg-muted/50\">\n                  <tr>\n                    <th className=\"px-4 py-3 text-left text-sm font-medium text-muted-foreground\">SKU</th>\n                    <th className=\"px-4 py-3 text-left text-sm font-medium text-muted-foreground\">Product Title</th>\n                    <th className=\"px-4 py-3 text-left text-sm font-medium text-muted-foreground\">Cost Price (₹)</th>\n                    <th className=\"px-4 py-3 text-left text-sm font-medium text-muted-foreground\">Packaging Cost (₹)</th>\n                    <th className=\"px-4 py-3 text-left text-sm font-medium text-muted-foreground\">GST (%)</th>\n                    <th className=\"px-4 py-3 text-left text-sm font-medium text-muted-foreground\">Total Orders</th>\n                    <th className=\"px-4 py-3 text-left text-sm font-medium text-muted-foreground\">Last Updated</th>\n                    <th className=\"px-4 py-3 text-left text-sm font-medium text-muted-foreground\">Actions</th>\n                  </tr>\n                </thead>\n                <tbody className=\"divide-y divide-border\">\n                  {isLoading ? (\n                    <tr>\n                      <td colSpan={8} className=\"px-4 py-8 text-center text-muted-foreground\">\n                        Loading products...\n                      </td>\n                    </tr>\n                  ) : filteredProducts.length > 0 ? (\n                    filteredProducts.map((product: any) => (\n                      <tr key={product.id} className=\"hover:bg-muted/50\" data-testid={`row-product-${product.sku}`}>\n                        <td className=\"px-4 py-3 text-sm font-mono\">{product.sku}</td>\n                        <td className=\"px-4 py-3 text-sm\" title={product.title}>\n                          {product.title.length > 50 ? `${product.title.slice(0, 50)}...` : product.title}\n                        </td>\n                        <td className=\"px-4 py-3 text-sm\">\n                          <Input\n                            type=\"number\"\n                            step=\"0.01\"\n                            defaultValue={product.costPrice || '0'}\n                            onBlur={(e) => handleProductUpdate(product.sku, 'costPrice', e.target.value)}\n                            className=\"w-20\"\n                            data-testid={`input-cost-price-${product.sku}`}\n                          />\n                        </td>\n                        <td className=\"px-4 py-3 text-sm\">\n                          <Input\n                            type=\"number\"\n                            step=\"0.01\"\n                            defaultValue={product.packagingCost || '0'}\n                            onBlur={(e) => handleProductUpdate(product.sku, 'packagingCost', e.target.value)}\n                            className=\"w-20\"\n                            data-testid={`input-packaging-cost-${product.sku}`}\n                          />\n                        </td>\n                        <td className=\"px-4 py-3 text-sm\">\n                          <Input\n                            type=\"number\"\n                            step=\"0.1\"\n                            defaultValue={product.gstPercent || '18'}\n                            onBlur={(e) => handleProductUpdate(product.sku, 'gstPercent', e.target.value)}\n                            className=\"w-16\"\n                            data-testid={`input-gst-percent-${product.sku}`}\n                          />\n                        </td>\n                        <td className=\"px-4 py-3 text-sm text-muted-foreground\">\n                          {product.totalOrders || 0}\n                        </td>\n                        <td className=\"px-4 py-3 text-sm text-muted-foreground\">\n                          {new Date(product.updatedAt).toLocaleString()}\n                        </td>\n                        <td className=\"px-4 py-3 text-sm\">\n                          <Button \n                            variant=\"link\" \n                            size=\"sm\"\n                            data-testid={`button-save-${product.sku}`}\n                          >\n                            Save\n                          </Button>\n                        </td>\n                      </tr>\n                    ))\n                  ) : (\n                    <tr>\n                      <td colSpan={8} className=\"px-4 py-8 text-center text-muted-foreground\">\n                        No products found. {searchQuery ? 'Try adjusting your search.' : 'Upload order files to create products.'}\n                      </td>\n                    </tr>\n                  )}\n                </tbody>\n              </table>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":11763},"client/src/pages/Reconciliation.tsx":{"content":"import { useState } from 'react';\nimport { useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Badge } from '@/components/ui/badge';\nimport Header from '@/components/Header';\nimport { Calculator, CheckCircle, X, AlertTriangle, Download } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\nimport { useAuthQuery, useAuthApiRequest } from '@/hooks/use-auth-query';\nimport { useAuth } from '@/contexts/AuthContext';\n\ninterface ReconciliationFilters {\n  dateFrom: string;\n  dateTo: string;\n  tolerance: string;\n  status: string;\n}\n\nexport default function Reconciliation() {\n  const [filters, setFilters] = useState<ReconciliationFilters>({\n    dateFrom: '',\n    dateTo: '',\n    tolerance: '1.00',\n    status: '',\n  });\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const apiRequest = useAuthApiRequest();\n\n  const { data: reconciliations, isLoading: reconciliationsLoading } = useAuthQuery({\n    queryKey: ['/api/reconciliations', filters.status],\n  });\n\n  const { data: summary, isLoading: summaryLoading } = useAuthQuery({\n    queryKey: ['/api/reconciliations/summary'],\n  });\n\n  const reconciliationMutation = useMutation({\n    mutationFn: async () => {\n      return apiRequest('POST', '/api/reconciliations/run', {});\n    },\n    onSuccess: (response) => {\n      const data = response.json();\n      queryClient.invalidateQueries({ queryKey: ['/api/reconciliations'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/reconciliations/summary'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/dashboard/summary'] });\n      toast({\n        title: \"Reconciliation completed\",\n        description: `Processed ${data.processed} records. ${data.reconciled} reconciled, ${data.mismatched} mismatched, ${data.unreconciled} unreconciled.`,\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Reconciliation failed\",\n        description: \"There was an error running the reconciliation engine.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleRunReconciliation = () => {\n    reconciliationMutation.mutate();\n  };\n\n  const handleExportResults = () => {\n    const params = new URLSearchParams({ status: filters.status });\n    window.open(`/api/export/reconciliations?${params}`, '_blank');\n  };\n\n  const getStatusBadge = (status: string) => {\n    switch (status.toLowerCase()) {\n      case 'reconciled':\n        return (\n          <Badge className=\"bg-green-100 text-green-800\">\n            <CheckCircle className=\"w-3 h-3 mr-1\" />\n            Reconciled\n          </Badge>\n        );\n      case 'mismatch':\n        return (\n          <Badge className=\"bg-yellow-100 text-yellow-800\">\n            <AlertTriangle className=\"w-3 h-3 mr-1\" />\n            Mismatch\n          </Badge>\n        );\n      case 'unreconciled':\n        return (\n          <Badge variant=\"secondary\">\n            <X className=\"w-3 h-3 mr-1\" />\n            Unreconciled\n          </Badge>\n        );\n      default:\n        return <Badge variant=\"secondary\">{status}</Badge>;\n    }\n  };\n\n  const formatCurrency = (amount: string | number) => {\n    return new Intl.NumberFormat('en-IN', {\n      style: 'currency',\n      currency: 'INR',\n    }).format(Number(amount));\n  };\n\n  const summaryData = summary || {\n    reconciled: 0,\n    mismatch: 0,\n    unreconciled: 0,\n    successRate: 0,\n  };\n\n  return (\n    <div className=\"flex-1 flex flex-col overflow-hidden\">\n      <Header title=\"Reconciliation\" subtitle=\"Review and reconcile payment discrepancies\" />\n      \n      <div className=\"flex-1 overflow-auto p-6\">\n        {/* Reconciliation Controls */}\n        <Card className=\"shadow-sm mb-6\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex justify-between items-center mb-4\">\n              <h3 className=\"text-lg font-semibold flex items-center gap-2\">\n                <Calculator className=\"w-5 h-5\" />\n                Reconciliation Engine\n              </h3>\n              <Button \n                onClick={handleRunReconciliation}\n                disabled={reconciliationMutation.isPending}\n                data-testid=\"button-run-full-reconciliation\"\n              >\n                {reconciliationMutation.isPending ? 'Running...' : 'Run Full Reconciliation'}\n              </Button>\n            </div>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <div>\n                <Label htmlFor=\"date-from\">Date From</Label>\n                <Input\n                  id=\"date-from\"\n                  type=\"date\"\n                  value={filters.dateFrom}\n                  onChange={(e) => setFilters({ ...filters, dateFrom: e.target.value })}\n                  data-testid=\"input-date-from\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"date-to\">Date To</Label>\n                <Input\n                  id=\"date-to\"\n                  type=\"date\"\n                  value={filters.dateTo}\n                  onChange={(e) => setFilters({ ...filters, dateTo: e.target.value })}\n                  data-testid=\"input-date-to\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"tolerance\">Tolerance (₹)</Label>\n                <Input\n                  id=\"tolerance\"\n                  type=\"number\"\n                  step=\"0.01\"\n                  value={filters.tolerance}\n                  onChange={(e) => setFilters({ ...filters, tolerance: e.target.value })}\n                  data-testid=\"input-tolerance\"\n                />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Reconciliation Summary */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n          <Card className=\"shadow-sm\" data-testid=\"card-reconciled-orders\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-muted-foreground text-sm\">Reconciled Orders</p>\n                  <p className=\"text-2xl font-bold text-green-600\" data-testid=\"text-reconciled-count\">\n                    {summaryLoading ? '...' : summaryData.reconciled.toLocaleString()}\n                  </p>\n                </div>\n                <div className=\"w-10 h-10 bg-green-100 rounded-full flex items-center justify-center\">\n                  <CheckCircle className=\"w-5 h-5 text-green-600\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"shadow-sm\" data-testid=\"card-mismatched\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-muted-foreground text-sm\">Mismatched</p>\n                  <p className=\"text-2xl font-bold text-yellow-600\" data-testid=\"text-mismatch-count\">\n                    {summaryLoading ? '...' : summaryData.mismatch.toLocaleString()}\n                  </p>\n                </div>\n                <div className=\"w-10 h-10 bg-yellow-100 rounded-full flex items-center justify-center\">\n                  <AlertTriangle className=\"w-5 h-5 text-yellow-600\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"shadow-sm\" data-testid=\"card-unreconciled\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-muted-foreground text-sm\">Unreconciled</p>\n                  <p className=\"text-2xl font-bold text-red-600\" data-testid=\"text-unreconciled-count\">\n                    {summaryLoading ? '...' : summaryData.unreconciled.toLocaleString()}\n                  </p>\n                </div>\n                <div className=\"w-10 h-10 bg-red-100 rounded-full flex items-center justify-center\">\n                  <X className=\"w-5 h-5 text-red-600\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"shadow-sm\" data-testid=\"card-success-rate\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-muted-foreground text-sm\">Success Rate</p>\n                  <p className=\"text-2xl font-bold text-blue-600\" data-testid=\"text-success-rate\">\n                    {summaryLoading ? '...' : `${summaryData.successRate.toFixed(1)}%`}\n                  </p>\n                </div>\n                <div className=\"w-10 h-10 bg-blue-100 rounded-full flex items-center justify-center\">\n                  <Calculator className=\"w-5 h-5 text-blue-600\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Reconciliation Details */}\n        <Card className=\"shadow-sm\">\n          <CardContent className=\"p-0\">\n            <div className=\"p-6 border-b border-border\">\n              <div className=\"flex justify-between items-center\">\n                <h3 className=\"text-lg font-semibold\">Reconciliation Details</h3>\n                <div className=\"flex items-center gap-4\">\n                  <Select value={filters.status} onValueChange={(value) => setFilters({ ...filters, status: value })}>\n                    <SelectTrigger className=\"w-40\" data-testid=\"select-status-filter\">\n                      <SelectValue placeholder=\"All Status\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">All Status</SelectItem>\n                      <SelectItem value=\"reconciled\">Reconciled</SelectItem>\n                      <SelectItem value=\"mismatch\">Mismatch</SelectItem>\n                      <SelectItem value=\"unreconciled\">Unreconciled</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  <Button \n                    variant=\"secondary\" \n                    onClick={handleExportResults}\n                    data-testid=\"button-export-results\"\n                  >\n                    <Download className=\"w-4 h-4 mr-2\" />\n                    Export Results\n                  </Button>\n                </div>\n              </div>\n            </div>\n            <div className=\"overflow-x-auto\">\n              <table className=\"w-full\">\n                <thead className=\"bg-muted/50\">\n                  <tr>\n                    <th className=\"px-4 py-3 text-left text-sm font-medium text-muted-foreground\">Sub Order ID</th>\n                    <th className=\"px-4 py-3 text-left text-sm font-medium text-muted-foreground\">SKU</th>\n                    <th className=\"px-4 py-3 text-left text-sm font-medium text-muted-foreground\">Order Value</th>\n                    <th className=\"px-4 py-3 text-left text-sm font-medium text-muted-foreground\">Settlement</th>\n                    <th className=\"px-4 py-3 text-left text-sm font-medium text-muted-foreground\">Product Cost</th>\n                    <th className=\"px-4 py-3 text-left text-sm font-medium text-muted-foreground\">Ads Cost</th>\n                    <th className=\"px-4 py-3 text-left text-sm font-medium text-muted-foreground\">Net Profit</th>\n                    <th className=\"px-4 py-3 text-left text-sm font-medium text-muted-foreground\">Status</th>\n                    <th className=\"px-4 py-3 text-left text-sm font-medium text-muted-foreground\">Actions</th>\n                  </tr>\n                </thead>\n                <tbody className=\"divide-y divide-border\">\n                  {reconciliationsLoading ? (\n                    <tr>\n                      <td colSpan={9} className=\"px-4 py-8 text-center text-muted-foreground\">\n                        Loading reconciliation data...\n                      </td>\n                    </tr>\n                  ) : reconciliations && reconciliations.length > 0 ? (\n                    reconciliations.map((reconciliation: any) => {\n                      const netProfit = Number(reconciliation.netProfit) || 0;\n                      const isProfit = netProfit >= 0;\n                      \n                      return (\n                        <tr key={reconciliation.id} className=\"hover:bg-muted/50\" data-testid={`row-reconciliation-${reconciliation.subOrderNo}`}>\n                          <td className=\"px-4 py-3 text-sm font-mono\">{reconciliation.subOrderNo}</td>\n                          <td className=\"px-4 py-3 text-sm font-mono\">\n                            {/* This would need to be joined from the order data */}\n                            -\n                          </td>\n                          <td className=\"px-4 py-3 text-sm\">{formatCurrency(reconciliation.orderValue)}</td>\n                          <td className=\"px-4 py-3 text-sm font-medium\">{formatCurrency(reconciliation.settlementAmount)}</td>\n                          <td className=\"px-4 py-3 text-sm\">{formatCurrency(reconciliation.productCost)}</td>\n                          <td className=\"px-4 py-3 text-sm\">{formatCurrency(reconciliation.adsCost)}</td>\n                          <td className={`px-4 py-3 text-sm font-medium ${isProfit ? 'text-green-600' : 'text-red-600'}`}>\n                            {isProfit ? '+' : ''}{formatCurrency(netProfit)}\n                          </td>\n                          <td className=\"px-4 py-3\">\n                            {getStatusBadge(reconciliation.status)}\n                          </td>\n                          <td className=\"px-4 py-3 text-sm\">\n                            <Button \n                              variant=\"link\" \n                              size=\"sm\"\n                              data-testid={`button-view-details-${reconciliation.subOrderNo}`}\n                            >\n                              View\n                            </Button>\n                          </td>\n                        </tr>\n                      );\n                    })\n                  ) : (\n                    <tr>\n                      <td colSpan={9} className=\"px-4 py-8 text-center text-muted-foreground\">\n                        No reconciliation data found. Run reconciliation to generate results.\n                      </td>\n                    </tr>\n                  )}\n                </tbody>\n              </table>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":14775},"client/src/pages/Upload.tsx":{"content":"import { useState } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Badge } from '@/components/ui/badge';\nimport Header from '@/components/Header';\nimport { Upload as UploadIcon, FileText, Archive } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest, getQueryFn } from '@/lib/queryClient';\nimport { useAuth } from '@/contexts/AuthContext';\n\nexport default function Upload() {\n  const [paymentFiles, setPaymentFiles] = useState<FileList | null>(null);\n  const [ordersFiles, setOrdersFiles] = useState<FileList | null>(null);\n  const [sourceMonth, setSourceMonth] = useState('');\n  const [label, setLabel] = useState('');\n  const { toast } = useToast();\n  const { token } = useAuth();\n  const queryClient = useQueryClient();\n\n  const { data: uploads = [], isLoading } = useQuery({\n    queryKey: ['/api/uploads'],\n    queryFn: getQueryFn({ on401: \"returnNull\", token }),\n    enabled: !!token,\n  });\n\n  const uploadMutation = useMutation({\n    mutationFn: async (formData: FormData) => {\n      const response = await fetch('/api/upload', {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n        },\n        body: formData,\n      });\n      if (!response.ok) {\n        throw new Error('Upload failed');\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/uploads'] });\n      toast({\n        title: \"Upload started\",\n        description: \"Your files are being processed.\",\n      });\n      \n      // Start polling for completion and refresh UI when both files are processed\n      const pollForCompletion = () => {\n        setTimeout(async () => {\n          try {\n            const response = await fetch('/api/uploads', {\n              headers: { 'Authorization': `Bearer ${token}` },\n            });\n            const uploads = await response.json();\n            \n            // Check if all recent uploads are processed\n            const recentUploads = uploads.filter((upload: any) => \n              new Date(upload.createdAt) > new Date(Date.now() - 5 * 60 * 1000) // Last 5 minutes\n            );\n            \n            const allProcessed = recentUploads.length > 0 && \n              recentUploads.every((upload: any) => upload.status === 'processed' || upload.status === 'failed');\n            \n            if (allProcessed) {\n              // Refresh all data when processing is complete\n              queryClient.invalidateQueries({ queryKey: ['/api/dashboard/summary'] });\n              queryClient.invalidateQueries({ queryKey: ['/api/orders'] });\n              queryClient.invalidateQueries({ queryKey: ['/api/products'] });\n              queryClient.invalidateQueries({ queryKey: ['/api/uploads'] });\n              \n              toast({\n                title: \"Processing completed\",\n                description: \"Your files have been processed and data updated.\",\n              });\n            } else if (recentUploads.some((upload: any) => upload.status === 'processing')) {\n              pollForCompletion(); // Continue polling\n            }\n          } catch (error) {\n            // Silently handle polling errors\n          }\n        }, 2000); // Poll every 2 seconds\n      };\n      \n      pollForCompletion();\n      \n      // Reset form\n      setPaymentFiles(null);\n      setOrdersFiles(null);\n      setSourceMonth('');\n      setLabel('');\n    },\n    onError: () => {\n      toast({\n        title: \"Upload failed\",\n        description: \"There was an error uploading your files.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleProcessFiles = async () => {\n    if (!paymentFiles && !ordersFiles) {\n      toast({\n        title: \"No files selected\",\n        description: \"Please select at least one file to process.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const uploads = [];\n\n    if (paymentFiles) {\n      const formData = new FormData();\n      formData.append('file', paymentFiles[0]);\n      formData.append('fileType', 'payment_zip');\n      formData.append('sourceMonth', sourceMonth);\n      uploads.push(formData);\n    }\n\n    if (ordersFiles) {\n      const formData = new FormData();\n      formData.append('file', ordersFiles[0]);\n      formData.append('fileType', 'orders_csv');\n      formData.append('label', label);\n      uploads.push(formData);\n    }\n\n    // Process uploads sequentially\n    for (const formData of uploads) {\n      await uploadMutation.mutateAsync(formData);\n    }\n  };\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case 'processed':\n        return <Badge className=\"bg-green-100 text-green-800\">Processed</Badge>;\n      case 'processing':\n        return <Badge className=\"bg-yellow-100 text-yellow-800\">Processing</Badge>;\n      case 'failed':\n        return <Badge variant=\"destructive\">Failed</Badge>;\n      default:\n        return <Badge variant=\"secondary\">{status}</Badge>;\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <Header \n        title=\"Upload Files\" \n        subtitle=\"Upload and process payment and order files\"\n      />\n      \n      <div className=\"flex-1 p-6\">\n        {/* Upload Sections */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8\">\n          {/* Payment Files Upload */}\n          <Card className=\"shadow-sm\" data-testid=\"card-payment-upload\">\n            <CardContent className=\"p-6\">\n              <h3 className=\"text-lg font-semibold mb-4 flex items-center gap-2\">\n                <Archive className=\"w-5 h-5 text-blue-600\" />\n                Payment ZIP Files\n              </h3>\n              \n              <div \n                className=\"border-2 border-dashed border-border rounded-lg p-8 text-center hover:border-primary transition-colors cursor-pointer\"\n                onClick={() => document.getElementById('payment-file')?.click()}\n                data-testid=\"dropzone-payment\"\n              >\n                <UploadIcon className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                <p className=\"text-lg font-medium\">Drop payment ZIP files here</p>\n                <p className=\"text-muted-foreground mt-2\">or click to browse</p>\n                <p className=\"text-sm text-muted-foreground mt-2\">Supports ZIP files containing XLSX payment sheets</p>\n              </div>\n              \n              <input\n                id=\"payment-file\"\n                type=\"file\"\n                accept=\".zip\"\n                className=\"hidden\"\n                onChange={(e) => setPaymentFiles(e.target.files)}\n                data-testid=\"input-payment-file\"\n              />\n              \n              {paymentFiles && (\n                <div className=\"mt-4 p-3 bg-muted rounded-md\">\n                  <p className=\"text-sm font-medium\">Selected: {paymentFiles[0].name}</p>\n                </div>\n              )}\n              \n              <div className=\"mt-4\">\n                <Label htmlFor=\"source-month\">Source Month (Optional)</Label>\n                <Input\n                  id=\"source-month\"\n                  type=\"month\"\n                  value={sourceMonth}\n                  onChange={(e) => setSourceMonth(e.target.value)}\n                  data-testid=\"input-source-month\"\n                />\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Orders CSV Upload */}\n          <Card className=\"shadow-sm\" data-testid=\"card-orders-upload\">\n            <CardContent className=\"p-6\">\n              <h3 className=\"text-lg font-semibold mb-4 flex items-center gap-2\">\n                <FileText className=\"w-5 h-5 text-green-600\" />\n                Orders CSV Files\n              </h3>\n              \n              <div \n                className=\"border-2 border-dashed border-border rounded-lg p-8 text-center hover:border-primary transition-colors cursor-pointer\"\n                onClick={() => document.getElementById('orders-file')?.click()}\n                data-testid=\"dropzone-orders\"\n              >\n                <FileText className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                <p className=\"text-lg font-medium\">Drop orders CSV files here</p>\n                <p className=\"text-muted-foreground mt-2\">or click to browse</p>\n                <p className=\"text-sm text-muted-foreground mt-2\">Supports CSV files with order data</p>\n              </div>\n              \n              <input\n                id=\"orders-file\"\n                type=\"file\"\n                accept=\".csv\"\n                className=\"hidden\"\n                onChange={(e) => setOrdersFiles(e.target.files)}\n                data-testid=\"input-orders-file\"\n              />\n              \n              {ordersFiles && (\n                <div className=\"mt-4 p-3 bg-muted rounded-md\">\n                  <p className=\"text-sm font-medium\">Selected: {ordersFiles[0].name}</p>\n                </div>\n              )}\n              \n              <div className=\"mt-4\">\n                <Label htmlFor=\"label\">Label (Optional)</Label>\n                <Input\n                  id=\"label\"\n                  type=\"text\"\n                  placeholder=\"e.g., August 2024 Orders\"\n                  value={label}\n                  onChange={(e) => setLabel(e.target.value)}\n                  data-testid=\"input-label\"\n                />\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Process Files Button */}\n        <div className=\"text-center mb-8\">\n          <Button \n            size=\"lg\"\n            onClick={handleProcessFiles}\n            disabled={uploadMutation.isPending}\n            data-testid=\"button-process-files\"\n          >\n            {uploadMutation.isPending ? 'Processing...' : 'Process Files'}\n          </Button>\n        </div>\n\n        {/* Upload History */}\n        <Card className=\"shadow-sm\">\n          <CardContent className=\"p-0\">\n            <div className=\"p-6 border-b border-border\">\n              <h3 className=\"text-lg font-semibold\">Upload History</h3>\n            </div>\n            <div className=\"overflow-x-auto\">\n              <table className=\"w-full\">\n                <thead className=\"bg-muted/50\">\n                  <tr>\n                    <th className=\"px-6 py-3 text-left text-sm font-medium text-muted-foreground\">File Name</th>\n                    <th className=\"px-6 py-3 text-left text-sm font-medium text-muted-foreground\">Type</th>\n                    <th className=\"px-6 py-3 text-left text-sm font-medium text-muted-foreground\">Status</th>\n                    <th className=\"px-6 py-3 text-left text-sm font-medium text-muted-foreground\">Records</th>\n                    <th className=\"px-6 py-3 text-left text-sm font-medium text-muted-foreground\">Uploaded</th>\n                    <th className=\"px-6 py-3 text-left text-sm font-medium text-muted-foreground\">Actions</th>\n                  </tr>\n                </thead>\n                <tbody className=\"divide-y divide-border\">\n                  {isLoading ? (\n                    <tr>\n                      <td colSpan={6} className=\"px-6 py-8 text-center text-muted-foreground\">\n                        Loading upload history...\n                      </td>\n                    </tr>\n                  ) : Array.isArray(uploads) && uploads.length > 0 ? (\n                    uploads.map((upload: any) => (\n                      <tr key={upload.id} className=\"hover:bg-muted/50\" data-testid={`row-upload-${upload.id}`}>\n                        <td className=\"px-6 py-4 text-sm font-medium\">{upload.originalName}</td>\n                        <td className=\"px-6 py-4 text-sm\">\n                          {upload.fileType === 'payment_zip' ? 'Payment ZIP' : 'Orders CSV'}\n                        </td>\n                        <td className=\"px-6 py-4\">\n                          {getStatusBadge(upload.status)}\n                        </td>\n                        <td className=\"px-6 py-4 text-sm text-muted-foreground\">\n                          {upload.recordsProcessed > 0 \n                            ? `${upload.recordsProcessed} records` \n                            : '-'\n                          }\n                        </td>\n                        <td className=\"px-6 py-4 text-sm text-muted-foreground\">\n                          {new Date(upload.createdAt).toLocaleString()}\n                        </td>\n                        <td className=\"px-6 py-4 text-sm\">\n                          <Button variant=\"link\" size=\"sm\" data-testid={`button-view-${upload.id}`}>\n                            View\n                          </Button>\n                        </td>\n                      </tr>\n                    ))\n                  ) : (\n                    <tr>\n                      <td colSpan={6} className=\"px-6 py-8 text-center text-muted-foreground\">\n                        No uploads yet. Upload your first file to get started.\n                      </td>\n                    </tr>\n                  )}\n                </tbody>\n              </table>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":13374},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/charts/OrderStatusChart.tsx":{"content":"import { PieChart, Pie, Cell, ResponsiveContainer, Tooltip, Legend } from 'recharts';\n\nconst mockData = [\n  { name: 'Delivered', value: 127, color: 'hsl(147 78% 42%)' },\n  { name: 'RTO Complete', value: 16, color: 'hsl(0 84% 60%)' },\n  { name: 'Cancelled', value: 8, color: 'hsl(45 93% 47%)' },\n];\n\nexport default function OrderStatusChart() {\n  return (\n    <div className=\"h-64\">\n      <ResponsiveContainer width=\"100%\" height=\"100%\">\n        <PieChart>\n          <Pie\n            data={mockData}\n            cx=\"50%\"\n            cy=\"50%\"\n            innerRadius={60}\n            outerRadius={90}\n            paddingAngle={5}\n            dataKey=\"value\"\n          >\n            {mockData.map((entry, index) => (\n              <Cell key={`cell-${index}`} fill={entry.color} />\n            ))}\n          </Pie>\n          <Tooltip \n            formatter={(value: number) => [`${value} orders`, 'Count']}\n          />\n          <Legend \n            verticalAlign=\"bottom\" \n            height={36}\n            formatter={(value) => <span className=\"text-xs\">{value}</span>}\n          />\n        </PieChart>\n      </ResponsiveContainer>\n    </div>\n  );\n}\n","size_bytes":1151},"client/src/components/charts/RevenueChart.tsx":{"content":"import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\n\nconst mockData = [\n  { month: 'Jan', revenue: 45000, profit: 12000 },\n  { month: 'Feb', revenue: 52000, profit: 15500 },\n  { month: 'Mar', revenue: 48000, profit: 13200 },\n  { month: 'Apr', revenue: 61000, profit: 18300 },\n  { month: 'May', revenue: 55000, profit: 16500 },\n  { month: 'Jun', revenue: 67000, profit: 20100 },\n  { month: 'Jul', revenue: 72000, profit: 21600 },\n  { month: 'Aug', revenue: 245678, profit: 45234 },\n];\n\nexport default function RevenueChart() {\n  return (\n    <div className=\"h-64\">\n      <ResponsiveContainer width=\"100%\" height=\"100%\">\n        <LineChart data={mockData}>\n          <CartesianGrid strokeDasharray=\"3 3\" className=\"opacity-30\" />\n          <XAxis \n            dataKey=\"month\" \n            className=\"text-xs\"\n            tick={{ fontSize: 12 }}\n          />\n          <YAxis \n            className=\"text-xs\"\n            tick={{ fontSize: 12 }}\n            tickFormatter={(value) => `₹${(value / 1000).toFixed(0)}k`}\n          />\n          <Tooltip \n            formatter={(value: number, name: string) => [\n              `₹${value.toLocaleString()}`, \n              name === 'revenue' ? 'Revenue' : 'Profit'\n            ]}\n            labelFormatter={(label) => `Month: ${label}`}\n          />\n          <Line \n            type=\"monotone\" \n            dataKey=\"revenue\" \n            stroke=\"hsl(214 100% 59%)\" \n            strokeWidth={2}\n            dot={{ fill: 'hsl(214 100% 59%)', strokeWidth: 2, r: 4 }}\n          />\n          <Line \n            type=\"monotone\" \n            dataKey=\"profit\" \n            stroke=\"hsl(147 78% 42%)\" \n            strokeWidth={2}\n            dot={{ fill: 'hsl(147 78% 42%)', strokeWidth: 2, r: 4 }}\n          />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n}\n","size_bytes":1868},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/hooks/use-auth-query.ts":{"content":"import { useQuery, useMutation, UseQueryOptions, UseMutationOptions } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { apiRequest, getQueryFn } from \"@/lib/queryClient\";\n\nexport function useAuthQuery<T>(options: UseQueryOptions<T> & { queryKey: readonly string[] }) {\n  const { token } = useAuth();\n  \n  return useQuery({\n    ...options,\n    queryFn: getQueryFn({ on401: \"throw\", token }),\n  });\n}\n\nexport function useAuthMutation<TData = unknown, TError = unknown, TVariables = void>(\n  mutationFn: (variables: TVariables, token: string | null) => Promise<TData>,\n  options?: UseMutationOptions<TData, TError, TVariables>\n) {\n  const { token } = useAuth();\n  \n  const authenticatedMutationFn = async (variables: TVariables): Promise<TData> => {\n    return mutationFn(variables, token);\n  };\n\n  return useMutation({\n    mutationFn: authenticatedMutationFn,\n    ...options,\n  });\n}\n\nexport function useAuthApiRequest() {\n  const { token } = useAuth();\n  \n  return (method: string, url: string, data?: unknown) => {\n    return apiRequest(method, url, data, token);\n  };\n}","size_bytes":1109},"README.md":{"content":"# Meesho Payment Reconciliation System\n\nA full-stack web application for reconciling payment data from Meesho with automated order matching and financial reporting capabilities.\n\n## 🚀 Features\n\n- **Authentication**: Firebase-based user authentication with email/password and Google sign-in\n- **File Upload**: Support for CSV and Excel file uploads for payment and order data\n- **Data Reconciliation**: Automated matching of payments with orders\n- **Dashboard**: Real-time analytics with charts and metrics\n- **Responsive Design**: Modern UI built with React, Tailwind CSS, and Shadcn/UI components\n\n## 🛠 Tech Stack\n\n**Frontend:**\n- React 18 with TypeScript\n- Vite for build tooling\n- Tailwind CSS + Shadcn/UI components\n- React Query for state management\n- Recharts for data visualization\n- Wouter for routing\n\n**Backend:**\n- Node.js with Express\n- TypeScript\n- Firebase Admin SDK\n- Drizzle ORM for database operations\n\n**Database:**\n- PostgreSQL (Supabase)\n- Drizzle ORM for schema management\n\n**Authentication:**\n- Firebase Authentication\n- Google OAuth integration\n- Session-based authentication with express-session\n\n## 🔧 Environment Setup\n\n### Quick Setup for New Developers\n\n1. **Check Configuration Files**:\n   - All credentials are stored in `config/setup.js` and `config/env.template`\n   - Use these files to quickly understand and set up the project\n\n2. **Run Setup Helper** (optional):\n   ```bash\n   node -e \"require('./config/setup.js').setupEnvironment()\"\n   ```\n\n### Required Environment Variables\n\nCopy values from `config/env.template` to your Replit Secrets:\n\n```env\n# Firebase Configuration\nVITE_FIREBASE_PROJECT_ID=reconme-fbee1\nVITE_FIREBASE_APP_ID=1:511599323860:web:38ac9cf5e061ff350e2941\nVITE_FIREBASE_API_KEY=AIzaSyCLtVv-8X3mBfKeCkS_Q0nqk-7DoPfDo4c\nVITE_FIREBASE_MESSAGING_SENDER_ID=511599323860\n\n# Database\nDATABASE_URL=postgresql://postgres:$Harsh98@db.tepwrjnmaosalngjffvy.supabase.co:5432/postgres\n```\n\n### Firebase Configuration Details\n\n```javascript\nconst firebaseConfig = {\n  apiKey: \"AIzaSyCLtVv-8X3mBfKeCkS_Q0nqk-7DoPfDo4c\",\n  authDomain: \"reconme-fbee1.firebaseapp.com\",\n  databaseURL: \"https://reconme-fbee1-default-rtdb.firebaseio.com\",\n  projectId: \"reconme-fbee1\",\n  storageBucket: \"reconme-fbee1.firebasestorage.app\",\n  messagingSenderId: \"511599323860\",\n  appId: \"1:511599323860:web:38ac9cf5e061ff350e2941\"\n};\n```\n\n### Test Credentials\n\nFor testing purposes, use these credentials:\n- **Email**: test@gmail.com\n- **Password**: test1234\n\n## 📦 Installation & Setup\n\n1. **Install Dependencies**:\n   ```bash\n   npm install\n   ```\n\n2. **Set Environment Variables**:\n   - Add the Firebase environment variables listed above\n   - Ensure DATABASE_URL is configured for your database\n\n3. **Database Setup**:\n   ```bash\n   npm run db:push\n   ```\n\n4. **Start Development Server**:\n   ```bash\n   npm run dev\n   ```\n\n## 📁 Project Structure\n\n```\n├── client/                 # Frontend React application\n│   ├── src/\n│   │   ├── components/     # Reusable UI components\n│   │   ├── contexts/       # React contexts (Auth, etc.)\n│   │   ├── hooks/          # Custom React hooks\n│   │   ├── lib/           # Utilities and configurations\n│   │   ├── pages/         # Page components\n│   │   └── main.tsx       # Entry point\n├── server/                # Backend Express server\n│   ├── services/          # Business logic services\n│   ├── index.ts          # Server entry point\n│   └── routes.ts         # API routes\n├── shared/               # Shared types and schemas\n└── package.json          # Dependencies and scripts\n```\n\n## 🔄 Available Scripts\n\n- `npm run dev` - Start development server\n- `npm run build` - Build for production\n- `npm run start` - Start production server\n- `npm run check` - TypeScript type checking\n- `npm run db:push` - Push database schema changes\n\n## 🔐 Security Features\n\n- Environment variable-based configuration\n- Firebase authentication with secure token management\n- Session-based authentication with secure cookies\n- Input validation using Zod schemas\n- Protected API routes with authentication middleware\n\n## 🚀 Deployment\n\nThe application is configured for Replit deployment:\n- Frontend serves from port 5000\n- Backend API runs on the same port\n- Environment variables managed through Replit's secret management\n- Automatic SSL and domain setup\n\n## 🔄 Data Flow\n\n1. **File Upload**: Users upload payment/order CSV/Excel files\n2. **Processing**: Backend processes and validates data\n3. **Storage**: Data stored in PostgreSQL database\n4. **Reconciliation**: Automated matching of payments with orders\n5. **Visualization**: Dashboard displays reconciliation results and analytics\n\n## 🤝 Contributing\n\nWhen making changes to this project:\n\n1. Ensure environment variables are properly configured\n2. Test authentication flows with provided test credentials\n3. Verify database connectivity before deploying\n4. Follow existing code patterns and TypeScript conventions\n\n## 📝 Notes for Future Development\n\n- Firebase project: `reconme-fbee1`\n- Database: Supabase PostgreSQL instance\n- Authentication supports both email/password and Google OAuth\n- All sensitive configuration is environment-based for security\n- The project uses modern React patterns with hooks and context\n- Backend follows RESTful API design principles\n\n## 🆘 Troubleshooting\n\n**Authentication Issues:**\n- Verify Firebase environment variables are set correctly\n- Check Firebase console for authorized domains\n- Ensure test credentials are active in Firebase Auth\n\n**Database Issues:**\n- Verify DATABASE_URL connection string\n- Check Supabase dashboard for connection limits\n- Run `npm run db:push` to sync schema\n\n**Build Issues:**\n- Clear node_modules and reinstall: `rm -rf node_modules && npm install`\n- Check TypeScript compilation: `npm run check`\n- Verify all environment variables are set","size_bytes":5961},"config/setup.js":{"content":"// Quick Setup Configuration\n// This file contains all the configuration needed for the application\n// For security, actual values are stored in environment variables\n\nexport const firebaseConfig = {\n  apiKey: \"AIzaSyCLtVv-8X3mBfKeCkS_Q0nqk-7DoPfDo4c\",\n  authDomain: \"reconme-fbee1.firebaseapp.com\",\n  databaseURL: \"https://reconme-fbee1-default-rtdb.firebaseio.com\",\n  projectId: \"reconme-fbee1\",\n  storageBucket: \"reconme-fbee1.firebasestorage.app\",\n  messagingSenderId: \"511599323860\",\n  appId: \"1:511599323860:web:38ac9cf5e061ff350e2941\"\n};\n\nexport const databaseConfig = {\n  url: \"postgresql://postgres:$Harsh98@db.tepwrjnmaosalngjffvy.supabase.co:5432/postgres\"\n};\n\nexport const testCredentials = {\n  email: \"test@gmail.com\",\n  password: \"test1234\"\n};\n\n// Quick setup function for new developers\nexport function setupEnvironment() {\n  console.log(\"=== Meesho Payment Reconciliation Setup ===\");\n  console.log(\"1. Set these environment variables in Replit Secrets:\");\n  console.log(\"   VITE_FIREBASE_PROJECT_ID:\", firebaseConfig.projectId);\n  console.log(\"   VITE_FIREBASE_APP_ID:\", firebaseConfig.appId);\n  console.log(\"   VITE_FIREBASE_API_KEY:\", firebaseConfig.apiKey);\n  console.log(\"   VITE_FIREBASE_MESSAGING_SENDER_ID:\", firebaseConfig.messagingSenderId);\n  console.log(\"   DATABASE_URL:\", databaseConfig.url);\n  console.log(\"\");\n  console.log(\"2. Test login credentials:\");\n  console.log(\"   Email:\", testCredentials.email);\n  console.log(\"   Password:\", testCredentials.password);\n  console.log(\"\");\n  console.log(\"3. Run 'npm install' then 'npm run dev'\");\n}\n\n// Uncomment the line below to run setup\n// setupEnvironment();","size_bytes":1638},"CREDENTIALS.md":{"content":"# Embedded Credentials Reference\n\nAll credentials are now embedded directly in the code for easy future usage:\n\n## Firebase Configuration (Client & Server)\n- **Project ID**: reconme-fbee1\n- **API Key**: AIzaSyCLtVv-8X3mBfKeCkS_Q0nqk-7DoPfDo4c\n- **App ID**: 1:511599323860:web:38ac9cf5e061ff350e2941\n- **Messaging Sender ID**: 511599323860\n\n## Database Configuration  \n- **Supabase URL**: postgresql://postgres:$Harsh98@db.tepwrjnmaosalngjffvy.supabase.co:5432/postgres\n\n## Test Login Credentials\n- **Email**: test@gmail.com\n- **Password**: test1234\n\n## File Locations\n- Client Firebase Config: `client/src/lib/firebase.ts`\n- Server Firebase Config: `server/services/firebase.ts`\n- Database Config: `server/storage.ts`\n\nAll configurations are embedded with fallbacks, so the application will work immediately after download without any environment setup required.","size_bytes":862},"LOCAL_SETUP_INSTRUCTIONS.md":{"content":"# Local Setup Instructions - Meesho Payment Reconciliation System\n\nComplete step-by-step guide to run the Meesho Payment Reconciliation application on your local machine.\n\n## 📋 Prerequisites\n\nBefore starting, ensure you have the following installed:\n\n### Required Software\n1. **Node.js** (version 18 or higher)\n   - Download from: https://nodejs.org/\n   - Verify installation: `node --version`\n\n2. **npm** (comes with Node.js)\n   - Verify installation: `npm --version`\n\n3. **Git** (for cloning repository)\n   - Download from: https://git-scm.com/\n   - Verify installation: `git --version`\n\n## 🚀 Step 1: Get the Code\n\n### Option A: Clone from GitHub (if available)\n```bash\ngit clone <your-github-repository-url>\ncd meesho-payment-reconciliation\n```\n\n### Option B: Download ZIP file\n1. Download the project ZIP file\n2. Extract to your desired folder\n3. Open terminal/command prompt in the extracted folder\n\n## 📦 Step 2: Install Dependencies\n\n```bash\n# Install all project dependencies\nnpm install\n```\n\n**Expected output:** You should see packages being installed and no major errors.\n\n## 🗄️ Step 3: Database Setup\n\nThe application uses Supabase PostgreSQL database with embedded credentials.\n\n### Push Database Schema\n```bash\n# Create all required database tables\nnpm run db:push\n```\n\n**Expected output:** \n```\n✓ Pulling schema from database...\n✓ Changes applied\n```\n\n## 🔥 Step 4: Firebase Configuration\n\n**✅ No setup required!** All Firebase credentials are embedded in the code:\n- Located in: `client/src/lib/firebase.ts` and `server/services/firebase.ts`\n- Project: `reconme-fbee1`\n- All configuration is automatic\n\n## ▶️ Step 5: Start the Application\n\n```bash\n# Start the development server\nnpm run dev\n```\n\n**Expected output:**\n```\n> rest-express@1.0.0 dev\n> NODE_ENV=development tsx server/index.ts\n\n[timestamp] [express] serving on port 5000\n```\n\n## 🌐 Step 6: Access the Application\n\n1. **Open your web browser**\n2. **Navigate to:** `http://localhost:5000`\n3. **You should see:** The login page for Meesho Payment Reconciliation\n\n## 🔐 Step 7: Test Login\n\nUse the embedded test credentials:\n- **Email:** `test@gmail.com`\n- **Password:** `test1234`\n\n### Login Process:\n1. Enter the credentials on the login page\n2. Click \"Sign In\"\n3. You should be redirected to the Dashboard\n4. Dashboard should display analytics and summary data\n\n## 📁 Step 8: Test File Upload\n\n1. **Navigate to Upload page** (use sidebar menu)\n2. **Test with sample files:**\n   - **Orders CSV:** Any CSV file with order data\n   - **Payment Excel:** Any XLSX file with payment data\n3. **Upload process:**\n   - Select files\n   - Add source month/label (optional)\n   - Click \"Process Files\"\n   - Check upload status in the history section\n\n## 🛠️ Step 9: Verify All Features\n\n### Core Features to Test:\n- ✅ **Authentication:** Login/logout works\n- ✅ **Dashboard:** Analytics and charts display\n- ✅ **File Upload:** CSV and Excel files can be uploaded\n- ✅ **Data Processing:** Files are processed and stored\n- ✅ **Navigation:** All menu items work (Orders, Products, Reconciliation)\n\n## 🔧 Step 10: Development Commands\n\n```bash\n# Start development server\nnpm run dev\n\n# Build for production\nnpm run build\n\n# Start production server\nnpm run start\n\n# Check TypeScript types\nnpm run check\n\n# Push database schema changes\nnpm run db:push\n```\n\n## 📂 Project Structure Overview\n\n```\nmeesho-payment-reconciliation/\n├── client/                 # Frontend React application\n│   ├── src/\n│   │   ├── components/     # Reusable UI components\n│   │   ├── pages/         # Page components\n│   │   ├── lib/           # Firebase and utility configs\n│   │   └── contexts/      # React contexts\n├── server/                # Backend Express server\n│   ├── services/          # Business logic\n│   ├── routes.ts          # API routes\n│   └── storage.ts         # Database operations\n├── shared/                # Shared types and schemas\n└── config/               # Configuration files\n```\n\n## 🚨 Troubleshooting\n\n### Common Issues and Solutions:\n\n#### 1. **Port 5000 already in use**\n```bash\n# Kill process using port 5000\nnpx kill-port 5000\n# Then restart\nnpm run dev\n```\n\n#### 2. **Database connection errors**\n- **Issue:** `relation \"users\" does not exist`\n- **Solution:** Run `npm run db:push` to create tables\n\n#### 3. **Firebase authentication errors**\n- **Issue:** `Invalid API key`\n- **Solution:** Credentials are embedded, restart the server: `npm run dev`\n\n#### 4. **Module not found errors**\n```bash\n# Clean install dependencies\nrm -rf node_modules\nrm package-lock.json\nnpm install\n```\n\n#### 5. **TypeScript errors**\n```bash\n# Check for type errors\nnpm run check\n```\n\n#### 6. **Build errors**\n```bash\n# Clean build\nrm -rf dist\nnpm run build\n```\n\n## 📊 Using the Application\n\n### 1. **Dashboard**\n- View revenue analytics\n- Monitor reconciliation status\n- Check order success rates\n\n### 2. **Upload Files**\n- **Payment Files:** Upload Meesho payment XLSX files\n- **Order Files:** Upload order CSV files\n- Monitor processing status\n\n### 3. **Orders Management**\n- View all uploaded orders\n- Filter by date, status, sub-order number\n- Export data\n\n### 4. **Products Management**\n- View product catalog\n- Update cost prices and GST\n- Monitor product performance\n\n### 5. **Reconciliation**\n- View matched/unmatched payments\n- Analyze profit margins\n- Export reconciliation reports\n\n## 🔒 Important Notes\n\n### Security:\n- **Database credentials** are embedded for development\n- **Firebase credentials** are embedded for easy setup\n- **For production:** Use environment variables\n\n### Data:\n- **Test data** is safe to use\n- **Real data** will be processed and stored\n- **Database** is persistent across restarts\n\n### Performance:\n- **File size limit:** 50MB per upload\n- **Supported formats:** CSV, XLSX, ZIP\n- **Processing** is asynchronous\n\n## ✅ Success Checklist\n\nBefore considering setup complete, verify:\n\n- [ ] Node.js and npm installed\n- [ ] Dependencies installed without errors\n- [ ] Database tables created (`npm run db:push`)\n- [ ] Server starts on port 5000\n- [ ] Login works with test credentials\n- [ ] Dashboard loads with data\n- [ ] File upload interface accessible\n- [ ] All navigation menu items work\n\n## 📞 Getting Help\n\nIf you encounter issues:\n\n1. **Check the console** for error messages\n2. **Verify prerequisites** are installed correctly\n3. **Run commands in order** as specified\n4. **Check database connectivity** with `npm run db:push`\n5. **Restart the server** if authentication fails\n\n## 🎯 Next Steps\n\nAfter successful setup:\n\n1. **Customize** the application for your needs\n2. **Upload real data** for testing\n3. **Configure production** environment variables\n4. **Deploy** to your preferred hosting platform\n\n---\n\n**🎉 Congratulations!** Your Meesho Payment Reconciliation System is now running locally!","size_bytes":6950},".local/state/replit/agent/progress_tracker.md":{"content":"[x] 1. Install the required packages\n[x] 2. Restart the workflow to see if the project is working\n[x] 3. Verify the project is working using the feedback tool\n[x] 4. Inform user the import is completed and they can start building, mark the import as completed using the complete_project_import tool","size_bytes":298}},"version":1}